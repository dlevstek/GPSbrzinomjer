
GPS_Speedometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026ac  0800cbd0  0800cbd0  0001cbd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f27c  0800f27c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f27c  0800f27c  0001f27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f284  0800f284  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f284  0800f284  0001f284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f288  0800f288  0001f288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800f28c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000072c  200001fc  0800f488  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000928  0800f488  00020928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a58b  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ef  00000000  00000000  0003a7b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  0003dda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001488  00000000  00000000  0003f3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249a4  00000000  00000000  00040848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b575  00000000  00000000  000651ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de738  00000000  00000000  00080761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ee99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007568  00000000  00000000  0015eeec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cbb4 	.word	0x0800cbb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	0800cbb4 	.word	0x0800cbb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800100e:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001010:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <MX_ADC1_Init+0xc0>)
 8001012:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001016:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800101a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800101c:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <MX_ADC1_Init+0xbc>)
 800101e:	2210      	movs	r2, #16
 8001020:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001022:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <MX_ADC1_Init+0xbc>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001030:	2204      	movs	r2, #4
 8001032:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001036:	2200      	movs	r2, #0
 8001038:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800103a:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <MX_ADC1_Init+0xbc>)
 800103c:	2200      	movs	r2, #0
 800103e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001042:	2201      	movs	r2, #1
 8001044:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001050:	2200      	movs	r2, #0
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001056:	2200      	movs	r2, #0
 8001058:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MX_ADC1_Init+0xbc>)
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001064:	2200      	movs	r2, #0
 8001066:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_ADC1_Init+0xbc>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001070:	4810      	ldr	r0, [pc, #64]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001072:	f001 fd4b 	bl	8002b0c <HAL_ADC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800107c:	f000 fd0a 	bl	8001a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_ADC1_Init+0xc4>)
 8001082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001084:	2306      	movs	r3, #6
 8001086:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800108c:	237f      	movs	r3, #127	; 0x7f
 800108e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001090:	2304      	movs	r3, #4
 8001092:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001098:	463b      	mov	r3, r7
 800109a:	4619      	mov	r1, r3
 800109c:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_ADC1_Init+0xbc>)
 800109e:	f001 ff7d 	bl	8002f9c <HAL_ADC_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80010a8:	f000 fcf4 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000218 	.word	0x20000218
 80010b8:	50040000 	.word	0x50040000
 80010bc:	25b00200 	.word	0x25b00200

080010c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b09e      	sub	sp, #120	; 0x78
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	2254      	movs	r2, #84	; 0x54
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f006 fc5f 	bl	80079a4 <memset>
  if(adcHandle->Instance==ADC1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a25      	ldr	r2, [pc, #148]	; (8001180 <HAL_ADC_MspInit+0xc0>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d143      	bne.n	8001178 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010f4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010fa:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010fc:	2301      	movs	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 8001100:	2304      	movs	r3, #4
 8001102:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001104:	2310      	movs	r3, #16
 8001106:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001108:	2307      	movs	r3, #7
 800110a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800110c:	2302      	movs	r3, #2
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001110:	2302      	movs	r3, #2
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4618      	mov	r0, r3
 8001120:	f004 fb1c 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800112a:	f000 fcb3 	bl	8001a94 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_ADC_MspInit+0xc4>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a14      	ldr	r2, [pc, #80]	; (8001184 <HAL_ADC_MspInit+0xc4>)
 8001134:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_ADC_MspInit+0xc4>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_ADC_MspInit+0xc4>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <HAL_ADC_MspInit+0xc4>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_ADC_MspInit+0xc4>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800115e:	2310      	movs	r3, #16
 8001160:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001162:	230b      	movs	r3, #11
 8001164:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f002 fd08 	bl	8003b88 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001178:	bf00      	nop
 800117a:	3778      	adds	r7, #120	; 0x78
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	50040000 	.word	0x50040000
 8001184:	40021000 	.word	0x40021000

08001188 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <MX_GPIO_Init+0xb0>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	4a25      	ldr	r2, [pc, #148]	; (8001238 <MX_GPIO_Init+0xb0>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011aa:	4b23      	ldr	r3, [pc, #140]	; (8001238 <MX_GPIO_Init+0xb0>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	4b20      	ldr	r3, [pc, #128]	; (8001238 <MX_GPIO_Init+0xb0>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	4a1f      	ldr	r2, [pc, #124]	; (8001238 <MX_GPIO_Init+0xb0>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <MX_GPIO_Init+0xb0>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2109      	movs	r1, #9
 80011d2:	481a      	ldr	r0, [pc, #104]	; (800123c <MX_GPIO_Init+0xb4>)
 80011d4:	f002 fe5a 	bl	8003e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011d8:	2303      	movs	r3, #3
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	4619      	mov	r1, r3
 80011ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f0:	f002 fcca 	bl	8003b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80011f4:	2309      	movs	r3, #9
 80011f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4619      	mov	r1, r3
 800120a:	480c      	ldr	r0, [pc, #48]	; (800123c <MX_GPIO_Init+0xb4>)
 800120c:	f002 fcbc 	bl	8003b88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	2006      	movs	r0, #6
 8001216:	f002 fc02 	bl	8003a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800121a:	2006      	movs	r0, #6
 800121c:	f002 fc1b 	bl	8003a56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	2100      	movs	r1, #0
 8001224:	2007      	movs	r0, #7
 8001226:	f002 fbfa 	bl	8003a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800122a:	2007      	movs	r0, #7
 800122c:	f002 fc13 	bl	8003a56 <HAL_NVIC_EnableIRQ>

}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40021000 	.word	0x40021000
 800123c:	48000400 	.word	0x48000400

08001240 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_I2C3_Init+0x74>)
 8001246:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <MX_I2C3_Init+0x78>)
 8001248:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300F38;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <MX_I2C3_Init+0x74>)
 800124c:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <MX_I2C3_Init+0x7c>)
 800124e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_I2C3_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <MX_I2C3_Init+0x74>)
 8001258:	2201      	movs	r2, #1
 800125a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_I2C3_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_I2C3_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_I2C3_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_I2C3_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_I2C3_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800127a:	480e      	ldr	r0, [pc, #56]	; (80012b4 <MX_I2C3_Init+0x74>)
 800127c:	f002 fe50 	bl	8003f20 <HAL_I2C_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001286:	f000 fc05 	bl	8001a94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800128a:	2100      	movs	r1, #0
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <MX_I2C3_Init+0x74>)
 800128e:	f003 fb31 	bl	80048f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001298:	f000 fbfc 	bl	8001a94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800129c:	2100      	movs	r1, #0
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_I2C3_Init+0x74>)
 80012a0:	f003 fb73 	bl	800498a <HAL_I2CEx_ConfigDigitalFilter>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80012aa:	f000 fbf3 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000027c 	.word	0x2000027c
 80012b8:	40005c00 	.word	0x40005c00
 80012bc:	00300f38 	.word	0x00300f38

080012c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0a0      	sub	sp, #128	; 0x80
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	2254      	movs	r2, #84	; 0x54
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f006 fb5f 	bl	80079a4 <memset>
  if(i2cHandle->Instance==I2C3)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a2d      	ldr	r2, [pc, #180]	; (80013a0 <HAL_I2C_MspInit+0xe0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d153      	bne.n	8001398 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80012f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012fa:	f107 0318 	add.w	r3, r7, #24
 80012fe:	4618      	mov	r0, r3
 8001300:	f004 fa2c 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800130a:	f000 fbc3 	bl	8001a94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <HAL_I2C_MspInit+0xe4>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a24      	ldr	r2, [pc, #144]	; (80013a4 <HAL_I2C_MspInit+0xe4>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <HAL_I2C_MspInit+0xe4>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <HAL_I2C_MspInit+0xe4>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <HAL_I2C_MspInit+0xe4>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HAL_I2C_MspInit+0xe4>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001342:	2312      	movs	r3, #18
 8001344:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800134e:	2304      	movs	r3, #4
 8001350:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001356:	4619      	mov	r1, r3
 8001358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135c:	f002 fc14 	bl	8003b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001360:	2310      	movs	r3, #16
 8001362:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001364:	2312      	movs	r3, #18
 8001366:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001370:	2304      	movs	r3, #4
 8001372:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001374:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001378:	4619      	mov	r1, r3
 800137a:	480b      	ldr	r0, [pc, #44]	; (80013a8 <HAL_I2C_MspInit+0xe8>)
 800137c:	f002 fc04 	bl	8003b88 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_I2C_MspInit+0xe4>)
 8001382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_I2C_MspInit+0xe4>)
 8001386:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800138a:	6593      	str	r3, [r2, #88]	; 0x58
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <HAL_I2C_MspInit+0xe4>)
 800138e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001390:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001398:	bf00      	nop
 800139a:	3780      	adds	r7, #128	; 0x80
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40005c00 	.word	0x40005c00
 80013a4:	40021000 	.word	0x40021000
 80013a8:	48000400 	.word	0x48000400

080013ac <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80013b4:	1d39      	adds	r1, r7, #4
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	2201      	movs	r2, #1
 80013bc:	4803      	ldr	r0, [pc, #12]	; (80013cc <__io_putchar+0x20>)
 80013be:	f005 f80d 	bl	80063dc <HAL_UART_Transmit>
  return ch;
 80013c2:	687b      	ldr	r3, [r7, #4]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000890 	.word	0x20000890

080013d0 <setbrightness.0>:
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  void setbrightness(uint8_t setbr){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	f8c7 c000 	str.w	ip, [r7]
  	  uint8_t contrast[3] = {0x00, 0x81, setbr};
 80013de:	2300      	movs	r3, #0
 80013e0:	733b      	strb	r3, [r7, #12]
 80013e2:	2381      	movs	r3, #129	; 0x81
 80013e4:	737b      	strb	r3, [r7, #13]
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	73bb      	strb	r3, [r7, #14]
  	  HAL_I2C_Master_Transmit(&hi2c3, SSD1306_I2C_ADDR, contrast, 3, 20); //preko I2C na mem. polje 0x00 saljemo 2 bita za osvjetljenje
 80013ea:	f107 020c 	add.w	r2, r7, #12
 80013ee:	2314      	movs	r3, #20
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2303      	movs	r3, #3
 80013f4:	2178      	movs	r1, #120	; 0x78
 80013f6:	4803      	ldr	r0, [pc, #12]	; (8001404 <setbrightness.0+0x34>)
 80013f8:	f002 fe22 	bl	8004040 <HAL_I2C_Master_Transmit>
  }
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000027c 	.word	0x2000027c

08001408 <main>:
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af08      	add	r7, sp, #32
int main(void)
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8001414:	f001 f919 	bl	800264a <HAL_Init>
  SystemClock_Config();
 8001418:	f000 fa0c 	bl	8001834 <SystemClock_Config>
  MX_GPIO_Init();
 800141c:	f7ff feb4 	bl	8001188 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001420:	f000 ffd8 	bl	80023d4 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8001424:	f000 ff6e 	bl	8002304 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001428:	f001 f804 	bl	8002434 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800142c:	f000 ff34 	bl	8002298 <MX_TIM6_Init>
  MX_I2C3_Init();
 8001430:	f7ff ff06 	bl	8001240 <MX_I2C3_Init>
  MX_ADC1_Init();
 8001434:	f7ff fde0 	bl	8000ff8 <MX_ADC1_Init>
  HAL_UART_Receive_IT(&huart1, &GPSbuffer[buffer_index], 1); //pokrece UART interrupt, potrebno staviti prije inicijalizacije ekrana inace ne radi
 8001438:	4b95      	ldr	r3, [pc, #596]	; (8001690 <main+0x288>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b95      	ldr	r3, [pc, #596]	; (8001694 <main+0x28c>)
 8001440:	4413      	add	r3, r2
 8001442:	2201      	movs	r2, #1
 8001444:	4619      	mov	r1, r3
 8001446:	4894      	ldr	r0, [pc, #592]	; (8001698 <main+0x290>)
 8001448:	f005 f85c 	bl	8006504 <HAL_UART_Receive_IT>
  ssd1306_Init(&hi2c3);	//inicijalizacija OLED ekrana na I2C3
 800144c:	4893      	ldr	r0, [pc, #588]	; (800169c <main+0x294>)
 800144e:	f000 fb3d 	bl	8001acc <ssd1306_Init>
  HAL_TIM_Base_Start_IT(&htim16); //pokretanje timera 16 sa interrupt funkcijom za zujalicu
 8001452:	4893      	ldr	r0, [pc, #588]	; (80016a0 <main+0x298>)
 8001454:	f004 fcc2 	bl	8005ddc <HAL_TIM_Base_Start_IT>
  previous = HAL_GetTick(); //za delay bez zaustavljanja procesora (umjesto interrupta)
 8001458:	f001 f960 	bl	800271c <HAL_GetTick>
 800145c:	4603      	mov	r3, r0
 800145e:	4a91      	ldr	r2, [pc, #580]	; (80016a4 <main+0x29c>)
 8001460:	6013      	str	r3, [r2, #0]

   while (1)
  {
	   if(newdata == 1){ //primili smo poruku koja zavrsava na /n
 8001462:	4b91      	ldr	r3, [pc, #580]	; (80016a8 <main+0x2a0>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	f040 808e 	bne.w	8001588 <main+0x180>
		   sscanf(&GPSbuffer, "$GNRMC,%10s,%c,%f,%c,%f,%c,%f,%f,%6s",
 800146c:	4b8f      	ldr	r3, [pc, #572]	; (80016ac <main+0x2a4>)
 800146e:	9306      	str	r3, [sp, #24]
 8001470:	4b8f      	ldr	r3, [pc, #572]	; (80016b0 <main+0x2a8>)
 8001472:	9305      	str	r3, [sp, #20]
 8001474:	4b8f      	ldr	r3, [pc, #572]	; (80016b4 <main+0x2ac>)
 8001476:	9304      	str	r3, [sp, #16]
 8001478:	4b8f      	ldr	r3, [pc, #572]	; (80016b8 <main+0x2b0>)
 800147a:	9303      	str	r3, [sp, #12]
 800147c:	4b8f      	ldr	r3, [pc, #572]	; (80016bc <main+0x2b4>)
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	4b8f      	ldr	r3, [pc, #572]	; (80016c0 <main+0x2b8>)
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	4b8f      	ldr	r3, [pc, #572]	; (80016c4 <main+0x2bc>)
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	4b8f      	ldr	r3, [pc, #572]	; (80016c8 <main+0x2c0>)
 800148a:	4a90      	ldr	r2, [pc, #576]	; (80016cc <main+0x2c4>)
 800148c:	4990      	ldr	r1, [pc, #576]	; (80016d0 <main+0x2c8>)
 800148e:	4881      	ldr	r0, [pc, #516]	; (8001694 <main+0x28c>)
 8001490:	f007 f948 	bl	8008724 <siscanf>
				   time, &status, &latitude, &lat_dir, &longitude, &lon_dir, &speedknts, &course, date); //pretvara string u varijable
		   speedkmh = speedknts*1.852; //cvorovi u km/h i float->int
 8001494:	4b87      	ldr	r3, [pc, #540]	; (80016b4 <main+0x2ac>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f855 	bl	8000548 <__aeabi_f2d>
 800149e:	a37a      	add	r3, pc, #488	; (adr r3, 8001688 <main+0x280>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7ff f8a8 	bl	80005f8 <__aeabi_dmul>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff fb7a 	bl	8000ba8 <__aeabi_d2uiz>
 80014b4:	4603      	mov	r3, r0
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	4b86      	ldr	r3, [pc, #536]	; (80016d4 <main+0x2cc>)
 80014ba:	701a      	strb	r2, [r3, #0]
		   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80014bc:	2108      	movs	r1, #8
 80014be:	4886      	ldr	r0, [pc, #536]	; (80016d8 <main+0x2d0>)
 80014c0:	f002 fcfc 	bl	8003ebc <HAL_GPIO_TogglePin>
		   if(hud == 0){ //ako ekran nije zrcaljen
 80014c4:	4b85      	ldr	r3, [pc, #532]	; (80016dc <main+0x2d4>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d11c      	bne.n	8001506 <main+0xfe>
			   HAL_ADC_Start(&hadc1);
 80014cc:	4884      	ldr	r0, [pc, #528]	; (80016e0 <main+0x2d8>)
 80014ce:	f001 fc65 	bl	8002d9c <HAL_ADC_Start>
			   HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80014d2:	f04f 31ff 	mov.w	r1, #4294967295
 80014d6:	4882      	ldr	r0, [pc, #520]	; (80016e0 <main+0x2d8>)
 80014d8:	f001 fcc3 	bl	8002e62 <HAL_ADC_PollForConversion>
			   br = HAL_ADC_GetValue(&hadc1); //iscitaj osvjetljenje
 80014dc:	4880      	ldr	r0, [pc, #512]	; (80016e0 <main+0x2d8>)
 80014de:	f001 fd4f 	bl	8002f80 <HAL_ADC_GetValue>
 80014e2:	4603      	mov	r3, r0
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b7f      	ldr	r3, [pc, #508]	; (80016e4 <main+0x2dc>)
 80014e8:	701a      	strb	r2, [r3, #0]
			   if(br < 10){
 80014ea:	4b7e      	ldr	r3, [pc, #504]	; (80016e4 <main+0x2dc>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b09      	cmp	r3, #9
 80014f0:	d802      	bhi.n	80014f8 <main+0xf0>
				   br=10;
 80014f2:	4b7c      	ldr	r3, [pc, #496]	; (80016e4 <main+0x2dc>)
 80014f4:	220a      	movs	r2, #10
 80014f6:	701a      	strb	r2, [r3, #0]
			   }
		   	   setbrightness(br); // podesi jacinu svjetla
 80014f8:	4b7a      	ldr	r3, [pc, #488]	; (80016e4 <main+0x2dc>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	1d3a      	adds	r2, r7, #4
 80014fe:	4694      	mov	ip, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff65 	bl	80013d0 <setbrightness.0>
		   }
		   newdata = 0; //primili smo podatke, ne ocitavaj vise do novih podataka
 8001506:	4b68      	ldr	r3, [pc, #416]	; (80016a8 <main+0x2a0>)
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
		#ifdef _DEBUG //ispis podataka s GPSa po potrebi
		   printf("Time: %s  ", time);
 800150c:	496f      	ldr	r1, [pc, #444]	; (80016cc <main+0x2c4>)
 800150e:	4876      	ldr	r0, [pc, #472]	; (80016e8 <main+0x2e0>)
 8001510:	f007 f8ca 	bl	80086a8 <iprintf>
		   printf("Status: %c  ", status);
 8001514:	4b6c      	ldr	r3, [pc, #432]	; (80016c8 <main+0x2c0>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	4874      	ldr	r0, [pc, #464]	; (80016ec <main+0x2e4>)
 800151c:	f007 f8c4 	bl	80086a8 <iprintf>
		   printf("Latitude: %f %c  ", latitude, lat_dir);
 8001520:	4b68      	ldr	r3, [pc, #416]	; (80016c4 <main+0x2bc>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f80f 	bl	8000548 <__aeabi_f2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4964      	ldr	r1, [pc, #400]	; (80016c0 <main+0x2b8>)
 8001530:	7809      	ldrb	r1, [r1, #0]
 8001532:	9100      	str	r1, [sp, #0]
 8001534:	486e      	ldr	r0, [pc, #440]	; (80016f0 <main+0x2e8>)
 8001536:	f007 f8b7 	bl	80086a8 <iprintf>
		   printf("Longitude: %f %c  ", longitude, lon_dir);
 800153a:	4b60      	ldr	r3, [pc, #384]	; (80016bc <main+0x2b4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f802 	bl	8000548 <__aeabi_f2d>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	495b      	ldr	r1, [pc, #364]	; (80016b8 <main+0x2b0>)
 800154a:	7809      	ldrb	r1, [r1, #0]
 800154c:	9100      	str	r1, [sp, #0]
 800154e:	4869      	ldr	r0, [pc, #420]	; (80016f4 <main+0x2ec>)
 8001550:	f007 f8aa 	bl	80086a8 <iprintf>
		   printf("Speed: %i  ", speedkmh);
 8001554:	4b5f      	ldr	r3, [pc, #380]	; (80016d4 <main+0x2cc>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	4867      	ldr	r0, [pc, #412]	; (80016f8 <main+0x2f0>)
 800155c:	f007 f8a4 	bl	80086a8 <iprintf>
		   printf("Date: %s ", date);
 8001560:	4952      	ldr	r1, [pc, #328]	; (80016ac <main+0x2a4>)
 8001562:	4866      	ldr	r0, [pc, #408]	; (80016fc <main+0x2f4>)
 8001564:	f007 f8a0 	bl	80086a8 <iprintf>
		   printf("Light: %d ", br);
 8001568:	4b5e      	ldr	r3, [pc, #376]	; (80016e4 <main+0x2dc>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	4864      	ldr	r0, [pc, #400]	; (8001700 <main+0x2f8>)
 8001570:	f007 f89a 	bl	80086a8 <iprintf>
		   printf("SetSpeed: %i\r\n", setspeed);
 8001574:	4b63      	ldr	r3, [pc, #396]	; (8001704 <main+0x2fc>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	4863      	ldr	r0, [pc, #396]	; (8001708 <main+0x300>)
 800157c:	f007 f894 	bl	80086a8 <iprintf>
		   printf("%s \r\n", GPSbuffer);
 8001580:	4944      	ldr	r1, [pc, #272]	; (8001694 <main+0x28c>)
 8001582:	4862      	ldr	r0, [pc, #392]	; (800170c <main+0x304>)
 8001584:	f007 f890 	bl	80086a8 <iprintf>
		#endif
	   }

	   itoa(setspeed, strSetSpeed, 10); // int -> char - zbog ispisa na OLED
 8001588:	4b5e      	ldr	r3, [pc, #376]	; (8001704 <main+0x2fc>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	220a      	movs	r2, #10
 800158e:	4960      	ldr	r1, [pc, #384]	; (8001710 <main+0x308>)
 8001590:	4618      	mov	r0, r3
 8001592:	f006 fa05 	bl	80079a0 <itoa>
	   if(hud == 0 && turned == 1){
 8001596:	4b51      	ldr	r3, [pc, #324]	; (80016dc <main+0x2d4>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10c      	bne.n	80015b8 <main+0x1b0>
 800159e:	4b5d      	ldr	r3, [pc, #372]	; (8001714 <main+0x30c>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d108      	bne.n	80015b8 <main+0x1b0>
		   HAL_I2C_Master_Transmit(&hi2c3, SSD1306_I2C_ADDR, HUDon, 2, 10); //preko I2C saljemo 0xC0 poruku za normalan ekran
 80015a6:	230a      	movs	r3, #10
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2302      	movs	r3, #2
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <main+0x310>)
 80015ae:	2178      	movs	r1, #120	; 0x78
 80015b0:	483a      	ldr	r0, [pc, #232]	; (800169c <main+0x294>)
 80015b2:	f002 fd45 	bl	8004040 <HAL_I2C_Master_Transmit>
 80015b6:	e014      	b.n	80015e2 <main+0x1da>
	   }else if(hud == 1 && turned == 1){
 80015b8:	4b48      	ldr	r3, [pc, #288]	; (80016dc <main+0x2d4>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d110      	bne.n	80015e2 <main+0x1da>
 80015c0:	4b54      	ldr	r3, [pc, #336]	; (8001714 <main+0x30c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d10c      	bne.n	80015e2 <main+0x1da>
		   HAL_I2C_Master_Transmit(&hi2c3, SSD1306_I2C_ADDR, HUDoff, 2, 10); //preko I2C saljemo 0xC8 poruku za normalan ekran
 80015c8:	230a      	movs	r3, #10
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2302      	movs	r3, #2
 80015ce:	4a53      	ldr	r2, [pc, #332]	; (800171c <main+0x314>)
 80015d0:	2178      	movs	r1, #120	; 0x78
 80015d2:	4832      	ldr	r0, [pc, #200]	; (800169c <main+0x294>)
 80015d4:	f002 fd34 	bl	8004040 <HAL_I2C_Master_Transmit>
		   setbrightness(255);
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	469c      	mov	ip, r3
 80015dc:	20ff      	movs	r0, #255	; 0xff
 80015de:	f7ff fef7 	bl	80013d0 <setbrightness.0>
	   }
	   turned = 0;
 80015e2:	4b4c      	ldr	r3, [pc, #304]	; (8001714 <main+0x30c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]


	   if(status == 'A'){ //ako primamo ispravne poruke i GPS signal
 80015e8:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <main+0x2c0>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b41      	cmp	r3, #65	; 0x41
 80015ee:	f040 80a5 	bne.w	800173c <main+0x334>
		   if(speedkmh > setspeed+5 && setspeed != 0){ //ako je brzina za 5 veca od dozvoljene aktiviraj zujalicu (3 beepa)
 80015f2:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <main+0x2cc>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b42      	ldr	r3, [pc, #264]	; (8001704 <main+0x2fc>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	3305      	adds	r3, #5
 80015fe:	429a      	cmp	r2, r3
 8001600:	dd06      	ble.n	8001610 <main+0x208>
 8001602:	4b40      	ldr	r3, [pc, #256]	; (8001704 <main+0x2fc>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <main+0x208>
			   Buzz = 1;
 800160a:	4b45      	ldr	r3, [pc, #276]	; (8001720 <main+0x318>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
		   }
		   if(speedkmh < setspeed-5){ //ako brzina padne ispod  dozvoljenje - 5 resetiraj zujalicu i dozvoli ponovno bipanje
 8001610:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <main+0x2cc>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b3b      	ldr	r3, [pc, #236]	; (8001704 <main+0x2fc>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	3b05      	subs	r3, #5
 800161c:	429a      	cmp	r2, r3
 800161e:	da05      	bge.n	800162c <main+0x224>
			   BzCnt = 0;
 8001620:	4b40      	ldr	r3, [pc, #256]	; (8001724 <main+0x31c>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
			   Buzz = 0;
 8001626:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <main+0x318>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
		   }
		  //Ispis na ekran
		   ssd1306_Fill(Black);
 800162c:	2000      	movs	r0, #0
 800162e:	f000 fb6d 	bl	8001d0c <ssd1306_Fill>
		   ssd1306_SetCursor(0, 5);
 8001632:	2105      	movs	r1, #5
 8001634:	2000      	movs	r0, #0
 8001636:	f000 fcc5 	bl	8001fc4 <ssd1306_SetCursor>
		   ssd1306_WriteString("Brzina:", Font_11x18, White);
 800163a:	4a3b      	ldr	r2, [pc, #236]	; (8001728 <main+0x320>)
 800163c:	2301      	movs	r3, #1
 800163e:	ca06      	ldmia	r2, {r1, r2}
 8001640:	483a      	ldr	r0, [pc, #232]	; (800172c <main+0x324>)
 8001642:	f000 fc99 	bl	8001f78 <ssd1306_WriteString>
		   itoa(speedkmh, strSpeed, 10); //int -> string
 8001646:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <main+0x2cc>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	220a      	movs	r2, #10
 800164c:	4938      	ldr	r1, [pc, #224]	; (8001730 <main+0x328>)
 800164e:	4618      	mov	r0, r3
 8001650:	f006 f9a6 	bl	80079a0 <itoa>
		   ssd1306_WriteString(strSpeed, Font_16x26, White);
 8001654:	4a37      	ldr	r2, [pc, #220]	; (8001734 <main+0x32c>)
 8001656:	2301      	movs	r3, #1
 8001658:	ca06      	ldmia	r2, {r1, r2}
 800165a:	4835      	ldr	r0, [pc, #212]	; (8001730 <main+0x328>)
 800165c:	f000 fc8c 	bl	8001f78 <ssd1306_WriteString>

		   ssd1306_SetCursor(0, 36);
 8001660:	2124      	movs	r1, #36	; 0x24
 8001662:	2000      	movs	r0, #0
 8001664:	f000 fcae 	bl	8001fc4 <ssd1306_SetCursor>
		   ssd1306_WriteString("Limit: ", Font_11x18, White);
 8001668:	4a2f      	ldr	r2, [pc, #188]	; (8001728 <main+0x320>)
 800166a:	2301      	movs	r3, #1
 800166c:	ca06      	ldmia	r2, {r1, r2}
 800166e:	4832      	ldr	r0, [pc, #200]	; (8001738 <main+0x330>)
 8001670:	f000 fc82 	bl	8001f78 <ssd1306_WriteString>
		   ssd1306_WriteString(strSetSpeed, Font_16x26, White);
 8001674:	4a2f      	ldr	r2, [pc, #188]	; (8001734 <main+0x32c>)
 8001676:	2301      	movs	r3, #1
 8001678:	ca06      	ldmia	r2, {r1, r2}
 800167a:	4825      	ldr	r0, [pc, #148]	; (8001710 <main+0x308>)
 800167c:	f000 fc7c 	bl	8001f78 <ssd1306_WriteString>
		   ssd1306_UpdateScreen(&hi2c3);
 8001680:	4806      	ldr	r0, [pc, #24]	; (800169c <main+0x294>)
 8001682:	f000 fb67 	bl	8001d54 <ssd1306_UpdateScreen>
 8001686:	e6ec      	b.n	8001462 <main+0x5a>
 8001688:	c083126f 	.word	0xc083126f
 800168c:	3ffda1ca 	.word	0x3ffda1ca
 8001690:	20000322 	.word	0x20000322
 8001694:	200002d0 	.word	0x200002d0
 8001698:	2000080c 	.word	0x2000080c
 800169c:	2000027c 	.word	0x2000027c
 80016a0:	200007c0 	.word	0x200007c0
 80016a4:	20000328 	.word	0x20000328
 80016a8:	20000338 	.word	0x20000338
 80016ac:	20000360 	.word	0x20000360
 80016b0:	2000035c 	.word	0x2000035c
 80016b4:	20000358 	.word	0x20000358
 80016b8:	20000354 	.word	0x20000354
 80016bc:	20000350 	.word	0x20000350
 80016c0:	2000034c 	.word	0x2000034c
 80016c4:	20000348 	.word	0x20000348
 80016c8:	20000347 	.word	0x20000347
 80016cc:	2000033c 	.word	0x2000033c
 80016d0:	0800cbd0 	.word	0x0800cbd0
 80016d4:	20000323 	.word	0x20000323
 80016d8:	48000400 	.word	0x48000400
 80016dc:	20000339 	.word	0x20000339
 80016e0:	20000218 	.word	0x20000218
 80016e4:	20000011 	.word	0x20000011
 80016e8:	0800cbf8 	.word	0x0800cbf8
 80016ec:	0800cc04 	.word	0x0800cc04
 80016f0:	0800cc14 	.word	0x0800cc14
 80016f4:	0800cc28 	.word	0x0800cc28
 80016f8:	0800cc3c 	.word	0x0800cc3c
 80016fc:	0800cc48 	.word	0x0800cc48
 8001700:	0800cc54 	.word	0x0800cc54
 8001704:	20000010 	.word	0x20000010
 8001708:	0800cc60 	.word	0x0800cc60
 800170c:	0800cc70 	.word	0x0800cc70
 8001710:	20000330 	.word	0x20000330
 8001714:	2000033a 	.word	0x2000033a
 8001718:	20000014 	.word	0x20000014
 800171c:	20000018 	.word	0x20000018
 8001720:	2000032d 	.word	0x2000032d
 8001724:	2000032c 	.word	0x2000032c
 8001728:	20000000 	.word	0x20000000
 800172c:	0800cc78 	.word	0x0800cc78
 8001730:	20000334 	.word	0x20000334
 8001734:	20000008 	.word	0x20000008
 8001738:	0800cc80 	.word	0x0800cc80

	   }else{ //ako nema GPS signala

		   current = HAL_GetTick(); //trenutno vrijeme
 800173c:	f000 ffee 	bl	800271c <HAL_GetTick>
 8001740:	4603      	mov	r3, r0
 8001742:	4a31      	ldr	r2, [pc, #196]	; (8001808 <main+0x400>)
 8001744:	6013      	str	r3, [r2, #0]
		   speedknts = 0;
 8001746:	4b31      	ldr	r3, [pc, #196]	; (800180c <main+0x404>)
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
		   Buzz = 0; //iskljucenje zujalice za svaki slucaj
 800174e:	4b30      	ldr	r3, [pc, #192]	; (8001810 <main+0x408>)
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //u slucaju da izgubimo GPS signal u trenutku zvucne signalizacije da ne ostane ukljucena
 8001754:	2200      	movs	r2, #0
 8001756:	2101      	movs	r1, #1
 8001758:	482e      	ldr	r0, [pc, #184]	; (8001814 <main+0x40c>)
 800175a:	f002 fb97 	bl	8003e8c <HAL_GPIO_WritePin>
		   if (current - previous < 800) { //interni brojac, koristimo umjesto timera i delaya, ako nije prošlo 800ms prikaži "Cekam satelite"
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <main+0x400>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <main+0x410>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800176c:	d227      	bcs.n	80017be <main+0x3b6>
			   ssd1306_SetCursor(35, 0);
 800176e:	2100      	movs	r1, #0
 8001770:	2023      	movs	r0, #35	; 0x23
 8001772:	f000 fc27 	bl	8001fc4 <ssd1306_SetCursor>
			   ssd1306_WriteString("Cekam", Font_11x18, White);
 8001776:	4a29      	ldr	r2, [pc, #164]	; (800181c <main+0x414>)
 8001778:	2301      	movs	r3, #1
 800177a:	ca06      	ldmia	r2, {r1, r2}
 800177c:	4828      	ldr	r0, [pc, #160]	; (8001820 <main+0x418>)
 800177e:	f000 fbfb 	bl	8001f78 <ssd1306_WriteString>
			   ssd1306_SetCursor(32, 20);
 8001782:	2114      	movs	r1, #20
 8001784:	2020      	movs	r0, #32
 8001786:	f000 fc1d 	bl	8001fc4 <ssd1306_SetCursor>
			   ssd1306_WriteString("signal", Font_11x18, White);
 800178a:	4a24      	ldr	r2, [pc, #144]	; (800181c <main+0x414>)
 800178c:	2301      	movs	r3, #1
 800178e:	ca06      	ldmia	r2, {r1, r2}
 8001790:	4824      	ldr	r0, [pc, #144]	; (8001824 <main+0x41c>)
 8001792:	f000 fbf1 	bl	8001f78 <ssd1306_WriteString>
			   ssd1306_SetCursor(5, 45);
 8001796:	212d      	movs	r1, #45	; 0x2d
 8001798:	2005      	movs	r0, #5
 800179a:	f000 fc13 	bl	8001fc4 <ssd1306_SetCursor>
			   ssd1306_WriteString("Limit:", Font_11x18, White);
 800179e:	4a1f      	ldr	r2, [pc, #124]	; (800181c <main+0x414>)
 80017a0:	2301      	movs	r3, #1
 80017a2:	ca06      	ldmia	r2, {r1, r2}
 80017a4:	4820      	ldr	r0, [pc, #128]	; (8001828 <main+0x420>)
 80017a6:	f000 fbe7 	bl	8001f78 <ssd1306_WriteString>
			   ssd1306_WriteString(strSetSpeed, Font_11x18, White);
 80017aa:	4a1c      	ldr	r2, [pc, #112]	; (800181c <main+0x414>)
 80017ac:	2301      	movs	r3, #1
 80017ae:	ca06      	ldmia	r2, {r1, r2}
 80017b0:	481e      	ldr	r0, [pc, #120]	; (800182c <main+0x424>)
 80017b2:	f000 fbe1 	bl	8001f78 <ssd1306_WriteString>
			   ssd1306_UpdateScreen(&hi2c3);
 80017b6:	481e      	ldr	r0, [pc, #120]	; (8001830 <main+0x428>)
 80017b8:	f000 facc 	bl	8001d54 <ssd1306_UpdateScreen>
 80017bc:	e651      	b.n	8001462 <main+0x5a>
		   }else if(current - previous < 1000){ //između 800 i 1000 ms
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <main+0x400>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <main+0x410>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017cc:	d216      	bcs.n	80017fc <main+0x3f4>
			   ssd1306_Fill(Black);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f000 fa9c 	bl	8001d0c <ssd1306_Fill>
			   ssd1306_SetCursor(5, 45);
 80017d4:	212d      	movs	r1, #45	; 0x2d
 80017d6:	2005      	movs	r0, #5
 80017d8:	f000 fbf4 	bl	8001fc4 <ssd1306_SetCursor>
			   ssd1306_WriteString("Limit:", Font_11x18, White);
 80017dc:	4a0f      	ldr	r2, [pc, #60]	; (800181c <main+0x414>)
 80017de:	2301      	movs	r3, #1
 80017e0:	ca06      	ldmia	r2, {r1, r2}
 80017e2:	4811      	ldr	r0, [pc, #68]	; (8001828 <main+0x420>)
 80017e4:	f000 fbc8 	bl	8001f78 <ssd1306_WriteString>
			   ssd1306_WriteString(strSetSpeed, Font_11x18, White);
 80017e8:	4a0c      	ldr	r2, [pc, #48]	; (800181c <main+0x414>)
 80017ea:	2301      	movs	r3, #1
 80017ec:	ca06      	ldmia	r2, {r1, r2}
 80017ee:	480f      	ldr	r0, [pc, #60]	; (800182c <main+0x424>)
 80017f0:	f000 fbc2 	bl	8001f78 <ssd1306_WriteString>
			   ssd1306_UpdateScreen(&hi2c3);
 80017f4:	480e      	ldr	r0, [pc, #56]	; (8001830 <main+0x428>)
 80017f6:	f000 faad 	bl	8001d54 <ssd1306_UpdateScreen>
 80017fa:	e632      	b.n	8001462 <main+0x5a>
		   }else{
			   previous = HAL_GetTick(); //ako je prošlo 1000 ms, updejtaj previous na trenutno stanje internog brojaca
 80017fc:	f000 ff8e 	bl	800271c <HAL_GetTick>
 8001800:	4603      	mov	r3, r0
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <main+0x410>)
 8001804:	6013      	str	r3, [r2, #0]
  {
 8001806:	e62c      	b.n	8001462 <main+0x5a>
 8001808:	20000324 	.word	0x20000324
 800180c:	20000358 	.word	0x20000358
 8001810:	2000032d 	.word	0x2000032d
 8001814:	48000400 	.word	0x48000400
 8001818:	20000328 	.word	0x20000328
 800181c:	20000000 	.word	0x20000000
 8001820:	0800cc88 	.word	0x0800cc88
 8001824:	0800cc90 	.word	0x0800cc90
 8001828:	0800cc98 	.word	0x0800cc98
 800182c:	20000330 	.word	0x20000330
 8001830:	2000027c 	.word	0x2000027c

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b096      	sub	sp, #88	; 0x58
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	2244      	movs	r2, #68	; 0x44
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f006 f8ae 	bl	80079a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	463b      	mov	r3, r7
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001856:	f44f 7000 	mov.w	r0, #512	; 0x200
 800185a:	f003 f8f1 	bl	8004a40 <HAL_PWREx_ControlVoltageScaling>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001864:	f000 f916 	bl	8001a94 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001868:	2312      	movs	r3, #18
 800186a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800186c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001870:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001872:	2310      	movs	r3, #16
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001876:	2301      	movs	r3, #1
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800187e:	23a0      	movs	r3, #160	; 0xa0
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001882:	2300      	movs	r3, #0
 8001884:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4618      	mov	r0, r3
 800188c:	f003 f92e 	bl	8004aec <HAL_RCC_OscConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001896:	f000 f8fd 	bl	8001a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189a:	230f      	movs	r3, #15
 800189c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018ae:	463b      	mov	r3, r7
 80018b0:	2101      	movs	r1, #1
 80018b2:	4618      	mov	r0, r3
 80018b4:	f003 fd2e 	bl	8005314 <HAL_RCC_ClockConfig>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80018be:	f000 f8e9 	bl	8001a94 <Error_Handler>
  }
}
 80018c2:	bf00      	nop
 80018c4:	3758      	adds	r7, #88	; 0x58
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//UART interrupt funkcija
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) //primljen je novi znak
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	if (GPSbuffer[buffer_index] == NL_Char){ //ako je primljen new line simbol
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_UART_RxCpltCallback+0x4c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_UART_RxCpltCallback+0x50>)
 80018dc:	5c9b      	ldrb	r3, [r3, r2]
 80018de:	2b0a      	cmp	r3, #10
 80018e0:	d106      	bne.n	80018f0 <HAL_UART_RxCpltCallback+0x24>
		newdata = 1; //primili smo cijelu re�?enicu
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_UART_RxCpltCallback+0x54>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
		buffer_index = 0; //resetiraj poziciju indexa
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_UART_RxCpltCallback+0x4c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	e005      	b.n	80018fc <HAL_UART_RxCpltCallback+0x30>
	}else{ // digni index za 1 za iduci znak
		buffer_index++;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_UART_RxCpltCallback+0x4c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	3301      	adds	r3, #1
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <HAL_UART_RxCpltCallback+0x4c>)
 80018fa:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, &GPSbuffer[buffer_index], 1); //pononvo pokreni interrupt
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_UART_RxCpltCallback+0x4c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_UART_RxCpltCallback+0x50>)
 8001904:	4413      	add	r3, r2
 8001906:	2201      	movs	r2, #1
 8001908:	4619      	mov	r1, r3
 800190a:	4806      	ldr	r0, [pc, #24]	; (8001924 <HAL_UART_RxCpltCallback+0x58>)
 800190c:	f004 fdfa 	bl	8006504 <HAL_UART_Receive_IT>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000322 	.word	0x20000322
 800191c:	200002d0 	.word	0x200002d0
 8001920:	20000338 	.word	0x20000338
 8001924:	2000080c 	.word	0x2000080c

08001928 <HAL_GPIO_EXTI_Callback>:

//interrupt funkcija kod pritiska tipke
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin == GPIO_PIN_0 || GPIO_Pin == GPIO_PIN_1)){ //ako je okinut jedan od interrupta
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d002      	beq.n	800193e <HAL_GPIO_EXTI_Callback+0x16>
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d102      	bne.n	8001944 <HAL_GPIO_EXTI_Callback+0x1c>
		HAL_TIM_Base_Start_IT(&htim6); //pokrece timer 75ms
 800193e:	4803      	ldr	r0, [pc, #12]	; (800194c <HAL_GPIO_EXTI_Callback+0x24>)
 8001940:	f004 fa4c 	bl	8005ddc <HAL_TIM_Base_Start_IT>
	}

}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000774 	.word	0x20000774

08001950 <HAL_TIM_PeriodElapsedCallback>:

//Interrupt funkcija za timer koja se pozove kada timer odbroji
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	if (htim == &htim16 ){ //provjera koji timer je okinuo -> za zujalicu, 3 beepa
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a46      	ldr	r2, [pc, #280]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d121      	bne.n	80019a4 <HAL_TIM_PeriodElapsedCallback+0x54>
		if(BzCnt < 6 && Buzz == 1){
 8001960:	4b45      	ldr	r3, [pc, #276]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b05      	cmp	r3, #5
 8001966:	d80d      	bhi.n	8001984 <HAL_TIM_PeriodElapsedCallback+0x34>
 8001968:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d109      	bne.n	8001984 <HAL_TIM_PeriodElapsedCallback+0x34>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001970:	2101      	movs	r1, #1
 8001972:	4843      	ldr	r0, [pc, #268]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001974:	f002 faa2 	bl	8003ebc <HAL_GPIO_TogglePin>
			BzCnt++;
 8001978:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	3301      	adds	r3, #1
 800197e:	b2da      	uxtb	r2, r3
 8001980:	4b3d      	ldr	r3, [pc, #244]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001982:	701a      	strb	r2, [r3, #0]
		}
		if (BzCnt > 5 || Buzz == 0){
 8001984:	4b3c      	ldr	r3, [pc, #240]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b05      	cmp	r3, #5
 800198a:	d803      	bhi.n	8001994 <HAL_TIM_PeriodElapsedCallback+0x44>
 800198c:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d107      	bne.n	80019a4 <HAL_TIM_PeriodElapsedCallback+0x54>
			Buzz = 0;
 8001994:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //u slucaju da zbog necega izade iz gornje petlje dok je zujalica aktivna
 800199a:	2200      	movs	r2, #0
 800199c:	2101      	movs	r1, #1
 800199e:	4838      	ldr	r0, [pc, #224]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80019a0:	f002 fa74 	bl	8003e8c <HAL_GPIO_WritePin>
		}
	}
	if (htim == &htim6 ){ //provjera koji timer je okinuo -> timer 6, 75ms za debouncing
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a37      	ldr	r2, [pc, #220]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d15f      	bne.n	8001a6c <HAL_TIM_PeriodElapsedCallback+0x11c>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1){ //stisnuta samo tipka 1
 80019ac:	2102      	movs	r1, #2
 80019ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b2:	f002 fa53 	bl	8003e5c <HAL_GPIO_ReadPin>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d114      	bne.n	80019e6 <HAL_TIM_PeriodElapsedCallback+0x96>
 80019bc:	2101      	movs	r1, #1
 80019be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c2:	f002 fa4b 	bl	8003e5c <HAL_GPIO_ReadPin>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d10c      	bne.n	80019e6 <HAL_TIM_PeriodElapsedCallback+0x96>
			setspeed = setspeed + 5; //povecaj limit za 5
 80019cc:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	3305      	adds	r3, #5
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	4b2c      	ldr	r3, [pc, #176]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80019d6:	701a      	strb	r2, [r3, #0]
			if(setspeed > 250){setspeed = 250;} //ako je brzina veca, limitiraj na 250
 80019d8:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2bfa      	cmp	r3, #250	; 0xfa
 80019de:	d902      	bls.n	80019e6 <HAL_TIM_PeriodElapsedCallback+0x96>
 80019e0:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80019e2:	22fa      	movs	r2, #250	; 0xfa
 80019e4:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1){ //stisnuta samo tipka 2
 80019e6:	2101      	movs	r1, #1
 80019e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ec:	f002 fa36 	bl	8003e5c <HAL_GPIO_ReadPin>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d115      	bne.n	8001a22 <HAL_TIM_PeriodElapsedCallback+0xd2>
 80019f6:	2102      	movs	r1, #2
 80019f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fc:	f002 fa2e 	bl	8003e5c <HAL_GPIO_ReadPin>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d10d      	bne.n	8001a22 <HAL_TIM_PeriodElapsedCallback+0xd2>
			if(setspeed < 5){
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d803      	bhi.n	8001a16 <HAL_TIM_PeriodElapsedCallback+0xc6>
				setspeed = 0; //ako je brzina manja od 5, vrati na 0
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	e005      	b.n	8001a22 <HAL_TIM_PeriodElapsedCallback+0xd2>
			}else{
				setspeed = setspeed - 5;
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	3b05      	subs	r3, #5
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a20:	701a      	strb	r2, [r3, #0]
			}
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0){ //stisnute obje tipke
 8001a22:	2102      	movs	r1, #2
 8001a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a28:	f002 fa18 	bl	8003e5c <HAL_GPIO_ReadPin>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d119      	bne.n	8001a66 <HAL_TIM_PeriodElapsedCallback+0x116>
 8001a32:	2101      	movs	r1, #1
 8001a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a38:	f002 fa10 	bl	8003e5c <HAL_GPIO_ReadPin>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d111      	bne.n	8001a66 <HAL_TIM_PeriodElapsedCallback+0x116>
			if(hud == 0){
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d103      	bne.n	8001a52 <HAL_TIM_PeriodElapsedCallback+0x102>
				hud = 1;
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
 8001a50:	e006      	b.n	8001a60 <HAL_TIM_PeriodElapsedCallback+0x110>
			}else if(hud == 1){
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d102      	bne.n	8001a60 <HAL_TIM_PeriodElapsedCallback+0x110>
				hud = 0;
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
			}
			turned = 1;
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
		}
		HAL_TIM_Base_Stop_IT(&htim6); //zaustavi timer
 8001a66:	4807      	ldr	r0, [pc, #28]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001a68:	f004 fa0c 	bl	8005e84 <HAL_TIM_Base_Stop_IT>
	}
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200007c0 	.word	0x200007c0
 8001a78:	2000032c 	.word	0x2000032c
 8001a7c:	2000032d 	.word	0x2000032d
 8001a80:	48000400 	.word	0x48000400
 8001a84:	20000774 	.word	0x20000774
 8001a88:	20000010 	.word	0x20000010
 8001a8c:	20000339 	.word	0x20000339
 8001a90:	2000033a 	.word	0x2000033a

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <Error_Handler+0x8>

08001a9e <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af04      	add	r7, sp, #16
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001aaa:	230a      	movs	r3, #10
 8001aac:	9302      	str	r3, [sp, #8]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	1cfb      	adds	r3, r7, #3
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2178      	movs	r1, #120	; 0x78
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f002 fbb3 	bl	8004228 <HAL_I2C_Mem_Write>
 8001ac2:	4603      	mov	r3, r0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001ad4:	2064      	movs	r0, #100	; 0x64
 8001ad6:	f000 fe2d 	bl	8002734 <HAL_Delay>
    int status = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001ade:	21ae      	movs	r1, #174	; 0xae
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ffdc 	bl	8001a9e <ssd1306_WriteCommand>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4413      	add	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001af0:	2120      	movs	r1, #32
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffd3 	bl	8001a9e <ssd1306_WriteCommand>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001b02:	2110      	movs	r1, #16
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ffca 	bl	8001a9e <ssd1306_WriteCommand>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4413      	add	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001b14:	21b0      	movs	r1, #176	; 0xb0
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ffc1 	bl	8001a9e <ssd1306_WriteCommand>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8001b26:	21c8      	movs	r1, #200	; 0xc8
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ffb8 	bl	8001a9e <ssd1306_WriteCommand>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4413      	add	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001b38:	2100      	movs	r1, #0
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffaf 	bl	8001a9e <ssd1306_WriteCommand>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001b4a:	2110      	movs	r1, #16
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ffa6 	bl	8001a9e <ssd1306_WriteCommand>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4413      	add	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001b5c:	2140      	movs	r1, #64	; 0x40
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ff9d 	bl	8001a9e <ssd1306_WriteCommand>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001b6e:	2181      	movs	r1, #129	; 0x81
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff94 	bl	8001a9e <ssd1306_WriteCommand>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001b80:	21ff      	movs	r1, #255	; 0xff
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ff8b 	bl	8001a9e <ssd1306_WriteCommand>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001b92:	21a1      	movs	r1, #161	; 0xa1
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ff82 	bl	8001a9e <ssd1306_WriteCommand>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001ba4:	21a6      	movs	r1, #166	; 0xa6
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ff79 	bl	8001a9e <ssd1306_WriteCommand>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001bb6:	21a8      	movs	r1, #168	; 0xa8
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff70 	bl	8001a9e <ssd1306_WriteCommand>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001bc8:	213f      	movs	r1, #63	; 0x3f
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ff67 	bl	8001a9e <ssd1306_WriteCommand>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001bda:	21a4      	movs	r1, #164	; 0xa4
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff5e 	bl	8001a9e <ssd1306_WriteCommand>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4413      	add	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001bec:	21d3      	movs	r1, #211	; 0xd3
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ff55 	bl	8001a9e <ssd1306_WriteCommand>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001bfe:	2100      	movs	r1, #0
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff4c 	bl	8001a9e <ssd1306_WriteCommand>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001c10:	21d5      	movs	r1, #213	; 0xd5
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ff43 	bl	8001a9e <ssd1306_WriteCommand>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001c22:	21f0      	movs	r1, #240	; 0xf0
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ff3a 	bl	8001a9e <ssd1306_WriteCommand>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4413      	add	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001c34:	21d9      	movs	r1, #217	; 0xd9
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ff31 	bl	8001a9e <ssd1306_WriteCommand>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001c46:	2122      	movs	r1, #34	; 0x22
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ff28 	bl	8001a9e <ssd1306_WriteCommand>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	461a      	mov	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4413      	add	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001c58:	21da      	movs	r1, #218	; 0xda
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ff1f 	bl	8001a9e <ssd1306_WriteCommand>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8001c6a:	2112      	movs	r1, #18
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff16 	bl	8001a9e <ssd1306_WriteCommand>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4413      	add	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001c7c:	21db      	movs	r1, #219	; 0xdb
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ff0d 	bl	8001a9e <ssd1306_WriteCommand>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001c8e:	2120      	movs	r1, #32
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ff04 	bl	8001a9e <ssd1306_WriteCommand>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001ca0:	218d      	movs	r1, #141	; 0x8d
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff fefb 	bl	8001a9e <ssd1306_WriteCommand>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001cb2:	2114      	movs	r1, #20
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff fef2 	bl	8001a9e <ssd1306_WriteCommand>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001cc4:	21af      	movs	r1, #175	; 0xaf
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff fee9 	bl	8001a9e <ssd1306_WriteCommand>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <ssd1306_Init+0x214>
        return 1;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e00f      	b.n	8001d00 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f000 f813 	bl	8001d0c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f834 	bl	8001d54 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <ssd1306_Init+0x23c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <ssd1306_Init+0x23c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <ssd1306_Init+0x23c>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	715a      	strb	r2, [r3, #5]

    return 0;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000768 	.word	0x20000768

08001d0c <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	e00d      	b.n	8001d38 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <ssd1306_Fill+0x1a>
 8001d22:	2100      	movs	r1, #0
 8001d24:	e000      	b.n	8001d28 <ssd1306_Fill+0x1c>
 8001d26:	21ff      	movs	r1, #255	; 0xff
 8001d28:	4a09      	ldr	r2, [pc, #36]	; (8001d50 <ssd1306_Fill+0x44>)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	460a      	mov	r2, r1
 8001d30:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3301      	adds	r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d3e:	d3ed      	bcc.n	8001d1c <ssd1306_Fill+0x10>
    }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000368 	.word	0x20000368

08001d54 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af04      	add	r7, sp, #16
 8001d5a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	e020      	b.n	8001da4 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	3b50      	subs	r3, #80	; 0x50
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	4619      	mov	r1, r3
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff fe97 	bl	8001a9e <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001d70:	2100      	movs	r1, #0
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff fe93 	bl	8001a9e <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001d78:	2110      	movs	r1, #16
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff fe8f 	bl	8001a9e <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	01db      	lsls	r3, r3, #7
 8001d84:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <ssd1306_UpdateScreen+0x60>)
 8001d86:	4413      	add	r3, r2
 8001d88:	2264      	movs	r2, #100	; 0x64
 8001d8a:	9202      	str	r2, [sp, #8]
 8001d8c:	2280      	movs	r2, #128	; 0x80
 8001d8e:	9201      	str	r2, [sp, #4]
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2301      	movs	r3, #1
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	2178      	movs	r1, #120	; 0x78
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f002 fa45 	bl	8004228 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	3301      	adds	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	2b07      	cmp	r3, #7
 8001da8:	d9db      	bls.n	8001d62 <ssd1306_UpdateScreen+0xe>
    }
}
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000368 	.word	0x20000368

08001db8 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	71bb      	strb	r3, [r7, #6]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	db48      	blt.n	8001e64 <ssd1306_DrawPixel+0xac>
 8001dd2:	79bb      	ldrb	r3, [r7, #6]
 8001dd4:	2b3f      	cmp	r3, #63	; 0x3f
 8001dd6:	d845      	bhi.n	8001e64 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001dd8:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <ssd1306_DrawPixel+0xb8>)
 8001dda:	791b      	ldrb	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001de0:	797b      	ldrb	r3, [r7, #5]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bf0c      	ite	eq
 8001de6:	2301      	moveq	r3, #1
 8001de8:	2300      	movne	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001dee:	797b      	ldrb	r3, [r7, #5]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d11a      	bne.n	8001e2a <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001df4:	79fa      	ldrb	r2, [r7, #7]
 8001df6:	79bb      	ldrb	r3, [r7, #6]
 8001df8:	08db      	lsrs	r3, r3, #3
 8001dfa:	b2d8      	uxtb	r0, r3
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	01db      	lsls	r3, r3, #7
 8001e00:	4413      	add	r3, r2
 8001e02:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <ssd1306_DrawPixel+0xbc>)
 8001e04:	5cd3      	ldrb	r3, [r2, r3]
 8001e06:	b25a      	sxtb	r2, r3
 8001e08:	79bb      	ldrb	r3, [r7, #6]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	2101      	movs	r1, #1
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	b25b      	sxtb	r3, r3
 8001e16:	4313      	orrs	r3, r2
 8001e18:	b259      	sxtb	r1, r3
 8001e1a:	79fa      	ldrb	r2, [r7, #7]
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	01db      	lsls	r3, r3, #7
 8001e20:	4413      	add	r3, r2
 8001e22:	b2c9      	uxtb	r1, r1
 8001e24:	4a13      	ldr	r2, [pc, #76]	; (8001e74 <ssd1306_DrawPixel+0xbc>)
 8001e26:	54d1      	strb	r1, [r2, r3]
 8001e28:	e01d      	b.n	8001e66 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e2a:	79fa      	ldrb	r2, [r7, #7]
 8001e2c:	79bb      	ldrb	r3, [r7, #6]
 8001e2e:	08db      	lsrs	r3, r3, #3
 8001e30:	b2d8      	uxtb	r0, r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	01db      	lsls	r3, r3, #7
 8001e36:	4413      	add	r3, r2
 8001e38:	4a0e      	ldr	r2, [pc, #56]	; (8001e74 <ssd1306_DrawPixel+0xbc>)
 8001e3a:	5cd3      	ldrb	r3, [r2, r3]
 8001e3c:	b25a      	sxtb	r2, r3
 8001e3e:	79bb      	ldrb	r3, [r7, #6]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	2101      	movs	r1, #1
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	b25b      	sxtb	r3, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	b25b      	sxtb	r3, r3
 8001e50:	4013      	ands	r3, r2
 8001e52:	b259      	sxtb	r1, r3
 8001e54:	79fa      	ldrb	r2, [r7, #7]
 8001e56:	4603      	mov	r3, r0
 8001e58:	01db      	lsls	r3, r3, #7
 8001e5a:	4413      	add	r3, r2
 8001e5c:	b2c9      	uxtb	r1, r1
 8001e5e:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <ssd1306_DrawPixel+0xbc>)
 8001e60:	54d1      	strb	r1, [r2, r3]
 8001e62:	e000      	b.n	8001e66 <ssd1306_DrawPixel+0xae>
        return;
 8001e64:	bf00      	nop
    }
}
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	20000768 	.word	0x20000768
 8001e74:	20000368 	.word	0x20000368

08001e78 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4604      	mov	r4, r0
 8001e80:	1d38      	adds	r0, r7, #4
 8001e82:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e86:	461a      	mov	r2, r3
 8001e88:	4623      	mov	r3, r4
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001e90:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <ssd1306_WriteChar+0xfc>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	793b      	ldrb	r3, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001e9c:	dc06      	bgt.n	8001eac <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001e9e:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <ssd1306_WriteChar+0xfc>)
 8001ea0:	885b      	ldrh	r3, [r3, #2]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	797b      	ldrb	r3, [r7, #5]
 8001ea6:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001ea8:	2b3f      	cmp	r3, #63	; 0x3f
 8001eaa:	dd01      	ble.n	8001eb0 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	e05d      	b.n	8001f6c <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	e04c      	b.n	8001f50 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	3b20      	subs	r3, #32
 8001ebc:	7979      	ldrb	r1, [r7, #5]
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	440b      	add	r3, r1
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	e034      	b.n	8001f40 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d012      	beq.n	8001f0c <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001ee6:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <ssd1306_WriteChar+0xfc>)
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	b2d8      	uxtb	r0, r3
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <ssd1306_WriteChar+0xfc>)
 8001ef6:	885b      	ldrh	r3, [r3, #2]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	4413      	add	r3, r2
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	7bba      	ldrb	r2, [r7, #14]
 8001f04:	4619      	mov	r1, r3
 8001f06:	f7ff ff57 	bl	8001db8 <ssd1306_DrawPixel>
 8001f0a:	e016      	b.n	8001f3a <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <ssd1306_WriteChar+0xfc>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	b2d8      	uxtb	r0, r3
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <ssd1306_WriteChar+0xfc>)
 8001f1c:	885b      	ldrh	r3, [r3, #2]
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	4413      	add	r3, r2
 8001f26:	b2d9      	uxtb	r1, r3
 8001f28:	7bbb      	ldrb	r3, [r7, #14]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf0c      	ite	eq
 8001f2e:	2301      	moveq	r3, #1
 8001f30:	2300      	movne	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	f7ff ff3f 	bl	8001db8 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	793b      	ldrb	r3, [r7, #4]
 8001f42:	461a      	mov	r2, r3
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d3c5      	bcc.n	8001ed6 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	797b      	ldrb	r3, [r7, #5]
 8001f52:	461a      	mov	r2, r3
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d3ad      	bcc.n	8001eb6 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <ssd1306_WriteChar+0xfc>)
 8001f5c:	881a      	ldrh	r2, [r3, #0]
 8001f5e:	793b      	ldrb	r3, [r7, #4]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	4413      	add	r3, r2
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <ssd1306_WriteChar+0xfc>)
 8001f68:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3724      	adds	r7, #36	; 0x24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd90      	pop	{r4, r7, pc}
 8001f74:	20000768 	.word	0x20000768

08001f78 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	1d38      	adds	r0, r7, #4
 8001f82:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f86:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001f88:	e012      	b.n	8001fb0 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	7818      	ldrb	r0, [r3, #0]
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	1d3a      	adds	r2, r7, #4
 8001f92:	ca06      	ldmia	r2, {r1, r2}
 8001f94:	f7ff ff70 	bl	8001e78 <ssd1306_WriteChar>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d002      	beq.n	8001faa <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	e008      	b.n	8001fbc <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	3301      	adds	r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1e8      	bne.n	8001f8a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	781b      	ldrb	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	460a      	mov	r2, r1
 8001fce:	71fb      	strb	r3, [r7, #7]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <ssd1306_SetCursor+0x2c>)
 8001fda:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001fdc:	79bb      	ldrb	r3, [r7, #6]
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <ssd1306_SetCursor+0x2c>)
 8001fe2:	805a      	strh	r2, [r3, #2]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	20000768 	.word	0x20000768

08001ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_MspInit+0x44>)
 8001ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffe:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <HAL_MspInit+0x44>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6613      	str	r3, [r2, #96]	; 0x60
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <HAL_MspInit+0x44>)
 8002008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_MspInit+0x44>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	4a08      	ldr	r2, [pc, #32]	; (8002038 <HAL_MspInit+0x44>)
 8002018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201c:	6593      	str	r3, [r2, #88]	; 0x58
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_MspInit+0x44>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002040:	e7fe      	b.n	8002040 <NMI_Handler+0x4>

08002042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <HardFault_Handler+0x4>

08002048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <MemManage_Handler+0x4>

0800204e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <BusFault_Handler+0x4>

08002054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <UsageFault_Handler+0x4>

0800205a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002088:	f000 fb34 	bl	80026f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}

08002090 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002094:	2001      	movs	r0, #1
 8002096:	f001 ff2b 	bl	8003ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}

0800209e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80020a2:	2002      	movs	r0, #2
 80020a4:	f001 ff24 	bl	8003ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}

080020ac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80020b2:	f003 ff16 	bl	8005ee2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200007c0 	.word	0x200007c0

080020c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <USART1_IRQHandler+0x10>)
 80020c6:	f004 fa73 	bl	80065b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	2000080c 	.word	0x2000080c

080020d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <TIM6_DAC_IRQHandler+0x10>)
 80020da:	f003 ff02 	bl	8005ee2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000774 	.word	0x20000774

080020e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
	return 1;
 80020ec:	2301      	movs	r3, #1
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <_kill>:

int _kill(int pid, int sig)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002102:	f005 fc0b 	bl	800791c <__errno>
 8002106:	4603      	mov	r3, r0
 8002108:	2216      	movs	r2, #22
 800210a:	601a      	str	r2, [r3, #0]
	return -1;
 800210c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <_exit>:

void _exit (int status)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ffe7 	bl	80020f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800212a:	e7fe      	b.n	800212a <_exit+0x12>

0800212c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	e00a      	b.n	8002154 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800213e:	f3af 8000 	nop.w
 8002142:	4601      	mov	r1, r0
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	60ba      	str	r2, [r7, #8]
 800214a:	b2ca      	uxtb	r2, r1
 800214c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3301      	adds	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	dbf0      	blt.n	800213e <_read+0x12>
	}

return len;
 800215c:	687b      	ldr	r3, [r7, #4]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	e009      	b.n	800218c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	60ba      	str	r2, [r7, #8]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff f913 	bl	80013ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	dbf1      	blt.n	8002178 <_write+0x12>
	}
	return len;
 8002194:	687b      	ldr	r3, [r7, #4]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <_close>:

int _close(int file)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
	return -1;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021c6:	605a      	str	r2, [r3, #4]
	return 0;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <_isatty>:

int _isatty(int file)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
	return 1;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
	return 0;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002210:	4a14      	ldr	r2, [pc, #80]	; (8002264 <_sbrk+0x5c>)
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <_sbrk+0x60>)
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <_sbrk+0x64>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <_sbrk+0x64>)
 8002226:	4a12      	ldr	r2, [pc, #72]	; (8002270 <_sbrk+0x68>)
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <_sbrk+0x64>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	429a      	cmp	r2, r3
 8002236:	d207      	bcs.n	8002248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002238:	f005 fb70 	bl	800791c <__errno>
 800223c:	4603      	mov	r3, r0
 800223e:	220c      	movs	r2, #12
 8002240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	e009      	b.n	800225c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <_sbrk+0x64>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <_sbrk+0x64>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <_sbrk+0x64>)
 8002258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800225a:	68fb      	ldr	r3, [r7, #12]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20010000 	.word	0x20010000
 8002268:	00000400 	.word	0x00000400
 800226c:	20000770 	.word	0x20000770
 8002270:	20000928 	.word	0x20000928

08002274 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <SystemInit+0x20>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <SystemInit+0x20>)
 8002280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <MX_TIM6_Init+0x64>)
 80022aa:	4a15      	ldr	r2, [pc, #84]	; (8002300 <MX_TIM6_Init+0x68>)
 80022ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31999;
 80022ae:	4b13      	ldr	r3, [pc, #76]	; (80022fc <MX_TIM6_Init+0x64>)
 80022b0:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80022b4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <MX_TIM6_Init+0x64>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 54;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <MX_TIM6_Init+0x64>)
 80022be:	2236      	movs	r2, #54	; 0x36
 80022c0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <MX_TIM6_Init+0x64>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022c8:	480c      	ldr	r0, [pc, #48]	; (80022fc <MX_TIM6_Init+0x64>)
 80022ca:	f003 fd2f 	bl	8005d2c <HAL_TIM_Base_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80022d4:	f7ff fbde 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d8:	2300      	movs	r3, #0
 80022da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	4619      	mov	r1, r3
 80022e4:	4805      	ldr	r0, [pc, #20]	; (80022fc <MX_TIM6_Init+0x64>)
 80022e6:	f003 ffa7 	bl	8006238 <HAL_TIMEx_MasterConfigSynchronization>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80022f0:	f7ff fbd0 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000774 	.word	0x20000774
 8002300:	40001000 	.word	0x40001000

08002304 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <MX_TIM16_Init+0x44>)
 800230a:	4a10      	ldr	r2, [pc, #64]	; (800234c <MX_TIM16_Init+0x48>)
 800230c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31999;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <MX_TIM16_Init+0x44>)
 8002310:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8002314:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <MX_TIM16_Init+0x44>)
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 199;
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <MX_TIM16_Init+0x44>)
 800231e:	22c7      	movs	r2, #199	; 0xc7
 8002320:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <MX_TIM16_Init+0x44>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <MX_TIM16_Init+0x44>)
 800232a:	2200      	movs	r2, #0
 800232c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <MX_TIM16_Init+0x44>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002334:	4804      	ldr	r0, [pc, #16]	; (8002348 <MX_TIM16_Init+0x44>)
 8002336:	f003 fcf9 	bl	8005d2c <HAL_TIM_Base_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002340:	f7ff fba8 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	200007c0 	.word	0x200007c0
 800234c:	40014400 	.word	0x40014400

08002350 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1a      	ldr	r2, [pc, #104]	; (80023c8 <HAL_TIM_Base_MspInit+0x78>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d114      	bne.n	800238c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002362:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <HAL_TIM_Base_MspInit+0x7c>)
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	4a19      	ldr	r2, [pc, #100]	; (80023cc <HAL_TIM_Base_MspInit+0x7c>)
 8002368:	f043 0310 	orr.w	r3, r3, #16
 800236c:	6593      	str	r3, [r2, #88]	; 0x58
 800236e:	4b17      	ldr	r3, [pc, #92]	; (80023cc <HAL_TIM_Base_MspInit+0x7c>)
 8002370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	2036      	movs	r0, #54	; 0x36
 8002380:	f001 fb4d 	bl	8003a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002384:	2036      	movs	r0, #54	; 0x36
 8002386:	f001 fb66 	bl	8003a56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800238a:	e018      	b.n	80023be <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0f      	ldr	r2, [pc, #60]	; (80023d0 <HAL_TIM_Base_MspInit+0x80>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d113      	bne.n	80023be <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <HAL_TIM_Base_MspInit+0x7c>)
 8002398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239a:	4a0c      	ldr	r2, [pc, #48]	; (80023cc <HAL_TIM_Base_MspInit+0x7c>)
 800239c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a0:	6613      	str	r3, [r2, #96]	; 0x60
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_TIM_Base_MspInit+0x7c>)
 80023a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	2019      	movs	r0, #25
 80023b4:	f001 fb33 	bl	8003a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80023b8:	2019      	movs	r0, #25
 80023ba:	f001 fb4c 	bl	8003a56 <HAL_NVIC_EnableIRQ>
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40001000 	.word	0x40001000
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40014400 	.word	0x40014400

080023d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023d8:	4b14      	ldr	r3, [pc, #80]	; (800242c <MX_USART1_UART_Init+0x58>)
 80023da:	4a15      	ldr	r2, [pc, #84]	; (8002430 <MX_USART1_UART_Init+0x5c>)
 80023dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80023de:	4b13      	ldr	r3, [pc, #76]	; (800242c <MX_USART1_UART_Init+0x58>)
 80023e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <MX_USART1_UART_Init+0x58>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <MX_USART1_UART_Init+0x58>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <MX_USART1_UART_Init+0x58>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <MX_USART1_UART_Init+0x58>)
 80023fa:	220c      	movs	r2, #12
 80023fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <MX_USART1_UART_Init+0x58>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_USART1_UART_Init+0x58>)
 8002406:	2200      	movs	r2, #0
 8002408:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <MX_USART1_UART_Init+0x58>)
 800240c:	2200      	movs	r2, #0
 800240e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <MX_USART1_UART_Init+0x58>)
 8002412:	2200      	movs	r2, #0
 8002414:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <MX_USART1_UART_Init+0x58>)
 8002418:	f003 ff92 	bl	8006340 <HAL_UART_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002422:	f7ff fb37 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	2000080c 	.word	0x2000080c
 8002430:	40013800 	.word	0x40013800

08002434 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <MX_USART2_UART_Init+0x58>)
 800243a:	4a15      	ldr	r2, [pc, #84]	; (8002490 <MX_USART2_UART_Init+0x5c>)
 800243c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002440:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002444:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <MX_USART2_UART_Init+0x58>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <MX_USART2_UART_Init+0x58>)
 800245a:	220c      	movs	r2, #12
 800245c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <MX_USART2_UART_Init+0x58>)
 800246c:	2200      	movs	r2, #0
 800246e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002472:	2200      	movs	r2, #0
 8002474:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002476:	4805      	ldr	r0, [pc, #20]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002478:	f003 ff62 	bl	8006340 <HAL_UART_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002482:	f7ff fb07 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000890 	.word	0x20000890
 8002490:	40004400 	.word	0x40004400

08002494 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b0a0      	sub	sp, #128	; 0x80
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024ac:	f107 0318 	add.w	r3, r7, #24
 80024b0:	2254      	movs	r2, #84	; 0x54
 80024b2:	2100      	movs	r1, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f005 fa75 	bl	80079a4 <memset>
  if(uartHandle->Instance==USART1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a4b      	ldr	r2, [pc, #300]	; (80025ec <HAL_UART_MspInit+0x158>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d140      	bne.n	8002546 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024c4:	2301      	movs	r3, #1
 80024c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80024c8:	2302      	movs	r3, #2
 80024ca:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024cc:	f107 0318 	add.w	r3, r7, #24
 80024d0:	4618      	mov	r0, r3
 80024d2:	f003 f943 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024dc:	f7ff fada 	bl	8001a94 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024e0:	4b43      	ldr	r3, [pc, #268]	; (80025f0 <HAL_UART_MspInit+0x15c>)
 80024e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e4:	4a42      	ldr	r2, [pc, #264]	; (80025f0 <HAL_UART_MspInit+0x15c>)
 80024e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ea:	6613      	str	r3, [r2, #96]	; 0x60
 80024ec:	4b40      	ldr	r3, [pc, #256]	; (80025f0 <HAL_UART_MspInit+0x15c>)
 80024ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f8:	4b3d      	ldr	r3, [pc, #244]	; (80025f0 <HAL_UART_MspInit+0x15c>)
 80024fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fc:	4a3c      	ldr	r2, [pc, #240]	; (80025f0 <HAL_UART_MspInit+0x15c>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002504:	4b3a      	ldr	r3, [pc, #232]	; (80025f0 <HAL_UART_MspInit+0x15c>)
 8002506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002510:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002514:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251e:	2303      	movs	r3, #3
 8002520:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002522:	2307      	movs	r3, #7
 8002524:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002526:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800252a:	4619      	mov	r1, r3
 800252c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002530:	f001 fb2a 	bl	8003b88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002534:	2200      	movs	r2, #0
 8002536:	2100      	movs	r1, #0
 8002538:	2025      	movs	r0, #37	; 0x25
 800253a:	f001 fa70 	bl	8003a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800253e:	2025      	movs	r0, #37	; 0x25
 8002540:	f001 fa89 	bl	8003a56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002544:	e04d      	b.n	80025e2 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a2a      	ldr	r2, [pc, #168]	; (80025f4 <HAL_UART_MspInit+0x160>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d148      	bne.n	80025e2 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002550:	2302      	movs	r3, #2
 8002552:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002554:	2300      	movs	r3, #0
 8002556:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002558:	f107 0318 	add.w	r3, r7, #24
 800255c:	4618      	mov	r0, r3
 800255e:	f003 f8fd 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002568:	f7ff fa94 	bl	8001a94 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800256c:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <HAL_UART_MspInit+0x15c>)
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	4a1f      	ldr	r2, [pc, #124]	; (80025f0 <HAL_UART_MspInit+0x15c>)
 8002572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002576:	6593      	str	r3, [r2, #88]	; 0x58
 8002578:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <HAL_UART_MspInit+0x15c>)
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002584:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <HAL_UART_MspInit+0x15c>)
 8002586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002588:	4a19      	ldr	r2, [pc, #100]	; (80025f0 <HAL_UART_MspInit+0x15c>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002590:	4b17      	ldr	r3, [pc, #92]	; (80025f0 <HAL_UART_MspInit+0x15c>)
 8002592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800259c:	2304      	movs	r3, #4
 800259e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a8:	2303      	movs	r3, #3
 80025aa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025ac:	2307      	movs	r3, #7
 80025ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025b4:	4619      	mov	r1, r3
 80025b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ba:	f001 fae5 	bl	8003b88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c4:	2302      	movs	r3, #2
 80025c6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025cc:	2303      	movs	r3, #3
 80025ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80025d0:	2303      	movs	r3, #3
 80025d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025d8:	4619      	mov	r1, r3
 80025da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025de:	f001 fad3 	bl	8003b88 <HAL_GPIO_Init>
}
 80025e2:	bf00      	nop
 80025e4:	3780      	adds	r7, #128	; 0x80
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40013800 	.word	0x40013800
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40004400 	.word	0x40004400

080025f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002630 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025fc:	f7ff fe3a 	bl	8002274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002600:	480c      	ldr	r0, [pc, #48]	; (8002634 <LoopForever+0x6>)
  ldr r1, =_edata
 8002602:	490d      	ldr	r1, [pc, #52]	; (8002638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002604:	4a0d      	ldr	r2, [pc, #52]	; (800263c <LoopForever+0xe>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002608:	e002      	b.n	8002610 <LoopCopyDataInit>

0800260a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800260c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260e:	3304      	adds	r3, #4

08002610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002614:	d3f9      	bcc.n	800260a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002616:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002618:	4c0a      	ldr	r4, [pc, #40]	; (8002644 <LoopForever+0x16>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800261c:	e001      	b.n	8002622 <LoopFillZerobss>

0800261e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002620:	3204      	adds	r2, #4

08002622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002624:	d3fb      	bcc.n	800261e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002626:	f005 f97f 	bl	8007928 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800262a:	f7fe feed 	bl	8001408 <main>

0800262e <LoopForever>:

LoopForever:
    b LoopForever
 800262e:	e7fe      	b.n	800262e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002630:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002638:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 800263c:	0800f28c 	.word	0x0800f28c
  ldr r2, =_sbss
 8002640:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002644:	20000928 	.word	0x20000928

08002648 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002648:	e7fe      	b.n	8002648 <ADC1_IRQHandler>

0800264a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002654:	2003      	movs	r0, #3
 8002656:	f001 f9d7 	bl	8003a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800265a:	200f      	movs	r0, #15
 800265c:	f000 f80e 	bl	800267c <HAL_InitTick>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	71fb      	strb	r3, [r7, #7]
 800266a:	e001      	b.n	8002670 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800266c:	f7ff fcc2 	bl	8001ff4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002670:	79fb      	ldrb	r3, [r7, #7]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002688:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <HAL_InitTick+0x6c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d023      	beq.n	80026d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002690:	4b16      	ldr	r3, [pc, #88]	; (80026ec <HAL_InitTick+0x70>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <HAL_InitTick+0x6c>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	4619      	mov	r1, r3
 800269a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269e:	fbb3 f3f1 	udiv	r3, r3, r1
 80026a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a6:	4618      	mov	r0, r3
 80026a8:	f001 f9e3 	bl	8003a72 <HAL_SYSTICK_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10f      	bne.n	80026d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b0f      	cmp	r3, #15
 80026b6:	d809      	bhi.n	80026cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b8:	2200      	movs	r2, #0
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295
 80026c0:	f001 f9ad 	bl	8003a1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026c4:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <HAL_InitTick+0x74>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e007      	b.n	80026dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	e004      	b.n	80026dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
 80026d6:	e001      	b.n	80026dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000024 	.word	0x20000024
 80026ec:	2000001c 	.word	0x2000001c
 80026f0:	20000020 	.word	0x20000020

080026f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_IncTick+0x20>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_IncTick+0x24>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4413      	add	r3, r2
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <HAL_IncTick+0x24>)
 8002706:	6013      	str	r3, [r2, #0]
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000024 	.word	0x20000024
 8002718:	20000914 	.word	0x20000914

0800271c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return uwTick;
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <HAL_GetTick+0x14>)
 8002722:	681b      	ldr	r3, [r3, #0]
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000914 	.word	0x20000914

08002734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800273c:	f7ff ffee 	bl	800271c <HAL_GetTick>
 8002740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d005      	beq.n	800275a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <HAL_Delay+0x44>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4413      	add	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800275a:	bf00      	nop
 800275c:	f7ff ffde 	bl	800271c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	429a      	cmp	r2, r3
 800276a:	d8f7      	bhi.n	800275c <HAL_Delay+0x28>
  {
  }
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000024 	.word	0x20000024

0800277c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	609a      	str	r2, [r3, #8]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	609a      	str	r2, [r3, #8]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	3360      	adds	r3, #96	; 0x60
 80027f6:	461a      	mov	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <LL_ADC_SetOffset+0x44>)
 8002806:	4013      	ands	r3, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	4313      	orrs	r3, r2
 8002814:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800281c:	bf00      	nop
 800281e:	371c      	adds	r7, #28
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	03fff000 	.word	0x03fff000

0800282c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3360      	adds	r3, #96	; 0x60
 800283a:	461a      	mov	r2, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3360      	adds	r3, #96	; 0x60
 8002868:	461a      	mov	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	431a      	orrs	r2, r3
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3330      	adds	r3, #48	; 0x30
 80028c4:	461a      	mov	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	4413      	add	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f003 031f 	and.w	r3, r3, #31
 80028de:	211f      	movs	r1, #31
 80028e0:	fa01 f303 	lsl.w	r3, r1, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	401a      	ands	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	0e9b      	lsrs	r3, r3, #26
 80028ec:	f003 011f 	and.w	r1, r3, #31
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	fa01 f303 	lsl.w	r3, r1, r3
 80028fa:	431a      	orrs	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002900:	bf00      	nop
 8002902:	371c      	adds	r7, #28
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	3314      	adds	r3, #20
 800291c:	461a      	mov	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	0e5b      	lsrs	r3, r3, #25
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	4413      	add	r3, r2
 800292a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	0d1b      	lsrs	r3, r3, #20
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	2107      	movs	r1, #7
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	401a      	ands	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	0d1b      	lsrs	r3, r3, #20
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	fa01 f303 	lsl.w	r3, r1, r3
 8002950:	431a      	orrs	r2, r3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002956:	bf00      	nop
 8002958:	371c      	adds	r7, #28
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297c:	43db      	mvns	r3, r3
 800297e:	401a      	ands	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f003 0318 	and.w	r3, r3, #24
 8002986:	4908      	ldr	r1, [pc, #32]	; (80029a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002988:	40d9      	lsrs	r1, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	400b      	ands	r3, r1
 800298e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002992:	431a      	orrs	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	0007ffff 	.word	0x0007ffff

080029ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80029bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6093      	str	r3, [r2, #8]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029e4:	d101      	bne.n	80029ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a34:	d101      	bne.n	8002a3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a5c:	f043 0201 	orr.w	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <LL_ADC_IsEnabled+0x18>
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <LL_ADC_IsEnabled+0x1a>
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002aa6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002aaa:	f043 0204 	orr.w	r2, r3, #4
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d101      	bne.n	8002ad6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d101      	bne.n	8002afc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e12c      	b.n	8002d80 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d109      	bne.n	8002b48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7fe fac3 	bl	80010c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff3f 	bl	80029d0 <LL_ADC_IsDeepPowerDownEnabled>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d004      	beq.n	8002b62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff25 	bl	80029ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ff5a 	bl	8002a20 <LL_ADC_IsInternalRegulatorEnabled>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d115      	bne.n	8002b9e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff ff3e 	bl	80029f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b7c:	4b82      	ldr	r3, [pc, #520]	; (8002d88 <HAL_ADC_Init+0x27c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	4a82      	ldr	r2, [pc, #520]	; (8002d8c <HAL_ADC_Init+0x280>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b90:	e002      	b.n	8002b98 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f9      	bne.n	8002b92 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ff3c 	bl	8002a20 <LL_ADC_IsInternalRegulatorEnabled>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10d      	bne.n	8002bca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb2:	f043 0210 	orr.w	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff ff75 	bl	8002abe <LL_ADC_REG_IsConversionOngoing>
 8002bd4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 80c5 	bne.w	8002d6e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f040 80c1 	bne.w	8002d6e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bf4:	f043 0202 	orr.w	r2, r3, #2
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff35 	bl	8002a70 <LL_ADC_IsEnabled>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10b      	bne.n	8002c24 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c0c:	4860      	ldr	r0, [pc, #384]	; (8002d90 <HAL_ADC_Init+0x284>)
 8002c0e:	f7ff ff2f 	bl	8002a70 <LL_ADC_IsEnabled>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	485d      	ldr	r0, [pc, #372]	; (8002d94 <HAL_ADC_Init+0x288>)
 8002c20:	f7ff fdac 	bl	800277c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	7e5b      	ldrb	r3, [r3, #25]
 8002c28:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c2e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002c34:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002c3a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c42:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d106      	bne.n	8002c60 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	3b01      	subs	r3, #1
 8002c58:	045b      	lsls	r3, r3, #17
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d009      	beq.n	8002c7c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	4b45      	ldr	r3, [pc, #276]	; (8002d98 <HAL_ADC_Init+0x28c>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	69b9      	ldr	r1, [r7, #24]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff12 	bl	8002abe <LL_ADC_REG_IsConversionOngoing>
 8002c9a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff1f 	bl	8002ae4 <LL_ADC_INJ_IsConversionOngoing>
 8002ca6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d13d      	bne.n	8002d2a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d13a      	bne.n	8002d2a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cb8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cc0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cd0:	f023 0302 	bic.w	r3, r3, #2
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	69b9      	ldr	r1, [r7, #24]
 8002cda:	430b      	orrs	r3, r1
 8002cdc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d118      	bne.n	8002d1a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002cf2:	f023 0304 	bic.w	r3, r3, #4
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cfe:	4311      	orrs	r1, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d04:	4311      	orrs	r1, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	611a      	str	r2, [r3, #16]
 8002d18:	e007      	b.n	8002d2a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0201 	bic.w	r2, r2, #1
 8002d28:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d10c      	bne.n	8002d4c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	f023 010f 	bic.w	r1, r3, #15
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	1e5a      	subs	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
 8002d4a:	e007      	b.n	8002d5c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 020f 	bic.w	r2, r2, #15
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	f023 0303 	bic.w	r3, r3, #3
 8002d64:	f043 0201 	orr.w	r2, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	655a      	str	r2, [r3, #84]	; 0x54
 8002d6c:	e007      	b.n	8002d7e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	f043 0210 	orr.w	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	2000001c 	.word	0x2000001c
 8002d8c:	053e2d63 	.word	0x053e2d63
 8002d90:	50040000 	.word	0x50040000
 8002d94:	50040300 	.word	0x50040300
 8002d98:	fff0c007 	.word	0xfff0c007

08002d9c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fe88 	bl	8002abe <LL_ADC_REG_IsConversionOngoing>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d14f      	bne.n	8002e54 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADC_Start+0x26>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e04b      	b.n	8002e5a <HAL_ADC_Start+0xbe>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fcc6 	bl	800375c <ADC_Enable>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d137      	bne.n	8002e4a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfa:	d106      	bne.n	8002e0a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	f023 0206 	bic.w	r2, r3, #6
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	659a      	str	r2, [r3, #88]	; 0x58
 8002e08:	e002      	b.n	8002e10 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	221c      	movs	r2, #28
 8002e16:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fe27 	bl	8002a96 <LL_ADC_REG_StartConversion>
 8002e48:	e006      	b.n	8002e58 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002e52:	e001      	b.n	8002e58 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e54:	2302      	movs	r3, #2
 8002e56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d102      	bne.n	8002e7a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002e74:	2308      	movs	r3, #8
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	e010      	b.n	8002e9c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d007      	beq.n	8002e98 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8c:	f043 0220 	orr.w	r2, r3, #32
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e06f      	b.n	8002f78 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002e98:	2304      	movs	r3, #4
 8002e9a:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e9c:	f7ff fc3e 	bl	800271c <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ea2:	e021      	b.n	8002ee8 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eaa:	d01d      	beq.n	8002ee8 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002eac:	f7ff fc36 	bl	800271c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d302      	bcc.n	8002ec2 <HAL_ADC_PollForConversion+0x60>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d112      	bne.n	8002ee8 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10b      	bne.n	8002ee8 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed4:	f043 0204 	orr.w	r2, r3, #4
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e047      	b.n	8002f78 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0d6      	beq.n	8002ea4 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fcc1 	bl	800288e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01c      	beq.n	8002f4c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	7e5b      	ldrb	r3, [r3, #25]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d118      	bne.n	8002f4c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d111      	bne.n	8002f4c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d105      	bne.n	8002f4c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f44:	f043 0201 	orr.w	r2, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d104      	bne.n	8002f64 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2208      	movs	r2, #8
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	e008      	b.n	8002f76 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d103      	bne.n	8002f76 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	220c      	movs	r2, #12
 8002f74:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
	...

08002f9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b0b6      	sub	sp, #216	; 0xd8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x22>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e3b9      	b.n	8003732 <HAL_ADC_ConfigChannel+0x796>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fd77 	bl	8002abe <LL_ADC_REG_IsConversionOngoing>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f040 839e 	bne.w	8003714 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b05      	cmp	r3, #5
 8002fde:	d824      	bhi.n	800302a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	3b02      	subs	r3, #2
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d81b      	bhi.n	8003022 <HAL_ADC_ConfigChannel+0x86>
 8002fea:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <HAL_ADC_ConfigChannel+0x54>)
 8002fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff0:	08003001 	.word	0x08003001
 8002ff4:	08003009 	.word	0x08003009
 8002ff8:	08003011 	.word	0x08003011
 8002ffc:	08003019 	.word	0x08003019
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	220c      	movs	r2, #12
 8003004:	605a      	str	r2, [r3, #4]
          break;
 8003006:	e011      	b.n	800302c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2212      	movs	r2, #18
 800300c:	605a      	str	r2, [r3, #4]
          break;
 800300e:	e00d      	b.n	800302c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2218      	movs	r2, #24
 8003014:	605a      	str	r2, [r3, #4]
          break;
 8003016:	e009      	b.n	800302c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800301e:	605a      	str	r2, [r3, #4]
          break;
 8003020:	e004      	b.n	800302c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2206      	movs	r2, #6
 8003026:	605a      	str	r2, [r3, #4]
          break;
 8003028:	e000      	b.n	800302c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800302a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	6859      	ldr	r1, [r3, #4]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	f7ff fc3b 	bl	80028b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fd3b 	bl	8002abe <LL_ADC_REG_IsConversionOngoing>
 8003048:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fd47 	bl	8002ae4 <LL_ADC_INJ_IsConversionOngoing>
 8003056:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800305a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800305e:	2b00      	cmp	r3, #0
 8003060:	f040 81a6 	bne.w	80033b0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003064:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003068:	2b00      	cmp	r3, #0
 800306a:	f040 81a1 	bne.w	80033b0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6818      	ldr	r0, [r3, #0]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	6819      	ldr	r1, [r3, #0]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	461a      	mov	r2, r3
 800307c:	f7ff fc46 	bl	800290c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	695a      	ldr	r2, [r3, #20]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	08db      	lsrs	r3, r3, #3
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d00a      	beq.n	80030b8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6919      	ldr	r1, [r3, #16]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030b2:	f7ff fb97 	bl	80027e4 <LL_ADC_SetOffset>
 80030b6:	e17b      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2100      	movs	r1, #0
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fbb4 	bl	800282c <LL_ADC_GetOffsetChannel>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x148>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2100      	movs	r1, #0
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fba9 	bl	800282c <LL_ADC_GetOffsetChannel>
 80030da:	4603      	mov	r3, r0
 80030dc:	0e9b      	lsrs	r3, r3, #26
 80030de:	f003 021f 	and.w	r2, r3, #31
 80030e2:	e01e      	b.n	8003122 <HAL_ADC_ConfigChannel+0x186>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2100      	movs	r1, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fb9e 	bl	800282c <LL_ADC_GetOffsetChannel>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003106:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800310a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003112:	2320      	movs	r3, #32
 8003114:	e004      	b.n	8003120 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003116:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800311a:	fab3 f383 	clz	r3, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312a:	2b00      	cmp	r3, #0
 800312c:	d105      	bne.n	800313a <HAL_ADC_ConfigChannel+0x19e>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	0e9b      	lsrs	r3, r3, #26
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	e018      	b.n	800316c <HAL_ADC_ConfigChannel+0x1d0>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800314e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003152:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003156:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800315e:	2320      	movs	r3, #32
 8003160:	e004      	b.n	800316c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003162:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800316c:	429a      	cmp	r2, r3
 800316e:	d106      	bne.n	800317e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2200      	movs	r2, #0
 8003176:	2100      	movs	r1, #0
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fb6d 	bl	8002858 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2101      	movs	r1, #1
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fb51 	bl	800282c <LL_ADC_GetOffsetChannel>
 800318a:	4603      	mov	r3, r0
 800318c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10a      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x20e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2101      	movs	r1, #1
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fb46 	bl	800282c <LL_ADC_GetOffsetChannel>
 80031a0:	4603      	mov	r3, r0
 80031a2:	0e9b      	lsrs	r3, r3, #26
 80031a4:	f003 021f 	and.w	r2, r3, #31
 80031a8:	e01e      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x24c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2101      	movs	r1, #1
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fb3b 	bl	800282c <LL_ADC_GetOffsetChannel>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031c0:	fa93 f3a3 	rbit	r3, r3
 80031c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80031c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80031d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80031d8:	2320      	movs	r3, #32
 80031da:	e004      	b.n	80031e6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80031dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031e0:	fab3 f383 	clz	r3, r3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x264>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	0e9b      	lsrs	r3, r3, #26
 80031fa:	f003 031f 	and.w	r3, r3, #31
 80031fe:	e018      	b.n	8003232 <HAL_ADC_ConfigChannel+0x296>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003214:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800321c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003224:	2320      	movs	r3, #32
 8003226:	e004      	b.n	8003232 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003228:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800322c:	fab3 f383 	clz	r3, r3
 8003230:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003232:	429a      	cmp	r2, r3
 8003234:	d106      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2200      	movs	r2, #0
 800323c:	2101      	movs	r1, #1
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fb0a 	bl	8002858 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2102      	movs	r1, #2
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff faee 	bl	800282c <LL_ADC_GetOffsetChannel>
 8003250:	4603      	mov	r3, r0
 8003252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10a      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x2d4>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2102      	movs	r1, #2
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fae3 	bl	800282c <LL_ADC_GetOffsetChannel>
 8003266:	4603      	mov	r3, r0
 8003268:	0e9b      	lsrs	r3, r3, #26
 800326a:	f003 021f 	and.w	r2, r3, #31
 800326e:	e01e      	b.n	80032ae <HAL_ADC_ConfigChannel+0x312>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2102      	movs	r1, #2
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fad8 	bl	800282c <LL_ADC_GetOffsetChannel>
 800327c:	4603      	mov	r3, r0
 800327e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003286:	fa93 f3a3 	rbit	r3, r3
 800328a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800328e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003296:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800329e:	2320      	movs	r3, #32
 80032a0:	e004      	b.n	80032ac <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80032a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032a6:	fab3 f383 	clz	r3, r3
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d105      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x32a>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	0e9b      	lsrs	r3, r3, #26
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	e016      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x358>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80032d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80032de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80032e6:	2320      	movs	r3, #32
 80032e8:	e004      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80032ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d106      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2200      	movs	r2, #0
 80032fe:	2102      	movs	r1, #2
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff faa9 	bl	8002858 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2103      	movs	r1, #3
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fa8d 	bl	800282c <LL_ADC_GetOffsetChannel>
 8003312:	4603      	mov	r3, r0
 8003314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10a      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x396>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2103      	movs	r1, #3
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fa82 	bl	800282c <LL_ADC_GetOffsetChannel>
 8003328:	4603      	mov	r3, r0
 800332a:	0e9b      	lsrs	r3, r3, #26
 800332c:	f003 021f 	and.w	r2, r3, #31
 8003330:	e017      	b.n	8003362 <HAL_ADC_ConfigChannel+0x3c6>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2103      	movs	r1, #3
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fa77 	bl	800282c <LL_ADC_GetOffsetChannel>
 800333e:	4603      	mov	r3, r0
 8003340:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800334a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800334c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800334e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003354:	2320      	movs	r3, #32
 8003356:	e003      	b.n	8003360 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800335a:	fab3 f383 	clz	r3, r3
 800335e:	b2db      	uxtb	r3, r3
 8003360:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336a:	2b00      	cmp	r3, #0
 800336c:	d105      	bne.n	800337a <HAL_ADC_ConfigChannel+0x3de>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	0e9b      	lsrs	r3, r3, #26
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	e011      	b.n	800339e <HAL_ADC_ConfigChannel+0x402>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003382:	fa93 f3a3 	rbit	r3, r3
 8003386:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800338a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800338c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003392:	2320      	movs	r3, #32
 8003394:	e003      	b.n	800339e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003398:	fab3 f383 	clz	r3, r3
 800339c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800339e:	429a      	cmp	r2, r3
 80033a0:	d106      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2200      	movs	r2, #0
 80033a8:	2103      	movs	r1, #3
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fa54 	bl	8002858 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fb5b 	bl	8002a70 <LL_ADC_IsEnabled>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f040 813f 	bne.w	8003640 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6819      	ldr	r1, [r3, #0]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	461a      	mov	r2, r3
 80033d0:	f7ff fac8 	bl	8002964 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4a8e      	ldr	r2, [pc, #568]	; (8003614 <HAL_ADC_ConfigChannel+0x678>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	f040 8130 	bne.w	8003640 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10b      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x46c>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	0e9b      	lsrs	r3, r3, #26
 80033f6:	3301      	adds	r3, #1
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	2b09      	cmp	r3, #9
 80033fe:	bf94      	ite	ls
 8003400:	2301      	movls	r3, #1
 8003402:	2300      	movhi	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	e019      	b.n	800343c <HAL_ADC_ConfigChannel+0x4a0>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003418:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800341a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003420:	2320      	movs	r3, #32
 8003422:	e003      	b.n	800342c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	3301      	adds	r3, #1
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	2b09      	cmp	r3, #9
 8003434:	bf94      	ite	ls
 8003436:	2301      	movls	r3, #1
 8003438:	2300      	movhi	r3, #0
 800343a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800343c:	2b00      	cmp	r3, #0
 800343e:	d079      	beq.n	8003534 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003448:	2b00      	cmp	r3, #0
 800344a:	d107      	bne.n	800345c <HAL_ADC_ConfigChannel+0x4c0>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	0e9b      	lsrs	r3, r3, #26
 8003452:	3301      	adds	r3, #1
 8003454:	069b      	lsls	r3, r3, #26
 8003456:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800345a:	e015      	b.n	8003488 <HAL_ADC_ConfigChannel+0x4ec>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800346a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800346c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800346e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003474:	2320      	movs	r3, #32
 8003476:	e003      	b.n	8003480 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347a:	fab3 f383 	clz	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	3301      	adds	r3, #1
 8003482:	069b      	lsls	r3, r3, #26
 8003484:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003490:	2b00      	cmp	r3, #0
 8003492:	d109      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x50c>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	0e9b      	lsrs	r3, r3, #26
 800349a:	3301      	adds	r3, #1
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	2101      	movs	r1, #1
 80034a2:	fa01 f303 	lsl.w	r3, r1, r3
 80034a6:	e017      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x53c>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034b0:	fa93 f3a3 	rbit	r3, r3
 80034b4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80034b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80034ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80034c0:	2320      	movs	r3, #32
 80034c2:	e003      	b.n	80034cc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80034c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	3301      	adds	r3, #1
 80034ce:	f003 031f 	and.w	r3, r3, #31
 80034d2:	2101      	movs	r1, #1
 80034d4:	fa01 f303 	lsl.w	r3, r1, r3
 80034d8:	ea42 0103 	orr.w	r1, r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x562>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	0e9b      	lsrs	r3, r3, #26
 80034ee:	3301      	adds	r3, #1
 80034f0:	f003 021f 	and.w	r2, r3, #31
 80034f4:	4613      	mov	r3, r2
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	4413      	add	r3, r2
 80034fa:	051b      	lsls	r3, r3, #20
 80034fc:	e018      	b.n	8003530 <HAL_ADC_ConfigChannel+0x594>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800350c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003516:	2320      	movs	r3, #32
 8003518:	e003      	b.n	8003522 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800351a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	3301      	adds	r3, #1
 8003524:	f003 021f 	and.w	r2, r3, #31
 8003528:	4613      	mov	r3, r2
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	4413      	add	r3, r2
 800352e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003530:	430b      	orrs	r3, r1
 8003532:	e080      	b.n	8003636 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353c:	2b00      	cmp	r3, #0
 800353e:	d107      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x5b4>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	0e9b      	lsrs	r3, r3, #26
 8003546:	3301      	adds	r3, #1
 8003548:	069b      	lsls	r3, r3, #26
 800354a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800354e:	e015      	b.n	800357c <HAL_ADC_ConfigChannel+0x5e0>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003568:	2320      	movs	r3, #32
 800356a:	e003      	b.n	8003574 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	fab3 f383 	clz	r3, r3
 8003572:	b2db      	uxtb	r3, r3
 8003574:	3301      	adds	r3, #1
 8003576:	069b      	lsls	r3, r3, #26
 8003578:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003584:	2b00      	cmp	r3, #0
 8003586:	d109      	bne.n	800359c <HAL_ADC_ConfigChannel+0x600>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	0e9b      	lsrs	r3, r3, #26
 800358e:	3301      	adds	r3, #1
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	2101      	movs	r1, #1
 8003596:	fa01 f303 	lsl.w	r3, r1, r3
 800359a:	e017      	b.n	80035cc <HAL_ADC_ConfigChannel+0x630>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	61fb      	str	r3, [r7, #28]
  return result;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80035b4:	2320      	movs	r3, #32
 80035b6:	e003      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	2101      	movs	r1, #1
 80035c8:	fa01 f303 	lsl.w	r3, r1, r3
 80035cc:	ea42 0103 	orr.w	r1, r2, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10d      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x65c>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	0e9b      	lsrs	r3, r3, #26
 80035e2:	3301      	adds	r3, #1
 80035e4:	f003 021f 	and.w	r2, r3, #31
 80035e8:	4613      	mov	r3, r2
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	4413      	add	r3, r2
 80035ee:	3b1e      	subs	r3, #30
 80035f0:	051b      	lsls	r3, r3, #20
 80035f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035f6:	e01d      	b.n	8003634 <HAL_ADC_ConfigChannel+0x698>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	613b      	str	r3, [r7, #16]
  return result;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d103      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003610:	2320      	movs	r3, #32
 8003612:	e005      	b.n	8003620 <HAL_ADC_ConfigChannel+0x684>
 8003614:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	fab3 f383 	clz	r3, r3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	3301      	adds	r3, #1
 8003622:	f003 021f 	and.w	r2, r3, #31
 8003626:	4613      	mov	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	4413      	add	r3, r2
 800362c:	3b1e      	subs	r3, #30
 800362e:	051b      	lsls	r3, r3, #20
 8003630:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003634:	430b      	orrs	r3, r1
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	6892      	ldr	r2, [r2, #8]
 800363a:	4619      	mov	r1, r3
 800363c:	f7ff f966 	bl	800290c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b3d      	ldr	r3, [pc, #244]	; (800373c <HAL_ADC_ConfigChannel+0x7a0>)
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d06c      	beq.n	8003726 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800364c:	483c      	ldr	r0, [pc, #240]	; (8003740 <HAL_ADC_ConfigChannel+0x7a4>)
 800364e:	f7ff f8bb 	bl	80027c8 <LL_ADC_GetCommonPathInternalCh>
 8003652:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a3a      	ldr	r2, [pc, #232]	; (8003744 <HAL_ADC_ConfigChannel+0x7a8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d127      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003660:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d121      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a35      	ldr	r2, [pc, #212]	; (8003748 <HAL_ADC_ConfigChannel+0x7ac>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d157      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003676:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800367a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800367e:	4619      	mov	r1, r3
 8003680:	482f      	ldr	r0, [pc, #188]	; (8003740 <HAL_ADC_ConfigChannel+0x7a4>)
 8003682:	f7ff f88e 	bl	80027a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003686:	4b31      	ldr	r3, [pc, #196]	; (800374c <HAL_ADC_ConfigChannel+0x7b0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	099b      	lsrs	r3, r3, #6
 800368c:	4a30      	ldr	r2, [pc, #192]	; (8003750 <HAL_ADC_ConfigChannel+0x7b4>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	099b      	lsrs	r3, r3, #6
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	4613      	mov	r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036a0:	e002      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f9      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036ae:	e03a      	b.n	8003726 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a27      	ldr	r2, [pc, #156]	; (8003754 <HAL_ADC_ConfigChannel+0x7b8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d113      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x746>
 80036ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10d      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <HAL_ADC_ConfigChannel+0x7ac>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d12a      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036d8:	4619      	mov	r1, r3
 80036da:	4819      	ldr	r0, [pc, #100]	; (8003740 <HAL_ADC_ConfigChannel+0x7a4>)
 80036dc:	f7ff f861 	bl	80027a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036e0:	e021      	b.n	8003726 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <HAL_ADC_ConfigChannel+0x7bc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d11c      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d116      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a12      	ldr	r2, [pc, #72]	; (8003748 <HAL_ADC_ConfigChannel+0x7ac>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d111      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003702:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003706:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800370a:	4619      	mov	r1, r3
 800370c:	480c      	ldr	r0, [pc, #48]	; (8003740 <HAL_ADC_ConfigChannel+0x7a4>)
 800370e:	f7ff f848 	bl	80027a2 <LL_ADC_SetCommonPathInternalCh>
 8003712:	e008      	b.n	8003726 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003718:	f043 0220 	orr.w	r2, r3, #32
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800372e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003732:	4618      	mov	r0, r3
 8003734:	37d8      	adds	r7, #216	; 0xd8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	80080000 	.word	0x80080000
 8003740:	50040300 	.word	0x50040300
 8003744:	c7520000 	.word	0xc7520000
 8003748:	50040000 	.word	0x50040000
 800374c:	2000001c 	.word	0x2000001c
 8003750:	053e2d63 	.word	0x053e2d63
 8003754:	cb840000 	.word	0xcb840000
 8003758:	80000001 	.word	0x80000001

0800375c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003764:	2300      	movs	r3, #0
 8003766:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff f97f 	bl	8002a70 <LL_ADC_IsEnabled>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d169      	bne.n	800384c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	4b36      	ldr	r3, [pc, #216]	; (8003858 <ADC_Enable+0xfc>)
 8003780:	4013      	ands	r3, r2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00d      	beq.n	80037a2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378a:	f043 0210 	orr.w	r2, r3, #16
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003796:	f043 0201 	orr.w	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e055      	b.n	800384e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff f94e 	bl	8002a48 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80037ac:	482b      	ldr	r0, [pc, #172]	; (800385c <ADC_Enable+0x100>)
 80037ae:	f7ff f80b 	bl	80027c8 <LL_ADC_GetCommonPathInternalCh>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d013      	beq.n	80037e4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037bc:	4b28      	ldr	r3, [pc, #160]	; (8003860 <ADC_Enable+0x104>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	099b      	lsrs	r3, r3, #6
 80037c2:	4a28      	ldr	r2, [pc, #160]	; (8003864 <ADC_Enable+0x108>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	099b      	lsrs	r3, r3, #6
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	4613      	mov	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80037d6:	e002      	b.n	80037de <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	3b01      	subs	r3, #1
 80037dc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f9      	bne.n	80037d8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80037e4:	f7fe ff9a 	bl	800271c <HAL_GetTick>
 80037e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037ea:	e028      	b.n	800383e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff f93d 	bl	8002a70 <LL_ADC_IsEnabled>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d104      	bne.n	8003806 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff f921 	bl	8002a48 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003806:	f7fe ff89 	bl	800271c <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d914      	bls.n	800383e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d00d      	beq.n	800383e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	f043 0210 	orr.w	r2, r3, #16
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003832:	f043 0201 	orr.w	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e007      	b.n	800384e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b01      	cmp	r3, #1
 800384a:	d1cf      	bne.n	80037ec <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	8000003f 	.word	0x8000003f
 800385c:	50040300 	.word	0x50040300
 8003860:	2000001c 	.word	0x2000001c
 8003864:	053e2d63 	.word	0x053e2d63

08003868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003878:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <__NVIC_SetPriorityGrouping+0x44>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003884:	4013      	ands	r3, r2
 8003886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800389a:	4a04      	ldr	r2, [pc, #16]	; (80038ac <__NVIC_SetPriorityGrouping+0x44>)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	60d3      	str	r3, [r2, #12]
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038b4:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <__NVIC_GetPriorityGrouping+0x18>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	0a1b      	lsrs	r3, r3, #8
 80038ba:	f003 0307 	and.w	r3, r3, #7
}
 80038be:	4618      	mov	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	e000ed00 	.word	0xe000ed00

080038cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	db0b      	blt.n	80038f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	f003 021f 	and.w	r2, r3, #31
 80038e4:	4907      	ldr	r1, [pc, #28]	; (8003904 <__NVIC_EnableIRQ+0x38>)
 80038e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	2001      	movs	r0, #1
 80038ee:	fa00 f202 	lsl.w	r2, r0, r2
 80038f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	e000e100 	.word	0xe000e100

08003908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	6039      	str	r1, [r7, #0]
 8003912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003918:	2b00      	cmp	r3, #0
 800391a:	db0a      	blt.n	8003932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	b2da      	uxtb	r2, r3
 8003920:	490c      	ldr	r1, [pc, #48]	; (8003954 <__NVIC_SetPriority+0x4c>)
 8003922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003926:	0112      	lsls	r2, r2, #4
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	440b      	add	r3, r1
 800392c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003930:	e00a      	b.n	8003948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	4908      	ldr	r1, [pc, #32]	; (8003958 <__NVIC_SetPriority+0x50>)
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	3b04      	subs	r3, #4
 8003940:	0112      	lsls	r2, r2, #4
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	440b      	add	r3, r1
 8003946:	761a      	strb	r2, [r3, #24]
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000e100 	.word	0xe000e100
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800395c:	b480      	push	{r7}
 800395e:	b089      	sub	sp, #36	; 0x24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f1c3 0307 	rsb	r3, r3, #7
 8003976:	2b04      	cmp	r3, #4
 8003978:	bf28      	it	cs
 800397a:	2304      	movcs	r3, #4
 800397c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3304      	adds	r3, #4
 8003982:	2b06      	cmp	r3, #6
 8003984:	d902      	bls.n	800398c <NVIC_EncodePriority+0x30>
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	3b03      	subs	r3, #3
 800398a:	e000      	b.n	800398e <NVIC_EncodePriority+0x32>
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003990:	f04f 32ff 	mov.w	r2, #4294967295
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43da      	mvns	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	401a      	ands	r2, r3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a4:	f04f 31ff 	mov.w	r1, #4294967295
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fa01 f303 	lsl.w	r3, r1, r3
 80039ae:	43d9      	mvns	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b4:	4313      	orrs	r3, r2
         );
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3724      	adds	r7, #36	; 0x24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
	...

080039c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039d4:	d301      	bcc.n	80039da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039d6:	2301      	movs	r3, #1
 80039d8:	e00f      	b.n	80039fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039da:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <SysTick_Config+0x40>)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3b01      	subs	r3, #1
 80039e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039e2:	210f      	movs	r1, #15
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295
 80039e8:	f7ff ff8e 	bl	8003908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039ec:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <SysTick_Config+0x40>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039f2:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <SysTick_Config+0x40>)
 80039f4:	2207      	movs	r2, #7
 80039f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	e000e010 	.word	0xe000e010

08003a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ff29 	bl	8003868 <__NVIC_SetPriorityGrouping>
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b086      	sub	sp, #24
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	4603      	mov	r3, r0
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]
 8003a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a30:	f7ff ff3e 	bl	80038b0 <__NVIC_GetPriorityGrouping>
 8003a34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	6978      	ldr	r0, [r7, #20]
 8003a3c:	f7ff ff8e 	bl	800395c <NVIC_EncodePriority>
 8003a40:	4602      	mov	r2, r0
 8003a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a46:	4611      	mov	r1, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ff5d 	bl	8003908 <__NVIC_SetPriority>
}
 8003a4e:	bf00      	nop
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff ff31 	bl	80038cc <__NVIC_EnableIRQ>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff ffa2 	bl	80039c4 <SysTick_Config>
 8003a80:	4603      	mov	r3, r0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b085      	sub	sp, #20
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d008      	beq.n	8003ab4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e022      	b.n	8003afa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 020e 	bic.w	r2, r2, #14
 8003ac2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad8:	f003 021c 	and.w	r2, r3, #28
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d005      	beq.n	8003b2a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2204      	movs	r2, #4
 8003b22:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
 8003b28:	e029      	b.n	8003b7e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 020e 	bic.w	r2, r2, #14
 8003b38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0201 	bic.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	f003 021c 	and.w	r2, r3, #28
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2101      	movs	r1, #1
 8003b58:	fa01 f202 	lsl.w	r2, r1, r2
 8003b5c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	4798      	blx	r3
    }
  }
  return status;
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b96:	e148      	b.n	8003e2a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 813a 	beq.w	8003e24 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d005      	beq.n	8003bc8 <HAL_GPIO_Init+0x40>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d130      	bne.n	8003c2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bfe:	2201      	movs	r2, #1
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43db      	mvns	r3, r3
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	091b      	lsrs	r3, r3, #4
 8003c14:	f003 0201 	and.w	r2, r3, #1
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d017      	beq.n	8003c66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	2203      	movs	r2, #3
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	43db      	mvns	r3, r3
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d123      	bne.n	8003cba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	08da      	lsrs	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3208      	adds	r2, #8
 8003c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	220f      	movs	r2, #15
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4013      	ands	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	08da      	lsrs	r2, r3, #3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3208      	adds	r2, #8
 8003cb4:	6939      	ldr	r1, [r7, #16]
 8003cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 0203 	and.w	r2, r3, #3
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 8094 	beq.w	8003e24 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cfc:	4b52      	ldr	r3, [pc, #328]	; (8003e48 <HAL_GPIO_Init+0x2c0>)
 8003cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d00:	4a51      	ldr	r2, [pc, #324]	; (8003e48 <HAL_GPIO_Init+0x2c0>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	6613      	str	r3, [r2, #96]	; 0x60
 8003d08:	4b4f      	ldr	r3, [pc, #316]	; (8003e48 <HAL_GPIO_Init+0x2c0>)
 8003d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d14:	4a4d      	ldr	r2, [pc, #308]	; (8003e4c <HAL_GPIO_Init+0x2c4>)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	089b      	lsrs	r3, r3, #2
 8003d1a:	3302      	adds	r3, #2
 8003d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	220f      	movs	r2, #15
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4013      	ands	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d3e:	d00d      	beq.n	8003d5c <HAL_GPIO_Init+0x1d4>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a43      	ldr	r2, [pc, #268]	; (8003e50 <HAL_GPIO_Init+0x2c8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d007      	beq.n	8003d58 <HAL_GPIO_Init+0x1d0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a42      	ldr	r2, [pc, #264]	; (8003e54 <HAL_GPIO_Init+0x2cc>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d101      	bne.n	8003d54 <HAL_GPIO_Init+0x1cc>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e004      	b.n	8003d5e <HAL_GPIO_Init+0x1d6>
 8003d54:	2307      	movs	r3, #7
 8003d56:	e002      	b.n	8003d5e <HAL_GPIO_Init+0x1d6>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <HAL_GPIO_Init+0x1d6>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	f002 0203 	and.w	r2, r2, #3
 8003d64:	0092      	lsls	r2, r2, #2
 8003d66:	4093      	lsls	r3, r2
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d6e:	4937      	ldr	r1, [pc, #220]	; (8003e4c <HAL_GPIO_Init+0x2c4>)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	089b      	lsrs	r3, r3, #2
 8003d74:	3302      	adds	r3, #2
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d7c:	4b36      	ldr	r3, [pc, #216]	; (8003e58 <HAL_GPIO_Init+0x2d0>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	43db      	mvns	r3, r3
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003da0:	4a2d      	ldr	r2, [pc, #180]	; (8003e58 <HAL_GPIO_Init+0x2d0>)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003da6:	4b2c      	ldr	r3, [pc, #176]	; (8003e58 <HAL_GPIO_Init+0x2d0>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	43db      	mvns	r3, r3
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4013      	ands	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dca:	4a23      	ldr	r2, [pc, #140]	; (8003e58 <HAL_GPIO_Init+0x2d0>)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003dd0:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <HAL_GPIO_Init+0x2d0>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003df4:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <HAL_GPIO_Init+0x2d0>)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003dfa:	4b17      	ldr	r3, [pc, #92]	; (8003e58 <HAL_GPIO_Init+0x2d0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	43db      	mvns	r3, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e1e:	4a0e      	ldr	r2, [pc, #56]	; (8003e58 <HAL_GPIO_Init+0x2d0>)
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3301      	adds	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f47f aeaf 	bne.w	8003b98 <HAL_GPIO_Init+0x10>
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	bf00      	nop
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40010000 	.word	0x40010000
 8003e50:	48000400 	.word	0x48000400
 8003e54:	48000800 	.word	0x48000800
 8003e58:	40010400 	.word	0x40010400

08003e5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	887b      	ldrh	r3, [r7, #2]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
 8003e78:	e001      	b.n	8003e7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	807b      	strh	r3, [r7, #2]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e9c:	787b      	ldrb	r3, [r7, #1]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ea2:	887a      	ldrh	r2, [r7, #2]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ea8:	e002      	b.n	8003eb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003eaa:	887a      	ldrh	r2, [r7, #2]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ece:	887a      	ldrh	r2, [r7, #2]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	041a      	lsls	r2, r3, #16
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	43d9      	mvns	r1, r3
 8003eda:	887b      	ldrh	r3, [r7, #2]
 8003edc:	400b      	ands	r3, r1
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	619a      	str	r2, [r3, #24]
}
 8003ee4:	bf00      	nop
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003efa:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d006      	beq.n	8003f14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f06:	4a05      	ldr	r2, [pc, #20]	; (8003f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fd fd0a 	bl	8001928 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40010400 	.word	0x40010400

08003f20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e081      	b.n	8004036 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7fd f9ba 	bl	80012c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2224      	movs	r2, #36	; 0x24
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d107      	bne.n	8003f9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f96:	609a      	str	r2, [r3, #8]
 8003f98:	e006      	b.n	8003fa8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003fa6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d104      	bne.n	8003fba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69d9      	ldr	r1, [r3, #28]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1a      	ldr	r2, [r3, #32]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	607a      	str	r2, [r7, #4]
 800404a:	461a      	mov	r2, r3
 800404c:	460b      	mov	r3, r1
 800404e:	817b      	strh	r3, [r7, #10]
 8004050:	4613      	mov	r3, r2
 8004052:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b20      	cmp	r3, #32
 800405e:	f040 80da 	bne.w	8004216 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_I2C_Master_Transmit+0x30>
 800406c:	2302      	movs	r3, #2
 800406e:	e0d3      	b.n	8004218 <HAL_I2C_Master_Transmit+0x1d8>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004078:	f7fe fb50 	bl	800271c <HAL_GetTick>
 800407c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	2319      	movs	r3, #25
 8004084:	2201      	movs	r2, #1
 8004086:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 fa58 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e0be      	b.n	8004218 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2221      	movs	r2, #33	; 0x21
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2210      	movs	r2, #16
 80040a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	893a      	ldrh	r2, [r7, #8]
 80040ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2bff      	cmp	r3, #255	; 0xff
 80040ca:	d90e      	bls.n	80040ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	22ff      	movs	r2, #255	; 0xff
 80040d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	8979      	ldrh	r1, [r7, #10]
 80040da:	4b51      	ldr	r3, [pc, #324]	; (8004220 <HAL_I2C_Master_Transmit+0x1e0>)
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 fbd4 	bl	8004890 <I2C_TransferConfig>
 80040e8:	e06c      	b.n	80041c4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	8979      	ldrh	r1, [r7, #10]
 80040fc:	4b48      	ldr	r3, [pc, #288]	; (8004220 <HAL_I2C_Master_Transmit+0x1e0>)
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fbc3 	bl	8004890 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800410a:	e05b      	b.n	80041c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	6a39      	ldr	r1, [r7, #32]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fa55 	bl	80045c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e07b      	b.n	8004218 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d034      	beq.n	80041c4 <HAL_I2C_Master_Transmit+0x184>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415e:	2b00      	cmp	r3, #0
 8004160:	d130      	bne.n	80041c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	2200      	movs	r2, #0
 800416a:	2180      	movs	r1, #128	; 0x80
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 f9e7 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e04d      	b.n	8004218 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	2bff      	cmp	r3, #255	; 0xff
 8004184:	d90e      	bls.n	80041a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	22ff      	movs	r2, #255	; 0xff
 800418a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004190:	b2da      	uxtb	r2, r3
 8004192:	8979      	ldrh	r1, [r7, #10]
 8004194:	2300      	movs	r3, #0
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 fb77 	bl	8004890 <I2C_TransferConfig>
 80041a2:	e00f      	b.n	80041c4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	8979      	ldrh	r1, [r7, #10]
 80041b6:	2300      	movs	r3, #0
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 fb66 	bl	8004890 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d19e      	bne.n	800410c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	6a39      	ldr	r1, [r7, #32]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 fa34 	bl	8004640 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e01a      	b.n	8004218 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2220      	movs	r2, #32
 80041e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6859      	ldr	r1, [r3, #4]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_I2C_Master_Transmit+0x1e4>)
 80041f6:	400b      	ands	r3, r1
 80041f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	e000      	b.n	8004218 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004216:	2302      	movs	r3, #2
  }
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	80002000 	.word	0x80002000
 8004224:	fe00e800 	.word	0xfe00e800

08004228 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	4608      	mov	r0, r1
 8004232:	4611      	mov	r1, r2
 8004234:	461a      	mov	r2, r3
 8004236:	4603      	mov	r3, r0
 8004238:	817b      	strh	r3, [r7, #10]
 800423a:	460b      	mov	r3, r1
 800423c:	813b      	strh	r3, [r7, #8]
 800423e:	4613      	mov	r3, r2
 8004240:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b20      	cmp	r3, #32
 800424c:	f040 80f9 	bne.w	8004442 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_I2C_Mem_Write+0x34>
 8004256:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004258:	2b00      	cmp	r3, #0
 800425a:	d105      	bne.n	8004268 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004262:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e0ed      	b.n	8004444 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <HAL_I2C_Mem_Write+0x4e>
 8004272:	2302      	movs	r3, #2
 8004274:	e0e6      	b.n	8004444 <HAL_I2C_Mem_Write+0x21c>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800427e:	f7fe fa4d 	bl	800271c <HAL_GetTick>
 8004282:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	2319      	movs	r3, #25
 800428a:	2201      	movs	r2, #1
 800428c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f955 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0d1      	b.n	8004444 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2221      	movs	r2, #33	; 0x21
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2240      	movs	r2, #64	; 0x40
 80042ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a3a      	ldr	r2, [r7, #32]
 80042ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042c8:	88f8      	ldrh	r0, [r7, #6]
 80042ca:	893a      	ldrh	r2, [r7, #8]
 80042cc:	8979      	ldrh	r1, [r7, #10]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	9301      	str	r3, [sp, #4]
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	4603      	mov	r3, r0
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 f8b9 	bl	8004450 <I2C_RequestMemoryWrite>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0a9      	b.n	8004444 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2bff      	cmp	r3, #255	; 0xff
 80042f8:	d90e      	bls.n	8004318 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	22ff      	movs	r2, #255	; 0xff
 80042fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004304:	b2da      	uxtb	r2, r3
 8004306:	8979      	ldrh	r1, [r7, #10]
 8004308:	2300      	movs	r3, #0
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fabd 	bl	8004890 <I2C_TransferConfig>
 8004316:	e00f      	b.n	8004338 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004326:	b2da      	uxtb	r2, r3
 8004328:	8979      	ldrh	r1, [r7, #10]
 800432a:	2300      	movs	r3, #0
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 faac 	bl	8004890 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f93f 	bl	80045c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e07b      	b.n	8004444 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	781a      	ldrb	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d034      	beq.n	80043f0 <HAL_I2C_Mem_Write+0x1c8>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438a:	2b00      	cmp	r3, #0
 800438c:	d130      	bne.n	80043f0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	2200      	movs	r2, #0
 8004396:	2180      	movs	r1, #128	; 0x80
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f8d1 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e04d      	b.n	8004444 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2bff      	cmp	r3, #255	; 0xff
 80043b0:	d90e      	bls.n	80043d0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	22ff      	movs	r2, #255	; 0xff
 80043b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	8979      	ldrh	r1, [r7, #10]
 80043c0:	2300      	movs	r3, #0
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fa61 	bl	8004890 <I2C_TransferConfig>
 80043ce:	e00f      	b.n	80043f0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	8979      	ldrh	r1, [r7, #10]
 80043e2:	2300      	movs	r3, #0
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 fa50 	bl	8004890 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d19e      	bne.n	8004338 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f91e 	bl	8004640 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e01a      	b.n	8004444 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2220      	movs	r2, #32
 8004414:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6859      	ldr	r1, [r3, #4]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <HAL_I2C_Mem_Write+0x224>)
 8004422:	400b      	ands	r3, r1
 8004424:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	e000      	b.n	8004444 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004442:	2302      	movs	r3, #2
  }
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	fe00e800 	.word	0xfe00e800

08004450 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af02      	add	r7, sp, #8
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	4608      	mov	r0, r1
 800445a:	4611      	mov	r1, r2
 800445c:	461a      	mov	r2, r3
 800445e:	4603      	mov	r3, r0
 8004460:	817b      	strh	r3, [r7, #10]
 8004462:	460b      	mov	r3, r1
 8004464:	813b      	strh	r3, [r7, #8]
 8004466:	4613      	mov	r3, r2
 8004468:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	b2da      	uxtb	r2, r3
 800446e:	8979      	ldrh	r1, [r7, #10]
 8004470:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <I2C_RequestMemoryWrite+0xa4>)
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 fa09 	bl	8004890 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	69b9      	ldr	r1, [r7, #24]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f89c 	bl	80045c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e02c      	b.n	80044ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004492:	88fb      	ldrh	r3, [r7, #6]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d105      	bne.n	80044a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004498:	893b      	ldrh	r3, [r7, #8]
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	629a      	str	r2, [r3, #40]	; 0x28
 80044a2:	e015      	b.n	80044d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044a4:	893b      	ldrh	r3, [r7, #8]
 80044a6:	0a1b      	lsrs	r3, r3, #8
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	69b9      	ldr	r1, [r7, #24]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 f882 	bl	80045c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e012      	b.n	80044ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044c6:	893b      	ldrh	r3, [r7, #8]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2200      	movs	r2, #0
 80044d8:	2180      	movs	r1, #128	; 0x80
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f830 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	80002000 	.word	0x80002000

080044f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b02      	cmp	r3, #2
 800450c:	d103      	bne.n	8004516 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b01      	cmp	r3, #1
 8004522:	d007      	beq.n	8004534 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	619a      	str	r2, [r3, #24]
  }
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004550:	e022      	b.n	8004598 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d01e      	beq.n	8004598 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455a:	f7fe f8df 	bl	800271c <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <I2C_WaitOnFlagUntilTimeout+0x30>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d113      	bne.n	8004598 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004574:	f043 0220 	orr.w	r2, r3, #32
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e00f      	b.n	80045b8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4013      	ands	r3, r2
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	bf0c      	ite	eq
 80045a8:	2301      	moveq	r3, #1
 80045aa:	2300      	movne	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d0cd      	beq.n	8004552 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045cc:	e02c      	b.n	8004628 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 f870 	bl	80046b8 <I2C_IsErrorOccurred>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e02a      	b.n	8004638 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d01e      	beq.n	8004628 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ea:	f7fe f897 	bl	800271c <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d302      	bcc.n	8004600 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d113      	bne.n	8004628 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004604:	f043 0220 	orr.w	r2, r3, #32
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e007      	b.n	8004638 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b02      	cmp	r3, #2
 8004634:	d1cb      	bne.n	80045ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800464c:	e028      	b.n	80046a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f830 	bl	80046b8 <I2C_IsErrorOccurred>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e026      	b.n	80046b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004662:	f7fe f85b 	bl	800271c <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	429a      	cmp	r2, r3
 8004670:	d302      	bcc.n	8004678 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d113      	bne.n	80046a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467c:	f043 0220 	orr.w	r2, r3, #32
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e007      	b.n	80046b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d1cf      	bne.n	800464e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08a      	sub	sp, #40	; 0x28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d075      	beq.n	80047d0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2210      	movs	r2, #16
 80046ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046ec:	e056      	b.n	800479c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f4:	d052      	beq.n	800479c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046f6:	f7fe f811 	bl	800271c <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	429a      	cmp	r2, r3
 8004704:	d302      	bcc.n	800470c <I2C_IsErrorOccurred+0x54>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d147      	bne.n	800479c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004716:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800471e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800472a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800472e:	d12e      	bne.n	800478e <I2C_IsErrorOccurred+0xd6>
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004736:	d02a      	beq.n	800478e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	2b20      	cmp	r3, #32
 800473c:	d027      	beq.n	800478e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800474c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800474e:	f7fd ffe5 	bl	800271c <HAL_GetTick>
 8004752:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004754:	e01b      	b.n	800478e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004756:	f7fd ffe1 	bl	800271c <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b19      	cmp	r3, #25
 8004762:	d914      	bls.n	800478e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004768:	f043 0220 	orr.w	r2, r3, #32
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b20      	cmp	r3, #32
 800479a:	d1dc      	bne.n	8004756 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d003      	beq.n	80047b2 <I2C_IsErrorOccurred+0xfa>
 80047aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d09d      	beq.n	80046ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2220      	movs	r2, #32
 80047c0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	f043 0304 	orr.w	r3, r3, #4
 80047c8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	f043 0301 	orr.w	r3, r3, #1
 80047e8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00b      	beq.n	800481c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	f043 0308 	orr.w	r3, r3, #8
 800480a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004814:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00b      	beq.n	800483e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	f043 0302 	orr.w	r3, r3, #2
 800482c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004836:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800483e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01c      	beq.n	8004880 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f7ff fe56 	bl	80044f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6859      	ldr	r1, [r3, #4]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4b0d      	ldr	r3, [pc, #52]	; (800488c <I2C_IsErrorOccurred+0x1d4>)
 8004858:	400b      	ands	r3, r1
 800485a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	431a      	orrs	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004884:	4618      	mov	r0, r3
 8004886:	3728      	adds	r7, #40	; 0x28
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	fe00e800 	.word	0xfe00e800

08004890 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	607b      	str	r3, [r7, #4]
 800489a:	460b      	mov	r3, r1
 800489c:	817b      	strh	r3, [r7, #10]
 800489e:	4613      	mov	r3, r2
 80048a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048a2:	897b      	ldrh	r3, [r7, #10]
 80048a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048a8:	7a7b      	ldrb	r3, [r7, #9]
 80048aa:	041b      	lsls	r3, r3, #16
 80048ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	0d5b      	lsrs	r3, r3, #21
 80048ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80048ce:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <I2C_TransferConfig+0x60>)
 80048d0:	430b      	orrs	r3, r1
 80048d2:	43db      	mvns	r3, r3
 80048d4:	ea02 0103 	and.w	r1, r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80048e2:	bf00      	nop
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	03ff63ff 	.word	0x03ff63ff

080048f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b20      	cmp	r3, #32
 8004908:	d138      	bne.n	800497c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004914:	2302      	movs	r3, #2
 8004916:	e032      	b.n	800497e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2224      	movs	r2, #36	; 0x24
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0201 	bic.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004946:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6819      	ldr	r1, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	e000      	b.n	800497e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800497c:	2302      	movs	r3, #2
  }
}
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b20      	cmp	r3, #32
 800499e:	d139      	bne.n	8004a14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e033      	b.n	8004a16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2224      	movs	r2, #36	; 0x24
 80049ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0201 	bic.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e000      	b.n	8004a16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a14:	2302      	movs	r3, #2
  }
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a28:	4b04      	ldr	r3, [pc, #16]	; (8004a3c <HAL_PWREx_GetVoltageRange+0x18>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40007000 	.word	0x40007000

08004a40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a4e:	d130      	bne.n	8004ab2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a50:	4b23      	ldr	r3, [pc, #140]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a5c:	d038      	beq.n	8004ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a5e:	4b20      	ldr	r3, [pc, #128]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a66:	4a1e      	ldr	r2, [pc, #120]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ae4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2232      	movs	r2, #50	; 0x32
 8004a74:	fb02 f303 	mul.w	r3, r2, r3
 8004a78:	4a1b      	ldr	r2, [pc, #108]	; (8004ae8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	0c9b      	lsrs	r3, r3, #18
 8004a80:	3301      	adds	r3, #1
 8004a82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a84:	e002      	b.n	8004a8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a8c:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a98:	d102      	bne.n	8004aa0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1f2      	bne.n	8004a86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004aa0:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aac:	d110      	bne.n	8004ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e00f      	b.n	8004ad2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ab2:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004abe:	d007      	beq.n	8004ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ac8:	4a05      	ldr	r2, [pc, #20]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ace:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40007000 	.word	0x40007000
 8004ae4:	2000001c 	.word	0x2000001c
 8004ae8:	431bde83 	.word	0x431bde83

08004aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d102      	bne.n	8004b00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	f000 bc02 	b.w	8005304 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b00:	4b96      	ldr	r3, [pc, #600]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 030c 	and.w	r3, r3, #12
 8004b08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b0a:	4b94      	ldr	r3, [pc, #592]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 80e4 	beq.w	8004cea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d007      	beq.n	8004b38 <HAL_RCC_OscConfig+0x4c>
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b0c      	cmp	r3, #12
 8004b2c:	f040 808b 	bne.w	8004c46 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	f040 8087 	bne.w	8004c46 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b38:	4b88      	ldr	r3, [pc, #544]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d005      	beq.n	8004b50 <HAL_RCC_OscConfig+0x64>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e3d9      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1a      	ldr	r2, [r3, #32]
 8004b54:	4b81      	ldr	r3, [pc, #516]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <HAL_RCC_OscConfig+0x7e>
 8004b60:	4b7e      	ldr	r3, [pc, #504]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b68:	e005      	b.n	8004b76 <HAL_RCC_OscConfig+0x8a>
 8004b6a:	4b7c      	ldr	r3, [pc, #496]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d223      	bcs.n	8004bc2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fd8c 	bl	800569c <RCC_SetFlashLatencyFromMSIRange>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e3ba      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b8e:	4b73      	ldr	r3, [pc, #460]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a72      	ldr	r2, [pc, #456]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004b94:	f043 0308 	orr.w	r3, r3, #8
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	4b70      	ldr	r3, [pc, #448]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	496d      	ldr	r1, [pc, #436]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bac:	4b6b      	ldr	r3, [pc, #428]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	021b      	lsls	r3, r3, #8
 8004bba:	4968      	ldr	r1, [pc, #416]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	604b      	str	r3, [r1, #4]
 8004bc0:	e025      	b.n	8004c0e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bc2:	4b66      	ldr	r3, [pc, #408]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a65      	ldr	r2, [pc, #404]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004bc8:	f043 0308 	orr.w	r3, r3, #8
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	4b63      	ldr	r3, [pc, #396]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	4960      	ldr	r1, [pc, #384]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004be0:	4b5e      	ldr	r3, [pc, #376]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	495b      	ldr	r1, [pc, #364]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d109      	bne.n	8004c0e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fd4c 	bl	800569c <RCC_SetFlashLatencyFromMSIRange>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e37a      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c0e:	f000 fc81 	bl	8005514 <HAL_RCC_GetSysClockFreq>
 8004c12:	4602      	mov	r2, r0
 8004c14:	4b51      	ldr	r3, [pc, #324]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	091b      	lsrs	r3, r3, #4
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	4950      	ldr	r1, [pc, #320]	; (8004d60 <HAL_RCC_OscConfig+0x274>)
 8004c20:	5ccb      	ldrb	r3, [r1, r3]
 8004c22:	f003 031f 	and.w	r3, r3, #31
 8004c26:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2a:	4a4e      	ldr	r2, [pc, #312]	; (8004d64 <HAL_RCC_OscConfig+0x278>)
 8004c2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c2e:	4b4e      	ldr	r3, [pc, #312]	; (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fd fd22 	bl	800267c <HAL_InitTick>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d052      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
 8004c44:	e35e      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d032      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c4e:	4b43      	ldr	r3, [pc, #268]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a42      	ldr	r2, [pc, #264]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c5a:	f7fd fd5f 	bl	800271c <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c62:	f7fd fd5b 	bl	800271c <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e347      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c74:	4b39      	ldr	r3, [pc, #228]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c80:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a35      	ldr	r2, [pc, #212]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c86:	f043 0308 	orr.w	r3, r3, #8
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	4b33      	ldr	r3, [pc, #204]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	4930      	ldr	r1, [pc, #192]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c9e:	4b2f      	ldr	r3, [pc, #188]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	492b      	ldr	r1, [pc, #172]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	604b      	str	r3, [r1, #4]
 8004cb2:	e01a      	b.n	8004cea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cb4:	4b29      	ldr	r3, [pc, #164]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a28      	ldr	r2, [pc, #160]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cc0:	f7fd fd2c 	bl	800271c <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cc8:	f7fd fd28 	bl	800271c <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e314      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cda:	4b20      	ldr	r3, [pc, #128]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f0      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x1dc>
 8004ce6:	e000      	b.n	8004cea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ce8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d073      	beq.n	8004dde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d005      	beq.n	8004d08 <HAL_RCC_OscConfig+0x21c>
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	2b0c      	cmp	r3, #12
 8004d00:	d10e      	bne.n	8004d20 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d10b      	bne.n	8004d20 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d08:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d063      	beq.n	8004ddc <HAL_RCC_OscConfig+0x2f0>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d15f      	bne.n	8004ddc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e2f1      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d28:	d106      	bne.n	8004d38 <HAL_RCC_OscConfig+0x24c>
 8004d2a:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a0b      	ldr	r2, [pc, #44]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	e025      	b.n	8004d84 <HAL_RCC_OscConfig+0x298>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d40:	d114      	bne.n	8004d6c <HAL_RCC_OscConfig+0x280>
 8004d42:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a05      	ldr	r2, [pc, #20]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a02      	ldr	r2, [pc, #8]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	e013      	b.n	8004d84 <HAL_RCC_OscConfig+0x298>
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	0800ed54 	.word	0x0800ed54
 8004d64:	2000001c 	.word	0x2000001c
 8004d68:	20000020 	.word	0x20000020
 8004d6c:	4ba0      	ldr	r3, [pc, #640]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a9f      	ldr	r2, [pc, #636]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	4b9d      	ldr	r3, [pc, #628]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a9c      	ldr	r2, [pc, #624]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d013      	beq.n	8004db4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fd fcc6 	bl	800271c <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d94:	f7fd fcc2 	bl	800271c <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b64      	cmp	r3, #100	; 0x64
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e2ae      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004da6:	4b92      	ldr	r3, [pc, #584]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0x2a8>
 8004db2:	e014      	b.n	8004dde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fd fcb2 	bl	800271c <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dbc:	f7fd fcae 	bl	800271c <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b64      	cmp	r3, #100	; 0x64
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e29a      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dce:	4b88      	ldr	r3, [pc, #544]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f0      	bne.n	8004dbc <HAL_RCC_OscConfig+0x2d0>
 8004dda:	e000      	b.n	8004dde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d060      	beq.n	8004eac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d005      	beq.n	8004dfc <HAL_RCC_OscConfig+0x310>
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	2b0c      	cmp	r3, #12
 8004df4:	d119      	bne.n	8004e2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d116      	bne.n	8004e2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dfc:	4b7c      	ldr	r3, [pc, #496]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <HAL_RCC_OscConfig+0x328>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e277      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e14:	4b76      	ldr	r3, [pc, #472]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	061b      	lsls	r3, r3, #24
 8004e22:	4973      	ldr	r1, [pc, #460]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e28:	e040      	b.n	8004eac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d023      	beq.n	8004e7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e32:	4b6f      	ldr	r3, [pc, #444]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a6e      	ldr	r2, [pc, #440]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3e:	f7fd fc6d 	bl	800271c <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e44:	e008      	b.n	8004e58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e46:	f7fd fc69 	bl	800271c <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e255      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e58:	4b65      	ldr	r3, [pc, #404]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0f0      	beq.n	8004e46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e64:	4b62      	ldr	r3, [pc, #392]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	061b      	lsls	r3, r3, #24
 8004e72:	495f      	ldr	r1, [pc, #380]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	604b      	str	r3, [r1, #4]
 8004e78:	e018      	b.n	8004eac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e7a:	4b5d      	ldr	r3, [pc, #372]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a5c      	ldr	r2, [pc, #368]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e86:	f7fd fc49 	bl	800271c <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e8e:	f7fd fc45 	bl	800271c <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e231      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ea0:	4b53      	ldr	r3, [pc, #332]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f0      	bne.n	8004e8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d03c      	beq.n	8004f32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01c      	beq.n	8004efa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ec0:	4b4b      	ldr	r3, [pc, #300]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec6:	4a4a      	ldr	r2, [pc, #296]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed0:	f7fd fc24 	bl	800271c <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed8:	f7fd fc20 	bl	800271c <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e20c      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eea:	4b41      	ldr	r3, [pc, #260]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0ef      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x3ec>
 8004ef8:	e01b      	b.n	8004f32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004efa:	4b3d      	ldr	r3, [pc, #244]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f00:	4a3b      	ldr	r2, [pc, #236]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004f02:	f023 0301 	bic.w	r3, r3, #1
 8004f06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0a:	f7fd fc07 	bl	800271c <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f12:	f7fd fc03 	bl	800271c <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e1ef      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f24:	4b32      	ldr	r3, [pc, #200]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1ef      	bne.n	8004f12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 80a6 	beq.w	800508c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f40:	2300      	movs	r3, #0
 8004f42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f44:	4b2a      	ldr	r3, [pc, #168]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10d      	bne.n	8004f6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f50:	4b27      	ldr	r3, [pc, #156]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f54:	4a26      	ldr	r2, [pc, #152]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8004f5c:	4b24      	ldr	r3, [pc, #144]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f64:	60bb      	str	r3, [r7, #8]
 8004f66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f6c:	4b21      	ldr	r3, [pc, #132]	; (8004ff4 <HAL_RCC_OscConfig+0x508>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d118      	bne.n	8004faa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f78:	4b1e      	ldr	r3, [pc, #120]	; (8004ff4 <HAL_RCC_OscConfig+0x508>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ff4 <HAL_RCC_OscConfig+0x508>)
 8004f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f84:	f7fd fbca 	bl	800271c <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f8c:	f7fd fbc6 	bl	800271c <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e1b2      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f9e:	4b15      	ldr	r3, [pc, #84]	; (8004ff4 <HAL_RCC_OscConfig+0x508>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d108      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x4d8>
 8004fb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb8:	4a0d      	ldr	r2, [pc, #52]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fc2:	e029      	b.n	8005018 <HAL_RCC_OscConfig+0x52c>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b05      	cmp	r3, #5
 8004fca:	d115      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x50c>
 8004fcc:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd2:	4a07      	ldr	r2, [pc, #28]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004fd4:	f043 0304 	orr.w	r3, r3, #4
 8004fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fdc:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe2:	4a03      	ldr	r2, [pc, #12]	; (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fec:	e014      	b.n	8005018 <HAL_RCC_OscConfig+0x52c>
 8004fee:	bf00      	nop
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	40007000 	.word	0x40007000
 8004ff8:	4b9a      	ldr	r3, [pc, #616]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 8004ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffe:	4a99      	ldr	r2, [pc, #612]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 8005000:	f023 0301 	bic.w	r3, r3, #1
 8005004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005008:	4b96      	ldr	r3, [pc, #600]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	4a95      	ldr	r2, [pc, #596]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 8005010:	f023 0304 	bic.w	r3, r3, #4
 8005014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d016      	beq.n	800504e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005020:	f7fd fb7c 	bl	800271c <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005026:	e00a      	b.n	800503e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005028:	f7fd fb78 	bl	800271c <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	f241 3288 	movw	r2, #5000	; 0x1388
 8005036:	4293      	cmp	r3, r2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e162      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800503e:	4b89      	ldr	r3, [pc, #548]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0ed      	beq.n	8005028 <HAL_RCC_OscConfig+0x53c>
 800504c:	e015      	b.n	800507a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504e:	f7fd fb65 	bl	800271c <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005054:	e00a      	b.n	800506c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005056:	f7fd fb61 	bl	800271c <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	f241 3288 	movw	r2, #5000	; 0x1388
 8005064:	4293      	cmp	r3, r2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e14b      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800506c:	4b7d      	ldr	r3, [pc, #500]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1ed      	bne.n	8005056 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800507a:	7ffb      	ldrb	r3, [r7, #31]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d105      	bne.n	800508c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005080:	4b78      	ldr	r3, [pc, #480]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 8005082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005084:	4a77      	ldr	r2, [pc, #476]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 8005086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800508a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	d03c      	beq.n	8005112 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01c      	beq.n	80050da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050a0:	4b70      	ldr	r3, [pc, #448]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 80050a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050a6:	4a6f      	ldr	r2, [pc, #444]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 80050a8:	f043 0301 	orr.w	r3, r3, #1
 80050ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b0:	f7fd fb34 	bl	800271c <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050b8:	f7fd fb30 	bl	800271c <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e11c      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050ca:	4b66      	ldr	r3, [pc, #408]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 80050cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0ef      	beq.n	80050b8 <HAL_RCC_OscConfig+0x5cc>
 80050d8:	e01b      	b.n	8005112 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050da:	4b62      	ldr	r3, [pc, #392]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 80050dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050e0:	4a60      	ldr	r2, [pc, #384]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 80050e2:	f023 0301 	bic.w	r3, r3, #1
 80050e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ea:	f7fd fb17 	bl	800271c <HAL_GetTick>
 80050ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050f2:	f7fd fb13 	bl	800271c <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e0ff      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005104:	4b57      	ldr	r3, [pc, #348]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 8005106:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1ef      	bne.n	80050f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 80f3 	beq.w	8005302 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	2b02      	cmp	r3, #2
 8005122:	f040 80c9 	bne.w	80052b8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005126:	4b4f      	ldr	r3, [pc, #316]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f003 0203 	and.w	r2, r3, #3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	429a      	cmp	r2, r3
 8005138:	d12c      	bne.n	8005194 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	3b01      	subs	r3, #1
 8005146:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005148:	429a      	cmp	r2, r3
 800514a:	d123      	bne.n	8005194 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005156:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d11b      	bne.n	8005194 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005168:	429a      	cmp	r2, r3
 800516a:	d113      	bne.n	8005194 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	085b      	lsrs	r3, r3, #1
 8005178:	3b01      	subs	r3, #1
 800517a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800517c:	429a      	cmp	r2, r3
 800517e:	d109      	bne.n	8005194 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	085b      	lsrs	r3, r3, #1
 800518c:	3b01      	subs	r3, #1
 800518e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005190:	429a      	cmp	r2, r3
 8005192:	d06b      	beq.n	800526c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	2b0c      	cmp	r3, #12
 8005198:	d062      	beq.n	8005260 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800519a:	4b32      	ldr	r3, [pc, #200]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e0ac      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80051aa:	4b2e      	ldr	r3, [pc, #184]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a2d      	ldr	r2, [pc, #180]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 80051b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051b6:	f7fd fab1 	bl	800271c <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051be:	f7fd faad 	bl	800271c <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e099      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051d0:	4b24      	ldr	r3, [pc, #144]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1f0      	bne.n	80051be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051dc:	4b21      	ldr	r3, [pc, #132]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	4b21      	ldr	r3, [pc, #132]	; (8005268 <HAL_RCC_OscConfig+0x77c>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051ec:	3a01      	subs	r2, #1
 80051ee:	0112      	lsls	r2, r2, #4
 80051f0:	4311      	orrs	r1, r2
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051f6:	0212      	lsls	r2, r2, #8
 80051f8:	4311      	orrs	r1, r2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051fe:	0852      	lsrs	r2, r2, #1
 8005200:	3a01      	subs	r2, #1
 8005202:	0552      	lsls	r2, r2, #21
 8005204:	4311      	orrs	r1, r2
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800520a:	0852      	lsrs	r2, r2, #1
 800520c:	3a01      	subs	r2, #1
 800520e:	0652      	lsls	r2, r2, #25
 8005210:	4311      	orrs	r1, r2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005216:	06d2      	lsls	r2, r2, #27
 8005218:	430a      	orrs	r2, r1
 800521a:	4912      	ldr	r1, [pc, #72]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 800521c:	4313      	orrs	r3, r2
 800521e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005220:	4b10      	ldr	r3, [pc, #64]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a0f      	ldr	r2, [pc, #60]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 8005226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800522a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800522c:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	4a0c      	ldr	r2, [pc, #48]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 8005232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005236:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005238:	f7fd fa70 	bl	800271c <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005240:	f7fd fa6c 	bl	800271c <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e058      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005252:	4b04      	ldr	r3, [pc, #16]	; (8005264 <HAL_RCC_OscConfig+0x778>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0f0      	beq.n	8005240 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800525e:	e050      	b.n	8005302 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e04f      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
 8005264:	40021000 	.word	0x40021000
 8005268:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800526c:	4b27      	ldr	r3, [pc, #156]	; (800530c <HAL_RCC_OscConfig+0x820>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d144      	bne.n	8005302 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005278:	4b24      	ldr	r3, [pc, #144]	; (800530c <HAL_RCC_OscConfig+0x820>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a23      	ldr	r2, [pc, #140]	; (800530c <HAL_RCC_OscConfig+0x820>)
 800527e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005282:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005284:	4b21      	ldr	r3, [pc, #132]	; (800530c <HAL_RCC_OscConfig+0x820>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	4a20      	ldr	r2, [pc, #128]	; (800530c <HAL_RCC_OscConfig+0x820>)
 800528a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800528e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005290:	f7fd fa44 	bl	800271c <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005298:	f7fd fa40 	bl	800271c <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e02c      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052aa:	4b18      	ldr	r3, [pc, #96]	; (800530c <HAL_RCC_OscConfig+0x820>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCC_OscConfig+0x7ac>
 80052b6:	e024      	b.n	8005302 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	2b0c      	cmp	r3, #12
 80052bc:	d01f      	beq.n	80052fe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052be:	4b13      	ldr	r3, [pc, #76]	; (800530c <HAL_RCC_OscConfig+0x820>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a12      	ldr	r2, [pc, #72]	; (800530c <HAL_RCC_OscConfig+0x820>)
 80052c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ca:	f7fd fa27 	bl	800271c <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d2:	f7fd fa23 	bl	800271c <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e00f      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052e4:	4b09      	ldr	r3, [pc, #36]	; (800530c <HAL_RCC_OscConfig+0x820>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1f0      	bne.n	80052d2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80052f0:	4b06      	ldr	r3, [pc, #24]	; (800530c <HAL_RCC_OscConfig+0x820>)
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	4905      	ldr	r1, [pc, #20]	; (800530c <HAL_RCC_OscConfig+0x820>)
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <HAL_RCC_OscConfig+0x824>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	60cb      	str	r3, [r1, #12]
 80052fc:	e001      	b.n	8005302 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40021000 	.word	0x40021000
 8005310:	feeefffc 	.word	0xfeeefffc

08005314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e0e7      	b.n	80054f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005328:	4b75      	ldr	r3, [pc, #468]	; (8005500 <HAL_RCC_ClockConfig+0x1ec>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d910      	bls.n	8005358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005336:	4b72      	ldr	r3, [pc, #456]	; (8005500 <HAL_RCC_ClockConfig+0x1ec>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f023 0207 	bic.w	r2, r3, #7
 800533e:	4970      	ldr	r1, [pc, #448]	; (8005500 <HAL_RCC_ClockConfig+0x1ec>)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	4313      	orrs	r3, r2
 8005344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005346:	4b6e      	ldr	r3, [pc, #440]	; (8005500 <HAL_RCC_ClockConfig+0x1ec>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d001      	beq.n	8005358 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0cf      	b.n	80054f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d010      	beq.n	8005386 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	4b66      	ldr	r3, [pc, #408]	; (8005504 <HAL_RCC_ClockConfig+0x1f0>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005370:	429a      	cmp	r2, r3
 8005372:	d908      	bls.n	8005386 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005374:	4b63      	ldr	r3, [pc, #396]	; (8005504 <HAL_RCC_ClockConfig+0x1f0>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	4960      	ldr	r1, [pc, #384]	; (8005504 <HAL_RCC_ClockConfig+0x1f0>)
 8005382:	4313      	orrs	r3, r2
 8005384:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d04c      	beq.n	800542c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b03      	cmp	r3, #3
 8005398:	d107      	bne.n	80053aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800539a:	4b5a      	ldr	r3, [pc, #360]	; (8005504 <HAL_RCC_ClockConfig+0x1f0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d121      	bne.n	80053ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e0a6      	b.n	80054f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d107      	bne.n	80053c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053b2:	4b54      	ldr	r3, [pc, #336]	; (8005504 <HAL_RCC_ClockConfig+0x1f0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d115      	bne.n	80053ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e09a      	b.n	80054f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d107      	bne.n	80053da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053ca:	4b4e      	ldr	r3, [pc, #312]	; (8005504 <HAL_RCC_ClockConfig+0x1f0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d109      	bne.n	80053ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e08e      	b.n	80054f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053da:	4b4a      	ldr	r3, [pc, #296]	; (8005504 <HAL_RCC_ClockConfig+0x1f0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e086      	b.n	80054f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053ea:	4b46      	ldr	r3, [pc, #280]	; (8005504 <HAL_RCC_ClockConfig+0x1f0>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f023 0203 	bic.w	r2, r3, #3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	4943      	ldr	r1, [pc, #268]	; (8005504 <HAL_RCC_ClockConfig+0x1f0>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fc:	f7fd f98e 	bl	800271c <HAL_GetTick>
 8005400:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005402:	e00a      	b.n	800541a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005404:	f7fd f98a 	bl	800271c <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005412:	4293      	cmp	r3, r2
 8005414:	d901      	bls.n	800541a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e06e      	b.n	80054f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800541a:	4b3a      	ldr	r3, [pc, #232]	; (8005504 <HAL_RCC_ClockConfig+0x1f0>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 020c 	and.w	r2, r3, #12
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	429a      	cmp	r2, r3
 800542a:	d1eb      	bne.n	8005404 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d010      	beq.n	800545a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	4b31      	ldr	r3, [pc, #196]	; (8005504 <HAL_RCC_ClockConfig+0x1f0>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005444:	429a      	cmp	r2, r3
 8005446:	d208      	bcs.n	800545a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005448:	4b2e      	ldr	r3, [pc, #184]	; (8005504 <HAL_RCC_ClockConfig+0x1f0>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	492b      	ldr	r1, [pc, #172]	; (8005504 <HAL_RCC_ClockConfig+0x1f0>)
 8005456:	4313      	orrs	r3, r2
 8005458:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800545a:	4b29      	ldr	r3, [pc, #164]	; (8005500 <HAL_RCC_ClockConfig+0x1ec>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d210      	bcs.n	800548a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005468:	4b25      	ldr	r3, [pc, #148]	; (8005500 <HAL_RCC_ClockConfig+0x1ec>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f023 0207 	bic.w	r2, r3, #7
 8005470:	4923      	ldr	r1, [pc, #140]	; (8005500 <HAL_RCC_ClockConfig+0x1ec>)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	4313      	orrs	r3, r2
 8005476:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005478:	4b21      	ldr	r3, [pc, #132]	; (8005500 <HAL_RCC_ClockConfig+0x1ec>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d001      	beq.n	800548a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e036      	b.n	80054f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	d008      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005496:	4b1b      	ldr	r3, [pc, #108]	; (8005504 <HAL_RCC_ClockConfig+0x1f0>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	4918      	ldr	r1, [pc, #96]	; (8005504 <HAL_RCC_ClockConfig+0x1f0>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d009      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054b4:	4b13      	ldr	r3, [pc, #76]	; (8005504 <HAL_RCC_ClockConfig+0x1f0>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	4910      	ldr	r1, [pc, #64]	; (8005504 <HAL_RCC_ClockConfig+0x1f0>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054c8:	f000 f824 	bl	8005514 <HAL_RCC_GetSysClockFreq>
 80054cc:	4602      	mov	r2, r0
 80054ce:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <HAL_RCC_ClockConfig+0x1f0>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	091b      	lsrs	r3, r3, #4
 80054d4:	f003 030f 	and.w	r3, r3, #15
 80054d8:	490b      	ldr	r1, [pc, #44]	; (8005508 <HAL_RCC_ClockConfig+0x1f4>)
 80054da:	5ccb      	ldrb	r3, [r1, r3]
 80054dc:	f003 031f 	and.w	r3, r3, #31
 80054e0:	fa22 f303 	lsr.w	r3, r2, r3
 80054e4:	4a09      	ldr	r2, [pc, #36]	; (800550c <HAL_RCC_ClockConfig+0x1f8>)
 80054e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054e8:	4b09      	ldr	r3, [pc, #36]	; (8005510 <HAL_RCC_ClockConfig+0x1fc>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fd f8c5 	bl	800267c <HAL_InitTick>
 80054f2:	4603      	mov	r3, r0
 80054f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80054f6:	7afb      	ldrb	r3, [r7, #11]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40022000 	.word	0x40022000
 8005504:	40021000 	.word	0x40021000
 8005508:	0800ed54 	.word	0x0800ed54
 800550c:	2000001c 	.word	0x2000001c
 8005510:	20000020 	.word	0x20000020

08005514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005514:	b480      	push	{r7}
 8005516:	b089      	sub	sp, #36	; 0x24
 8005518:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	61fb      	str	r3, [r7, #28]
 800551e:	2300      	movs	r3, #0
 8005520:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005522:	4b3e      	ldr	r3, [pc, #248]	; (800561c <HAL_RCC_GetSysClockFreq+0x108>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 030c 	and.w	r3, r3, #12
 800552a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800552c:	4b3b      	ldr	r3, [pc, #236]	; (800561c <HAL_RCC_GetSysClockFreq+0x108>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <HAL_RCC_GetSysClockFreq+0x34>
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	2b0c      	cmp	r3, #12
 8005540:	d121      	bne.n	8005586 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d11e      	bne.n	8005586 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005548:	4b34      	ldr	r3, [pc, #208]	; (800561c <HAL_RCC_GetSysClockFreq+0x108>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b00      	cmp	r3, #0
 8005552:	d107      	bne.n	8005564 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005554:	4b31      	ldr	r3, [pc, #196]	; (800561c <HAL_RCC_GetSysClockFreq+0x108>)
 8005556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800555a:	0a1b      	lsrs	r3, r3, #8
 800555c:	f003 030f 	and.w	r3, r3, #15
 8005560:	61fb      	str	r3, [r7, #28]
 8005562:	e005      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005564:	4b2d      	ldr	r3, [pc, #180]	; (800561c <HAL_RCC_GetSysClockFreq+0x108>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	091b      	lsrs	r3, r3, #4
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005570:	4a2b      	ldr	r2, [pc, #172]	; (8005620 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005578:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10d      	bne.n	800559c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005584:	e00a      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2b04      	cmp	r3, #4
 800558a:	d102      	bne.n	8005592 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800558c:	4b25      	ldr	r3, [pc, #148]	; (8005624 <HAL_RCC_GetSysClockFreq+0x110>)
 800558e:	61bb      	str	r3, [r7, #24]
 8005590:	e004      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d101      	bne.n	800559c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005598:	4b23      	ldr	r3, [pc, #140]	; (8005628 <HAL_RCC_GetSysClockFreq+0x114>)
 800559a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	2b0c      	cmp	r3, #12
 80055a0:	d134      	bne.n	800560c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055a2:	4b1e      	ldr	r3, [pc, #120]	; (800561c <HAL_RCC_GetSysClockFreq+0x108>)
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d003      	beq.n	80055ba <HAL_RCC_GetSysClockFreq+0xa6>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	d003      	beq.n	80055c0 <HAL_RCC_GetSysClockFreq+0xac>
 80055b8:	e005      	b.n	80055c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055ba:	4b1a      	ldr	r3, [pc, #104]	; (8005624 <HAL_RCC_GetSysClockFreq+0x110>)
 80055bc:	617b      	str	r3, [r7, #20]
      break;
 80055be:	e005      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055c0:	4b19      	ldr	r3, [pc, #100]	; (8005628 <HAL_RCC_GetSysClockFreq+0x114>)
 80055c2:	617b      	str	r3, [r7, #20]
      break;
 80055c4:	e002      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	617b      	str	r3, [r7, #20]
      break;
 80055ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055cc:	4b13      	ldr	r3, [pc, #76]	; (800561c <HAL_RCC_GetSysClockFreq+0x108>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	091b      	lsrs	r3, r3, #4
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	3301      	adds	r3, #1
 80055d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055da:	4b10      	ldr	r3, [pc, #64]	; (800561c <HAL_RCC_GetSysClockFreq+0x108>)
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	0a1b      	lsrs	r3, r3, #8
 80055e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	fb03 f202 	mul.w	r2, r3, r2
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055f2:	4b0a      	ldr	r3, [pc, #40]	; (800561c <HAL_RCC_GetSysClockFreq+0x108>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	0e5b      	lsrs	r3, r3, #25
 80055f8:	f003 0303 	and.w	r3, r3, #3
 80055fc:	3301      	adds	r3, #1
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	fbb2 f3f3 	udiv	r3, r2, r3
 800560a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800560c:	69bb      	ldr	r3, [r7, #24]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3724      	adds	r7, #36	; 0x24
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40021000 	.word	0x40021000
 8005620:	0800ed6c 	.word	0x0800ed6c
 8005624:	00f42400 	.word	0x00f42400
 8005628:	007a1200 	.word	0x007a1200

0800562c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005630:	4b03      	ldr	r3, [pc, #12]	; (8005640 <HAL_RCC_GetHCLKFreq+0x14>)
 8005632:	681b      	ldr	r3, [r3, #0]
}
 8005634:	4618      	mov	r0, r3
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	2000001c 	.word	0x2000001c

08005644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005648:	f7ff fff0 	bl	800562c <HAL_RCC_GetHCLKFreq>
 800564c:	4602      	mov	r2, r0
 800564e:	4b06      	ldr	r3, [pc, #24]	; (8005668 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	0a1b      	lsrs	r3, r3, #8
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	4904      	ldr	r1, [pc, #16]	; (800566c <HAL_RCC_GetPCLK1Freq+0x28>)
 800565a:	5ccb      	ldrb	r3, [r1, r3]
 800565c:	f003 031f 	and.w	r3, r3, #31
 8005660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40021000 	.word	0x40021000
 800566c:	0800ed64 	.word	0x0800ed64

08005670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005674:	f7ff ffda 	bl	800562c <HAL_RCC_GetHCLKFreq>
 8005678:	4602      	mov	r2, r0
 800567a:	4b06      	ldr	r3, [pc, #24]	; (8005694 <HAL_RCC_GetPCLK2Freq+0x24>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	0adb      	lsrs	r3, r3, #11
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	4904      	ldr	r1, [pc, #16]	; (8005698 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005686:	5ccb      	ldrb	r3, [r1, r3]
 8005688:	f003 031f 	and.w	r3, r3, #31
 800568c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005690:	4618      	mov	r0, r3
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40021000 	.word	0x40021000
 8005698:	0800ed64 	.word	0x0800ed64

0800569c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80056a4:	2300      	movs	r3, #0
 80056a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056a8:	4b2a      	ldr	r3, [pc, #168]	; (8005754 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056b4:	f7ff f9b6 	bl	8004a24 <HAL_PWREx_GetVoltageRange>
 80056b8:	6178      	str	r0, [r7, #20]
 80056ba:	e014      	b.n	80056e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056bc:	4b25      	ldr	r3, [pc, #148]	; (8005754 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c0:	4a24      	ldr	r2, [pc, #144]	; (8005754 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c6:	6593      	str	r3, [r2, #88]	; 0x58
 80056c8:	4b22      	ldr	r3, [pc, #136]	; (8005754 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056d4:	f7ff f9a6 	bl	8004a24 <HAL_PWREx_GetVoltageRange>
 80056d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056da:	4b1e      	ldr	r3, [pc, #120]	; (8005754 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056de:	4a1d      	ldr	r2, [pc, #116]	; (8005754 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ec:	d10b      	bne.n	8005706 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b80      	cmp	r3, #128	; 0x80
 80056f2:	d919      	bls.n	8005728 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2ba0      	cmp	r3, #160	; 0xa0
 80056f8:	d902      	bls.n	8005700 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056fa:	2302      	movs	r3, #2
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	e013      	b.n	8005728 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005700:	2301      	movs	r3, #1
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	e010      	b.n	8005728 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b80      	cmp	r3, #128	; 0x80
 800570a:	d902      	bls.n	8005712 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800570c:	2303      	movs	r3, #3
 800570e:	613b      	str	r3, [r7, #16]
 8005710:	e00a      	b.n	8005728 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b80      	cmp	r3, #128	; 0x80
 8005716:	d102      	bne.n	800571e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005718:	2302      	movs	r3, #2
 800571a:	613b      	str	r3, [r7, #16]
 800571c:	e004      	b.n	8005728 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b70      	cmp	r3, #112	; 0x70
 8005722:	d101      	bne.n	8005728 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005724:	2301      	movs	r3, #1
 8005726:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005728:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f023 0207 	bic.w	r2, r3, #7
 8005730:	4909      	ldr	r1, [pc, #36]	; (8005758 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	4313      	orrs	r3, r2
 8005736:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005738:	4b07      	ldr	r3, [pc, #28]	; (8005758 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	429a      	cmp	r2, r3
 8005744:	d001      	beq.n	800574a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40021000 	.word	0x40021000
 8005758:	40022000 	.word	0x40022000

0800575c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005764:	2300      	movs	r3, #0
 8005766:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005768:	2300      	movs	r3, #0
 800576a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005774:	2b00      	cmp	r3, #0
 8005776:	d031      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005780:	d01a      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005782:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005786:	d814      	bhi.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005788:	2b00      	cmp	r3, #0
 800578a:	d009      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800578c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005790:	d10f      	bne.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005792:	4b5d      	ldr	r3, [pc, #372]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	4a5c      	ldr	r2, [pc, #368]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800579c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800579e:	e00c      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3304      	adds	r3, #4
 80057a4:	2100      	movs	r1, #0
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 f9ce 	bl	8005b48 <RCCEx_PLLSAI1_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057b0:	e003      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	74fb      	strb	r3, [r7, #19]
      break;
 80057b6:	e000      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80057b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057ba:	7cfb      	ldrb	r3, [r7, #19]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10b      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057c0:	4b51      	ldr	r3, [pc, #324]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ce:	494e      	ldr	r1, [pc, #312]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057d6:	e001      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d8:	7cfb      	ldrb	r3, [r7, #19]
 80057da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 809e 	beq.w	8005926 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ea:	2300      	movs	r3, #0
 80057ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057ee:	4b46      	ldr	r3, [pc, #280]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80057fe:	2300      	movs	r3, #0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00d      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005804:	4b40      	ldr	r3, [pc, #256]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005808:	4a3f      	ldr	r2, [pc, #252]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800580a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800580e:	6593      	str	r3, [r2, #88]	; 0x58
 8005810:	4b3d      	ldr	r3, [pc, #244]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005818:	60bb      	str	r3, [r7, #8]
 800581a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800581c:	2301      	movs	r3, #1
 800581e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005820:	4b3a      	ldr	r3, [pc, #232]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a39      	ldr	r2, [pc, #228]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800582a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800582c:	f7fc ff76 	bl	800271c <HAL_GetTick>
 8005830:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005832:	e009      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005834:	f7fc ff72 	bl	800271c <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d902      	bls.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	74fb      	strb	r3, [r7, #19]
        break;
 8005846:	e005      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005848:	4b30      	ldr	r3, [pc, #192]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0ef      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005854:	7cfb      	ldrb	r3, [r7, #19]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d15a      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800585a:	4b2b      	ldr	r3, [pc, #172]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005864:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d01e      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	429a      	cmp	r2, r3
 8005874:	d019      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005876:	4b24      	ldr	r3, [pc, #144]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005880:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005882:	4b21      	ldr	r3, [pc, #132]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005888:	4a1f      	ldr	r2, [pc, #124]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800588a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800588e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005892:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005898:	4a1b      	ldr	r2, [pc, #108]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800589a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800589e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058a2:	4a19      	ldr	r2, [pc, #100]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d016      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b4:	f7fc ff32 	bl	800271c <HAL_GetTick>
 80058b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ba:	e00b      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058bc:	f7fc ff2e 	bl	800271c <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d902      	bls.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	74fb      	strb	r3, [r7, #19]
            break;
 80058d2:	e006      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058d4:	4b0c      	ldr	r3, [pc, #48]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0ec      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80058e2:	7cfb      	ldrb	r3, [r7, #19]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10b      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058e8:	4b07      	ldr	r3, [pc, #28]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f6:	4904      	ldr	r1, [pc, #16]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058fe:	e009      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005900:	7cfb      	ldrb	r3, [r7, #19]
 8005902:	74bb      	strb	r3, [r7, #18]
 8005904:	e006      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005906:	bf00      	nop
 8005908:	40021000 	.word	0x40021000
 800590c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005910:	7cfb      	ldrb	r3, [r7, #19]
 8005912:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005914:	7c7b      	ldrb	r3, [r7, #17]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d105      	bne.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800591a:	4b8a      	ldr	r3, [pc, #552]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800591c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591e:	4a89      	ldr	r2, [pc, #548]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005924:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005932:	4b84      	ldr	r3, [pc, #528]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005938:	f023 0203 	bic.w	r2, r3, #3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	4980      	ldr	r1, [pc, #512]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005942:	4313      	orrs	r3, r2
 8005944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005954:	4b7b      	ldr	r3, [pc, #492]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595a:	f023 020c 	bic.w	r2, r3, #12
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	4978      	ldr	r1, [pc, #480]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005964:	4313      	orrs	r3, r2
 8005966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005976:	4b73      	ldr	r3, [pc, #460]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005984:	496f      	ldr	r1, [pc, #444]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005986:	4313      	orrs	r3, r2
 8005988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005998:	4b6a      	ldr	r3, [pc, #424]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a6:	4967      	ldr	r1, [pc, #412]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059ba:	4b62      	ldr	r3, [pc, #392]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	495e      	ldr	r1, [pc, #376]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00a      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059dc:	4b59      	ldr	r3, [pc, #356]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ea:	4956      	ldr	r1, [pc, #344]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059fe:	4b51      	ldr	r3, [pc, #324]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	494d      	ldr	r1, [pc, #308]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d028      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a20:	4b48      	ldr	r3, [pc, #288]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	4945      	ldr	r1, [pc, #276]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a3e:	d106      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a40:	4b40      	ldr	r3, [pc, #256]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	4a3f      	ldr	r2, [pc, #252]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a4a:	60d3      	str	r3, [r2, #12]
 8005a4c:	e011      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a56:	d10c      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 f872 	bl	8005b48 <RCCEx_PLLSAI1_Config>
 8005a64:	4603      	mov	r3, r0
 8005a66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a68:	7cfb      	ldrb	r3, [r7, #19]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005a6e:	7cfb      	ldrb	r3, [r7, #19]
 8005a70:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d028      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a7e:	4b31      	ldr	r3, [pc, #196]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8c:	492d      	ldr	r1, [pc, #180]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a9c:	d106      	bne.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a9e:	4b29      	ldr	r3, [pc, #164]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	4a28      	ldr	r2, [pc, #160]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005aa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aa8:	60d3      	str	r3, [r2, #12]
 8005aaa:	e011      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ab4:	d10c      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	2101      	movs	r1, #1
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 f843 	bl	8005b48 <RCCEx_PLLSAI1_Config>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ac6:	7cfb      	ldrb	r3, [r7, #19]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005acc:	7cfb      	ldrb	r3, [r7, #19]
 8005ace:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01c      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005adc:	4b19      	ldr	r3, [pc, #100]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aea:	4916      	ldr	r1, [pc, #88]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005afa:	d10c      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3304      	adds	r3, #4
 8005b00:	2102      	movs	r1, #2
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 f820 	bl	8005b48 <RCCEx_PLLSAI1_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b0c:	7cfb      	ldrb	r3, [r7, #19]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005b12:	7cfb      	ldrb	r3, [r7, #19]
 8005b14:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b22:	4b08      	ldr	r3, [pc, #32]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b28:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b30:	4904      	ldr	r1, [pc, #16]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b38:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40021000 	.word	0x40021000

08005b48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b56:	4b74      	ldr	r3, [pc, #464]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d018      	beq.n	8005b94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b62:	4b71      	ldr	r3, [pc, #452]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f003 0203 	and.w	r2, r3, #3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d10d      	bne.n	8005b8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
       ||
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d009      	beq.n	8005b8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005b7a:	4b6b      	ldr	r3, [pc, #428]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	091b      	lsrs	r3, r3, #4
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
       ||
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d047      	beq.n	8005c1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	73fb      	strb	r3, [r7, #15]
 8005b92:	e044      	b.n	8005c1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d018      	beq.n	8005bce <RCCEx_PLLSAI1_Config+0x86>
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	d825      	bhi.n	8005bec <RCCEx_PLLSAI1_Config+0xa4>
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d002      	beq.n	8005baa <RCCEx_PLLSAI1_Config+0x62>
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d009      	beq.n	8005bbc <RCCEx_PLLSAI1_Config+0x74>
 8005ba8:	e020      	b.n	8005bec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005baa:	4b5f      	ldr	r3, [pc, #380]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d11d      	bne.n	8005bf2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bba:	e01a      	b.n	8005bf2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005bbc:	4b5a      	ldr	r3, [pc, #360]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d116      	bne.n	8005bf6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bcc:	e013      	b.n	8005bf6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005bce:	4b56      	ldr	r3, [pc, #344]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10f      	bne.n	8005bfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005bda:	4b53      	ldr	r3, [pc, #332]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bea:	e006      	b.n	8005bfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf0:	e004      	b.n	8005bfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bf2:	bf00      	nop
 8005bf4:	e002      	b.n	8005bfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bf6:	bf00      	nop
 8005bf8:	e000      	b.n	8005bfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10d      	bne.n	8005c1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c02:	4b49      	ldr	r3, [pc, #292]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6819      	ldr	r1, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	3b01      	subs	r3, #1
 8005c14:	011b      	lsls	r3, r3, #4
 8005c16:	430b      	orrs	r3, r1
 8005c18:	4943      	ldr	r1, [pc, #268]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d17c      	bne.n	8005d1e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c24:	4b40      	ldr	r3, [pc, #256]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a3f      	ldr	r2, [pc, #252]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c30:	f7fc fd74 	bl	800271c <HAL_GetTick>
 8005c34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c36:	e009      	b.n	8005c4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c38:	f7fc fd70 	bl	800271c <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d902      	bls.n	8005c4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	73fb      	strb	r3, [r7, #15]
        break;
 8005c4a:	e005      	b.n	8005c58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c4c:	4b36      	ldr	r3, [pc, #216]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1ef      	bne.n	8005c38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d15f      	bne.n	8005d1e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d110      	bne.n	8005c86 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c64:	4b30      	ldr	r3, [pc, #192]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005c6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6892      	ldr	r2, [r2, #8]
 8005c74:	0211      	lsls	r1, r2, #8
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	68d2      	ldr	r2, [r2, #12]
 8005c7a:	06d2      	lsls	r2, r2, #27
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	492a      	ldr	r1, [pc, #168]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	610b      	str	r3, [r1, #16]
 8005c84:	e027      	b.n	8005cd6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d112      	bne.n	8005cb2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c8c:	4b26      	ldr	r3, [pc, #152]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005c94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6892      	ldr	r2, [r2, #8]
 8005c9c:	0211      	lsls	r1, r2, #8
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6912      	ldr	r2, [r2, #16]
 8005ca2:	0852      	lsrs	r2, r2, #1
 8005ca4:	3a01      	subs	r2, #1
 8005ca6:	0552      	lsls	r2, r2, #21
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	491f      	ldr	r1, [pc, #124]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	610b      	str	r3, [r1, #16]
 8005cb0:	e011      	b.n	8005cd6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cb2:	4b1d      	ldr	r3, [pc, #116]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005cba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6892      	ldr	r2, [r2, #8]
 8005cc2:	0211      	lsls	r1, r2, #8
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6952      	ldr	r2, [r2, #20]
 8005cc8:	0852      	lsrs	r2, r2, #1
 8005cca:	3a01      	subs	r2, #1
 8005ccc:	0652      	lsls	r2, r2, #25
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	4915      	ldr	r1, [pc, #84]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005cd6:	4b14      	ldr	r3, [pc, #80]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a13      	ldr	r2, [pc, #76]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ce0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce2:	f7fc fd1b 	bl	800271c <HAL_GetTick>
 8005ce6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ce8:	e009      	b.n	8005cfe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cea:	f7fc fd17 	bl	800271c <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d902      	bls.n	8005cfe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	73fb      	strb	r3, [r7, #15]
          break;
 8005cfc:	e005      	b.n	8005d0a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cfe:	4b0a      	ldr	r3, [pc, #40]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0ef      	beq.n	8005cea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d106      	bne.n	8005d1e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005d10:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	4903      	ldr	r1, [pc, #12]	; (8005d28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40021000 	.word	0x40021000

08005d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e049      	b.n	8005dd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fc fafc 	bl	8002350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	f000 fa00 	bl	8006170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d001      	beq.n	8005df4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e03b      	b.n	8005e6c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a19      	ldr	r2, [pc, #100]	; (8005e78 <HAL_TIM_Base_Start_IT+0x9c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d009      	beq.n	8005e2a <HAL_TIM_Base_Start_IT+0x4e>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1e:	d004      	beq.n	8005e2a <HAL_TIM_Base_Start_IT+0x4e>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a15      	ldr	r2, [pc, #84]	; (8005e7c <HAL_TIM_Base_Start_IT+0xa0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d115      	bne.n	8005e56 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	4b13      	ldr	r3, [pc, #76]	; (8005e80 <HAL_TIM_Base_Start_IT+0xa4>)
 8005e32:	4013      	ands	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b06      	cmp	r3, #6
 8005e3a:	d015      	beq.n	8005e68 <HAL_TIM_Base_Start_IT+0x8c>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e42:	d011      	beq.n	8005e68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0201 	orr.w	r2, r2, #1
 8005e52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e54:	e008      	b.n	8005e68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f042 0201 	orr.w	r2, r2, #1
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	e000      	b.n	8005e6a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	40012c00 	.word	0x40012c00
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	00010007 	.word	0x00010007

08005e84 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0201 	bic.w	r2, r2, #1
 8005e9a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6a1a      	ldr	r2, [r3, #32]
 8005ea2:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10f      	bne.n	8005ecc <HAL_TIM_Base_Stop_IT+0x48>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6a1a      	ldr	r2, [r3, #32]
 8005eb2:	f240 4344 	movw	r3, #1092	; 0x444
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d107      	bne.n	8005ecc <HAL_TIM_Base_Stop_IT+0x48>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0201 	bic.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b082      	sub	sp, #8
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d122      	bne.n	8005f3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d11b      	bne.n	8005f3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f06f 0202 	mvn.w	r2, #2
 8005f0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d003      	beq.n	8005f2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f905 	bl	8006134 <HAL_TIM_IC_CaptureCallback>
 8005f2a:	e005      	b.n	8005f38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f8f7 	bl	8006120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f908 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b04      	cmp	r3, #4
 8005f4a:	d122      	bne.n	8005f92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d11b      	bne.n	8005f92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f06f 0204 	mvn.w	r2, #4
 8005f62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d003      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f8db 	bl	8006134 <HAL_TIM_IC_CaptureCallback>
 8005f7e:	e005      	b.n	8005f8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f8cd 	bl	8006120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f8de 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d122      	bne.n	8005fe6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f003 0308 	and.w	r3, r3, #8
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d11b      	bne.n	8005fe6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f06f 0208 	mvn.w	r2, #8
 8005fb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2204      	movs	r2, #4
 8005fbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	f003 0303 	and.w	r3, r3, #3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f8b1 	bl	8006134 <HAL_TIM_IC_CaptureCallback>
 8005fd2:	e005      	b.n	8005fe0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f8a3 	bl	8006120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f8b4 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b10      	cmp	r3, #16
 8005ff2:	d122      	bne.n	800603a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0310 	and.w	r3, r3, #16
 8005ffe:	2b10      	cmp	r3, #16
 8006000:	d11b      	bne.n	800603a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f06f 0210 	mvn.w	r2, #16
 800600a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2208      	movs	r2, #8
 8006010:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f887 	bl	8006134 <HAL_TIM_IC_CaptureCallback>
 8006026:	e005      	b.n	8006034 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f879 	bl	8006120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f88a 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b01      	cmp	r3, #1
 8006046:	d10e      	bne.n	8006066 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b01      	cmp	r3, #1
 8006054:	d107      	bne.n	8006066 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f06f 0201 	mvn.w	r2, #1
 800605e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7fb fc75 	bl	8001950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006070:	2b80      	cmp	r3, #128	; 0x80
 8006072:	d10e      	bne.n	8006092 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607e:	2b80      	cmp	r3, #128	; 0x80
 8006080:	d107      	bne.n	8006092 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800608a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f943 	bl	8006318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a0:	d10e      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ac:	2b80      	cmp	r3, #128	; 0x80
 80060ae:	d107      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f936 	bl	800632c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ca:	2b40      	cmp	r3, #64	; 0x40
 80060cc:	d10e      	bne.n	80060ec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d8:	2b40      	cmp	r3, #64	; 0x40
 80060da:	d107      	bne.n	80060ec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f838 	bl	800615c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	d10e      	bne.n	8006118 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b20      	cmp	r3, #32
 8006106:	d107      	bne.n	8006118 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0220 	mvn.w	r2, #32
 8006110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f8f6 	bl	8006304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006118:	bf00      	nop
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a2a      	ldr	r2, [pc, #168]	; (800622c <TIM_Base_SetConfig+0xbc>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_Base_SetConfig+0x20>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800618e:	d108      	bne.n	80061a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a21      	ldr	r2, [pc, #132]	; (800622c <TIM_Base_SetConfig+0xbc>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00b      	beq.n	80061c2 <TIM_Base_SetConfig+0x52>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b0:	d007      	beq.n	80061c2 <TIM_Base_SetConfig+0x52>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a1e      	ldr	r2, [pc, #120]	; (8006230 <TIM_Base_SetConfig+0xc0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d003      	beq.n	80061c2 <TIM_Base_SetConfig+0x52>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a1d      	ldr	r2, [pc, #116]	; (8006234 <TIM_Base_SetConfig+0xc4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d108      	bne.n	80061d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a0c      	ldr	r2, [pc, #48]	; (800622c <TIM_Base_SetConfig+0xbc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d007      	beq.n	8006210 <TIM_Base_SetConfig+0xa0>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a0b      	ldr	r2, [pc, #44]	; (8006230 <TIM_Base_SetConfig+0xc0>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d003      	beq.n	8006210 <TIM_Base_SetConfig+0xa0>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a0a      	ldr	r2, [pc, #40]	; (8006234 <TIM_Base_SetConfig+0xc4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d103      	bne.n	8006218 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	691a      	ldr	r2, [r3, #16]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	615a      	str	r2, [r3, #20]
}
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	40012c00 	.word	0x40012c00
 8006230:	40014000 	.word	0x40014000
 8006234:	40014400 	.word	0x40014400

08006238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800624c:	2302      	movs	r3, #2
 800624e:	e04f      	b.n	80062f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a21      	ldr	r2, [pc, #132]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d108      	bne.n	800628c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006280:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a14      	ldr	r2, [pc, #80]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d009      	beq.n	80062c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b8:	d004      	beq.n	80062c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a10      	ldr	r2, [pc, #64]	; (8006300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d10c      	bne.n	80062de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	40012c00 	.word	0x40012c00
 8006300:	40014000 	.word	0x40014000

08006304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e040      	b.n	80063d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006356:	2b00      	cmp	r3, #0
 8006358:	d106      	bne.n	8006368 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fc f896 	bl	8002494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2224      	movs	r2, #36	; 0x24
 800636c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0201 	bic.w	r2, r2, #1
 800637c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fc18 	bl	8006bb4 <UART_SetConfig>
 8006384:	4603      	mov	r3, r0
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e022      	b.n	80063d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fe38 	bl	800700c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0201 	orr.w	r2, r2, #1
 80063ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 febf 	bl	8007150 <UART_CheckIdleState>
 80063d2:	4603      	mov	r3, r0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	; 0x28
 80063e0:	af02      	add	r7, sp, #8
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	4613      	mov	r3, r2
 80063ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	f040 8082 	bne.w	80064fa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <HAL_UART_Transmit+0x26>
 80063fc:	88fb      	ldrh	r3, [r7, #6]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e07a      	b.n	80064fc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_UART_Transmit+0x38>
 8006410:	2302      	movs	r3, #2
 8006412:	e073      	b.n	80064fc <HAL_UART_Transmit+0x120>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2221      	movs	r2, #33	; 0x21
 8006428:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800642a:	f7fc f977 	bl	800271c <HAL_GetTick>
 800642e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	88fa      	ldrh	r2, [r7, #6]
 8006434:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	88fa      	ldrh	r2, [r7, #6]
 800643c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006448:	d108      	bne.n	800645c <HAL_UART_Transmit+0x80>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d104      	bne.n	800645c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006452:	2300      	movs	r3, #0
 8006454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	61bb      	str	r3, [r7, #24]
 800645a:	e003      	b.n	8006464 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006460:	2300      	movs	r3, #0
 8006462:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800646c:	e02d      	b.n	80064ca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2200      	movs	r2, #0
 8006476:	2180      	movs	r1, #128	; 0x80
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 feb2 	bl	80071e2 <UART_WaitOnFlagUntilTimeout>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e039      	b.n	80064fc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10b      	bne.n	80064a6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	881a      	ldrh	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800649a:	b292      	uxth	r2, r2
 800649c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	3302      	adds	r3, #2
 80064a2:	61bb      	str	r3, [r7, #24]
 80064a4:	e008      	b.n	80064b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	781a      	ldrb	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	b292      	uxth	r2, r2
 80064b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	3301      	adds	r3, #1
 80064b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064be:	b29b      	uxth	r3, r3
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1cb      	bne.n	800646e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2200      	movs	r2, #0
 80064de:	2140      	movs	r1, #64	; 0x40
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 fe7e 	bl	80071e2 <UART_WaitOnFlagUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e005      	b.n	80064fc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2220      	movs	r2, #32
 80064f4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	e000      	b.n	80064fc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80064fa:	2302      	movs	r3, #2
  }
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3720      	adds	r7, #32
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08a      	sub	sp, #40	; 0x28
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	4613      	mov	r3, r2
 8006510:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006516:	2b20      	cmp	r3, #32
 8006518:	d142      	bne.n	80065a0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_UART_Receive_IT+0x22>
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e03b      	b.n	80065a2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_UART_Receive_IT+0x34>
 8006534:	2302      	movs	r3, #2
 8006536:	e034      	b.n	80065a2 <HAL_UART_Receive_IT+0x9e>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a18      	ldr	r2, [pc, #96]	; (80065ac <HAL_UART_Receive_IT+0xa8>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d01f      	beq.n	8006590 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d018      	beq.n	8006590 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	e853 3f00 	ldrex	r3, [r3]
 800656a:	613b      	str	r3, [r7, #16]
   return(result);
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	623b      	str	r3, [r7, #32]
 800657e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006580:	69f9      	ldr	r1, [r7, #28]
 8006582:	6a3a      	ldr	r2, [r7, #32]
 8006584:	e841 2300 	strex	r3, r2, [r1]
 8006588:	61bb      	str	r3, [r7, #24]
   return(result);
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1e6      	bne.n	800655e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006590:	88fb      	ldrh	r3, [r7, #6]
 8006592:	461a      	mov	r2, r3
 8006594:	68b9      	ldr	r1, [r7, #8]
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fee8 	bl	800736c <UART_Start_Receive_IT>
 800659c:	4603      	mov	r3, r0
 800659e:	e000      	b.n	80065a2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80065a0:	2302      	movs	r3, #2
  }
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3728      	adds	r7, #40	; 0x28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	40008000 	.word	0x40008000

080065b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b0ba      	sub	sp, #232	; 0xe8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80065da:	f640 030f 	movw	r3, #2063	; 0x80f
 80065de:	4013      	ands	r3, r2
 80065e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80065e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d115      	bne.n	8006618 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80065ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00f      	beq.n	8006618 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065fc:	f003 0320 	and.w	r3, r3, #32
 8006600:	2b00      	cmp	r3, #0
 8006602:	d009      	beq.n	8006618 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 82a6 	beq.w	8006b5a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	4798      	blx	r3
      }
      return;
 8006616:	e2a0      	b.n	8006b5a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8117 	beq.w	8006850 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d106      	bne.n	800663c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800662e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006632:	4b85      	ldr	r3, [pc, #532]	; (8006848 <HAL_UART_IRQHandler+0x298>)
 8006634:	4013      	ands	r3, r2
 8006636:	2b00      	cmp	r3, #0
 8006638:	f000 810a 	beq.w	8006850 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800663c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d011      	beq.n	800666c <HAL_UART_IRQHandler+0xbc>
 8006648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00b      	beq.n	800666c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2201      	movs	r2, #1
 800665a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006662:	f043 0201 	orr.w	r2, r3, #1
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800666c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d011      	beq.n	800669c <HAL_UART_IRQHandler+0xec>
 8006678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00b      	beq.n	800669c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2202      	movs	r2, #2
 800668a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006692:	f043 0204 	orr.w	r2, r3, #4
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800669c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d011      	beq.n	80066cc <HAL_UART_IRQHandler+0x11c>
 80066a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2204      	movs	r2, #4
 80066ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066c2:	f043 0202 	orr.w	r2, r3, #2
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d0:	f003 0308 	and.w	r3, r3, #8
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d017      	beq.n	8006708 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066dc:	f003 0320 	and.w	r3, r3, #32
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d105      	bne.n	80066f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80066e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00b      	beq.n	8006708 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2208      	movs	r2, #8
 80066f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066fe:	f043 0208 	orr.w	r2, r3, #8
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006710:	2b00      	cmp	r3, #0
 8006712:	d012      	beq.n	800673a <HAL_UART_IRQHandler+0x18a>
 8006714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00c      	beq.n	800673a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006728:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006730:	f043 0220 	orr.w	r2, r3, #32
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 820c 	beq.w	8006b5e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00d      	beq.n	800676e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b00      	cmp	r3, #0
 800675c:	d007      	beq.n	800676e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006774:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006782:	2b40      	cmp	r3, #64	; 0x40
 8006784:	d005      	beq.n	8006792 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800678a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800678e:	2b00      	cmp	r3, #0
 8006790:	d04f      	beq.n	8006832 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 feb4 	bl	8007500 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a2:	2b40      	cmp	r3, #64	; 0x40
 80067a4:	d141      	bne.n	800682a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3308      	adds	r3, #8
 80067ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3308      	adds	r3, #8
 80067ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1d9      	bne.n	80067a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d013      	beq.n	8006822 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fe:	4a13      	ldr	r2, [pc, #76]	; (800684c <HAL_UART_IRQHandler+0x29c>)
 8006800:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006806:	4618      	mov	r0, r3
 8006808:	f7fd f97d 	bl	8003b06 <HAL_DMA_Abort_IT>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d017      	beq.n	8006842 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800681c:	4610      	mov	r0, r2
 800681e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006820:	e00f      	b.n	8006842 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f9b0 	bl	8006b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006828:	e00b      	b.n	8006842 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f9ac 	bl	8006b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006830:	e007      	b.n	8006842 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f9a8 	bl	8006b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006840:	e18d      	b.n	8006b5e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006842:	bf00      	nop
    return;
 8006844:	e18b      	b.n	8006b5e <HAL_UART_IRQHandler+0x5ae>
 8006846:	bf00      	nop
 8006848:	04000120 	.word	0x04000120
 800684c:	080075c7 	.word	0x080075c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006854:	2b01      	cmp	r3, #1
 8006856:	f040 8146 	bne.w	8006ae6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800685a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685e:	f003 0310 	and.w	r3, r3, #16
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 813f 	beq.w	8006ae6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800686c:	f003 0310 	and.w	r3, r3, #16
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 8138 	beq.w	8006ae6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2210      	movs	r2, #16
 800687c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006888:	2b40      	cmp	r3, #64	; 0x40
 800688a:	f040 80b4 	bne.w	80069f6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800689a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 815f 	beq.w	8006b62 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80068aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068ae:	429a      	cmp	r2, r3
 80068b0:	f080 8157 	bcs.w	8006b62 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0320 	and.w	r3, r3, #32
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f040 8085 	bne.w	80069da <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	461a      	mov	r2, r3
 80068f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80068fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006906:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006912:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1da      	bne.n	80068d0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3308      	adds	r3, #8
 8006920:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800692a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800692c:	f023 0301 	bic.w	r3, r3, #1
 8006930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3308      	adds	r3, #8
 800693a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800693e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006942:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006946:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e1      	bne.n	800691a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3308      	adds	r3, #8
 800695c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800696c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3308      	adds	r3, #8
 8006976:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800697a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800697c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006980:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e3      	bne.n	8006956 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2220      	movs	r2, #32
 8006992:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a2:	e853 3f00 	ldrex	r3, [r3]
 80069a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069aa:	f023 0310 	bic.w	r3, r3, #16
 80069ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80069be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e4      	bne.n	800699a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fd f858 	bl	8003a8a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f8d4 	bl	8006b9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069f4:	e0b5      	b.n	8006b62 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 80a7 	beq.w	8006b66 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 80a2 	beq.w	8006b66 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	e853 3f00 	ldrex	r3, [r3]
 8006a2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a44:	647b      	str	r3, [r7, #68]	; 0x44
 8006a46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a4c:	e841 2300 	strex	r3, r2, [r1]
 8006a50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1e4      	bne.n	8006a22 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	e853 3f00 	ldrex	r3, [r3]
 8006a66:	623b      	str	r3, [r7, #32]
   return(result);
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	f023 0301 	bic.w	r3, r3, #1
 8006a6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3308      	adds	r3, #8
 8006a78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a7c:	633a      	str	r2, [r7, #48]	; 0x30
 8006a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a84:	e841 2300 	strex	r3, r2, [r1]
 8006a88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e3      	bne.n	8006a58 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	e853 3f00 	ldrex	r3, [r3]
 8006aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 0310 	bic.w	r3, r3, #16
 8006ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ac4:	61fb      	str	r3, [r7, #28]
 8006ac6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	69b9      	ldr	r1, [r7, #24]
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e4      	bne.n	8006aa2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ad8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f85c 	bl	8006b9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ae4:	e03f      	b.n	8006b66 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00e      	beq.n	8006b10 <HAL_UART_IRQHandler+0x560>
 8006af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d008      	beq.n	8006b10 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fefc 	bl	8007906 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b0e:	e02d      	b.n	8006b6c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00e      	beq.n	8006b3a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d008      	beq.n	8006b3a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01c      	beq.n	8006b6a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	4798      	blx	r3
    }
    return;
 8006b38:	e017      	b.n	8006b6a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d012      	beq.n	8006b6c <HAL_UART_IRQHandler+0x5bc>
 8006b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00c      	beq.n	8006b6c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fd4d 	bl	80075f2 <UART_EndTransmit_IT>
    return;
 8006b58:	e008      	b.n	8006b6c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006b5a:	bf00      	nop
 8006b5c:	e006      	b.n	8006b6c <HAL_UART_IRQHandler+0x5bc>
    return;
 8006b5e:	bf00      	nop
 8006b60:	e004      	b.n	8006b6c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006b62:	bf00      	nop
 8006b64:	e002      	b.n	8006b6c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006b66:	bf00      	nop
 8006b68:	e000      	b.n	8006b6c <HAL_UART_IRQHandler+0x5bc>
    return;
 8006b6a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006b6c:	37e8      	adds	r7, #232	; 0xe8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop

08006b74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bb8:	b08a      	sub	sp, #40	; 0x28
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	4bb4      	ldr	r3, [pc, #720]	; (8006eb4 <UART_SetConfig+0x300>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	6812      	ldr	r2, [r2, #0]
 8006bea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bec:	430b      	orrs	r3, r1
 8006bee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	68da      	ldr	r2, [r3, #12]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4aa9      	ldr	r2, [pc, #676]	; (8006eb8 <UART_SetConfig+0x304>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d004      	beq.n	8006c20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c30:	430a      	orrs	r2, r1
 8006c32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4aa0      	ldr	r2, [pc, #640]	; (8006ebc <UART_SetConfig+0x308>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d126      	bne.n	8006c8c <UART_SetConfig+0xd8>
 8006c3e:	4ba0      	ldr	r3, [pc, #640]	; (8006ec0 <UART_SetConfig+0x30c>)
 8006c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c44:	f003 0303 	and.w	r3, r3, #3
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d81b      	bhi.n	8006c84 <UART_SetConfig+0xd0>
 8006c4c:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <UART_SetConfig+0xa0>)
 8006c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c52:	bf00      	nop
 8006c54:	08006c65 	.word	0x08006c65
 8006c58:	08006c75 	.word	0x08006c75
 8006c5c:	08006c6d 	.word	0x08006c6d
 8006c60:	08006c7d 	.word	0x08006c7d
 8006c64:	2301      	movs	r3, #1
 8006c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c6a:	e080      	b.n	8006d6e <UART_SetConfig+0x1ba>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c72:	e07c      	b.n	8006d6e <UART_SetConfig+0x1ba>
 8006c74:	2304      	movs	r3, #4
 8006c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7a:	e078      	b.n	8006d6e <UART_SetConfig+0x1ba>
 8006c7c:	2308      	movs	r3, #8
 8006c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c82:	e074      	b.n	8006d6e <UART_SetConfig+0x1ba>
 8006c84:	2310      	movs	r3, #16
 8006c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c8a:	e070      	b.n	8006d6e <UART_SetConfig+0x1ba>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a8c      	ldr	r2, [pc, #560]	; (8006ec4 <UART_SetConfig+0x310>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d138      	bne.n	8006d08 <UART_SetConfig+0x154>
 8006c96:	4b8a      	ldr	r3, [pc, #552]	; (8006ec0 <UART_SetConfig+0x30c>)
 8006c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c9c:	f003 030c 	and.w	r3, r3, #12
 8006ca0:	2b0c      	cmp	r3, #12
 8006ca2:	d82d      	bhi.n	8006d00 <UART_SetConfig+0x14c>
 8006ca4:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <UART_SetConfig+0xf8>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006ce1 	.word	0x08006ce1
 8006cb0:	08006d01 	.word	0x08006d01
 8006cb4:	08006d01 	.word	0x08006d01
 8006cb8:	08006d01 	.word	0x08006d01
 8006cbc:	08006cf1 	.word	0x08006cf1
 8006cc0:	08006d01 	.word	0x08006d01
 8006cc4:	08006d01 	.word	0x08006d01
 8006cc8:	08006d01 	.word	0x08006d01
 8006ccc:	08006ce9 	.word	0x08006ce9
 8006cd0:	08006d01 	.word	0x08006d01
 8006cd4:	08006d01 	.word	0x08006d01
 8006cd8:	08006d01 	.word	0x08006d01
 8006cdc:	08006cf9 	.word	0x08006cf9
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce6:	e042      	b.n	8006d6e <UART_SetConfig+0x1ba>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cee:	e03e      	b.n	8006d6e <UART_SetConfig+0x1ba>
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cf6:	e03a      	b.n	8006d6e <UART_SetConfig+0x1ba>
 8006cf8:	2308      	movs	r3, #8
 8006cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cfe:	e036      	b.n	8006d6e <UART_SetConfig+0x1ba>
 8006d00:	2310      	movs	r3, #16
 8006d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d06:	e032      	b.n	8006d6e <UART_SetConfig+0x1ba>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a6a      	ldr	r2, [pc, #424]	; (8006eb8 <UART_SetConfig+0x304>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d12a      	bne.n	8006d68 <UART_SetConfig+0x1b4>
 8006d12:	4b6b      	ldr	r3, [pc, #428]	; (8006ec0 <UART_SetConfig+0x30c>)
 8006d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d20:	d01a      	beq.n	8006d58 <UART_SetConfig+0x1a4>
 8006d22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d26:	d81b      	bhi.n	8006d60 <UART_SetConfig+0x1ac>
 8006d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d2c:	d00c      	beq.n	8006d48 <UART_SetConfig+0x194>
 8006d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d32:	d815      	bhi.n	8006d60 <UART_SetConfig+0x1ac>
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <UART_SetConfig+0x18c>
 8006d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d3c:	d008      	beq.n	8006d50 <UART_SetConfig+0x19c>
 8006d3e:	e00f      	b.n	8006d60 <UART_SetConfig+0x1ac>
 8006d40:	2300      	movs	r3, #0
 8006d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d46:	e012      	b.n	8006d6e <UART_SetConfig+0x1ba>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d4e:	e00e      	b.n	8006d6e <UART_SetConfig+0x1ba>
 8006d50:	2304      	movs	r3, #4
 8006d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d56:	e00a      	b.n	8006d6e <UART_SetConfig+0x1ba>
 8006d58:	2308      	movs	r3, #8
 8006d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d5e:	e006      	b.n	8006d6e <UART_SetConfig+0x1ba>
 8006d60:	2310      	movs	r3, #16
 8006d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d66:	e002      	b.n	8006d6e <UART_SetConfig+0x1ba>
 8006d68:	2310      	movs	r3, #16
 8006d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a51      	ldr	r2, [pc, #324]	; (8006eb8 <UART_SetConfig+0x304>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d17a      	bne.n	8006e6e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d7c:	2b08      	cmp	r3, #8
 8006d7e:	d824      	bhi.n	8006dca <UART_SetConfig+0x216>
 8006d80:	a201      	add	r2, pc, #4	; (adr r2, 8006d88 <UART_SetConfig+0x1d4>)
 8006d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d86:	bf00      	nop
 8006d88:	08006dad 	.word	0x08006dad
 8006d8c:	08006dcb 	.word	0x08006dcb
 8006d90:	08006db5 	.word	0x08006db5
 8006d94:	08006dcb 	.word	0x08006dcb
 8006d98:	08006dbb 	.word	0x08006dbb
 8006d9c:	08006dcb 	.word	0x08006dcb
 8006da0:	08006dcb 	.word	0x08006dcb
 8006da4:	08006dcb 	.word	0x08006dcb
 8006da8:	08006dc3 	.word	0x08006dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dac:	f7fe fc4a 	bl	8005644 <HAL_RCC_GetPCLK1Freq>
 8006db0:	61f8      	str	r0, [r7, #28]
        break;
 8006db2:	e010      	b.n	8006dd6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006db4:	4b44      	ldr	r3, [pc, #272]	; (8006ec8 <UART_SetConfig+0x314>)
 8006db6:	61fb      	str	r3, [r7, #28]
        break;
 8006db8:	e00d      	b.n	8006dd6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dba:	f7fe fbab 	bl	8005514 <HAL_RCC_GetSysClockFreq>
 8006dbe:	61f8      	str	r0, [r7, #28]
        break;
 8006dc0:	e009      	b.n	8006dd6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dc6:	61fb      	str	r3, [r7, #28]
        break;
 8006dc8:	e005      	b.n	8006dd6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006dd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 8107 	beq.w	8006fec <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	4413      	add	r3, r2
 8006de8:	69fa      	ldr	r2, [r7, #28]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d305      	bcc.n	8006dfa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006df4:	69fa      	ldr	r2, [r7, #28]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d903      	bls.n	8006e02 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e00:	e0f4      	b.n	8006fec <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	2200      	movs	r2, #0
 8006e06:	461c      	mov	r4, r3
 8006e08:	4615      	mov	r5, r2
 8006e0a:	f04f 0200 	mov.w	r2, #0
 8006e0e:	f04f 0300 	mov.w	r3, #0
 8006e12:	022b      	lsls	r3, r5, #8
 8006e14:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006e18:	0222      	lsls	r2, r4, #8
 8006e1a:	68f9      	ldr	r1, [r7, #12]
 8006e1c:	6849      	ldr	r1, [r1, #4]
 8006e1e:	0849      	lsrs	r1, r1, #1
 8006e20:	2000      	movs	r0, #0
 8006e22:	4688      	mov	r8, r1
 8006e24:	4681      	mov	r9, r0
 8006e26:	eb12 0a08 	adds.w	sl, r2, r8
 8006e2a:	eb43 0b09 	adc.w	fp, r3, r9
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	603b      	str	r3, [r7, #0]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e3c:	4650      	mov	r0, sl
 8006e3e:	4659      	mov	r1, fp
 8006e40:	f7f9 ff22 	bl	8000c88 <__aeabi_uldivmod>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4613      	mov	r3, r2
 8006e4a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e52:	d308      	bcc.n	8006e66 <UART_SetConfig+0x2b2>
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e5a:	d204      	bcs.n	8006e66 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	60da      	str	r2, [r3, #12]
 8006e64:	e0c2      	b.n	8006fec <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e6c:	e0be      	b.n	8006fec <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e76:	d16a      	bne.n	8006f4e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006e78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d834      	bhi.n	8006eea <UART_SetConfig+0x336>
 8006e80:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <UART_SetConfig+0x2d4>)
 8006e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e86:	bf00      	nop
 8006e88:	08006ead 	.word	0x08006ead
 8006e8c:	08006ecd 	.word	0x08006ecd
 8006e90:	08006ed5 	.word	0x08006ed5
 8006e94:	08006eeb 	.word	0x08006eeb
 8006e98:	08006edb 	.word	0x08006edb
 8006e9c:	08006eeb 	.word	0x08006eeb
 8006ea0:	08006eeb 	.word	0x08006eeb
 8006ea4:	08006eeb 	.word	0x08006eeb
 8006ea8:	08006ee3 	.word	0x08006ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eac:	f7fe fbca 	bl	8005644 <HAL_RCC_GetPCLK1Freq>
 8006eb0:	61f8      	str	r0, [r7, #28]
        break;
 8006eb2:	e020      	b.n	8006ef6 <UART_SetConfig+0x342>
 8006eb4:	efff69f3 	.word	0xefff69f3
 8006eb8:	40008000 	.word	0x40008000
 8006ebc:	40013800 	.word	0x40013800
 8006ec0:	40021000 	.word	0x40021000
 8006ec4:	40004400 	.word	0x40004400
 8006ec8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ecc:	f7fe fbd0 	bl	8005670 <HAL_RCC_GetPCLK2Freq>
 8006ed0:	61f8      	str	r0, [r7, #28]
        break;
 8006ed2:	e010      	b.n	8006ef6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ed4:	4b4c      	ldr	r3, [pc, #304]	; (8007008 <UART_SetConfig+0x454>)
 8006ed6:	61fb      	str	r3, [r7, #28]
        break;
 8006ed8:	e00d      	b.n	8006ef6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eda:	f7fe fb1b 	bl	8005514 <HAL_RCC_GetSysClockFreq>
 8006ede:	61f8      	str	r0, [r7, #28]
        break;
 8006ee0:	e009      	b.n	8006ef6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ee6:	61fb      	str	r3, [r7, #28]
        break;
 8006ee8:	e005      	b.n	8006ef6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ef4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d077      	beq.n	8006fec <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	005a      	lsls	r2, r3, #1
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	085b      	lsrs	r3, r3, #1
 8006f06:	441a      	add	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f10:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	2b0f      	cmp	r3, #15
 8006f16:	d916      	bls.n	8006f46 <UART_SetConfig+0x392>
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f1e:	d212      	bcs.n	8006f46 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	f023 030f 	bic.w	r3, r3, #15
 8006f28:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	085b      	lsrs	r3, r3, #1
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f003 0307 	and.w	r3, r3, #7
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	8afb      	ldrh	r3, [r7, #22]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	8afa      	ldrh	r2, [r7, #22]
 8006f42:	60da      	str	r2, [r3, #12]
 8006f44:	e052      	b.n	8006fec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f4c:	e04e      	b.n	8006fec <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f52:	2b08      	cmp	r3, #8
 8006f54:	d827      	bhi.n	8006fa6 <UART_SetConfig+0x3f2>
 8006f56:	a201      	add	r2, pc, #4	; (adr r2, 8006f5c <UART_SetConfig+0x3a8>)
 8006f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5c:	08006f81 	.word	0x08006f81
 8006f60:	08006f89 	.word	0x08006f89
 8006f64:	08006f91 	.word	0x08006f91
 8006f68:	08006fa7 	.word	0x08006fa7
 8006f6c:	08006f97 	.word	0x08006f97
 8006f70:	08006fa7 	.word	0x08006fa7
 8006f74:	08006fa7 	.word	0x08006fa7
 8006f78:	08006fa7 	.word	0x08006fa7
 8006f7c:	08006f9f 	.word	0x08006f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f80:	f7fe fb60 	bl	8005644 <HAL_RCC_GetPCLK1Freq>
 8006f84:	61f8      	str	r0, [r7, #28]
        break;
 8006f86:	e014      	b.n	8006fb2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f88:	f7fe fb72 	bl	8005670 <HAL_RCC_GetPCLK2Freq>
 8006f8c:	61f8      	str	r0, [r7, #28]
        break;
 8006f8e:	e010      	b.n	8006fb2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f90:	4b1d      	ldr	r3, [pc, #116]	; (8007008 <UART_SetConfig+0x454>)
 8006f92:	61fb      	str	r3, [r7, #28]
        break;
 8006f94:	e00d      	b.n	8006fb2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f96:	f7fe fabd 	bl	8005514 <HAL_RCC_GetSysClockFreq>
 8006f9a:	61f8      	str	r0, [r7, #28]
        break;
 8006f9c:	e009      	b.n	8006fb2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fa2:	61fb      	str	r3, [r7, #28]
        break;
 8006fa4:	e005      	b.n	8006fb2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006fb0:	bf00      	nop
    }

    if (pclk != 0U)
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d019      	beq.n	8006fec <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	085a      	lsrs	r2, r3, #1
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	441a      	add	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	2b0f      	cmp	r3, #15
 8006fd0:	d909      	bls.n	8006fe6 <UART_SetConfig+0x432>
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd8:	d205      	bcs.n	8006fe6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	60da      	str	r2, [r3, #12]
 8006fe4:	e002      	b.n	8006fec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ff8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3728      	adds	r7, #40	; 0x28
 8007000:	46bd      	mov	sp, r7
 8007002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007006:	bf00      	nop
 8007008:	00f42400 	.word	0x00f42400

0800700c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00a      	beq.n	8007036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00a      	beq.n	800707a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	f003 0308 	and.w	r3, r3, #8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	f003 0310 	and.w	r3, r3, #16
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00a      	beq.n	80070be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	f003 0320 	and.w	r3, r3, #32
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d01a      	beq.n	8007122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800710a:	d10a      	bne.n	8007122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	605a      	str	r2, [r3, #4]
  }
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af02      	add	r7, sp, #8
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007160:	f7fb fadc 	bl	800271c <HAL_GetTick>
 8007164:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0308 	and.w	r3, r3, #8
 8007170:	2b08      	cmp	r3, #8
 8007172:	d10e      	bne.n	8007192 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f82d 	bl	80071e2 <UART_WaitOnFlagUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e023      	b.n	80071da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b04      	cmp	r3, #4
 800719e:	d10e      	bne.n	80071be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f817 	bl	80071e2 <UART_WaitOnFlagUntilTimeout>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e00d      	b.n	80071da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2220      	movs	r2, #32
 80071c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2220      	movs	r2, #32
 80071c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b09c      	sub	sp, #112	; 0x70
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	603b      	str	r3, [r7, #0]
 80071ee:	4613      	mov	r3, r2
 80071f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071f2:	e0a5      	b.n	8007340 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fa:	f000 80a1 	beq.w	8007340 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fe:	f7fb fa8d 	bl	800271c <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800720a:	429a      	cmp	r2, r3
 800720c:	d302      	bcc.n	8007214 <UART_WaitOnFlagUntilTimeout+0x32>
 800720e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007210:	2b00      	cmp	r3, #0
 8007212:	d13e      	bne.n	8007292 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800721c:	e853 3f00 	ldrex	r3, [r3]
 8007220:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007224:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007228:	667b      	str	r3, [r7, #100]	; 0x64
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	461a      	mov	r2, r3
 8007230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007232:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007234:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007238:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800723a:	e841 2300 	strex	r3, r2, [r1]
 800723e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1e6      	bne.n	8007214 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3308      	adds	r3, #8
 800724c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007250:	e853 3f00 	ldrex	r3, [r3]
 8007254:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007258:	f023 0301 	bic.w	r3, r3, #1
 800725c:	663b      	str	r3, [r7, #96]	; 0x60
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3308      	adds	r3, #8
 8007264:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007266:	64ba      	str	r2, [r7, #72]	; 0x48
 8007268:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800726c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800726e:	e841 2300 	strex	r3, r2, [r1]
 8007272:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1e5      	bne.n	8007246 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2220      	movs	r2, #32
 800727e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2220      	movs	r2, #32
 8007284:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e067      	b.n	8007362 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0304 	and.w	r3, r3, #4
 800729c:	2b00      	cmp	r3, #0
 800729e:	d04f      	beq.n	8007340 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072ae:	d147      	bne.n	8007340 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	e853 3f00 	ldrex	r3, [r3]
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	461a      	mov	r2, r3
 80072d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d8:	637b      	str	r3, [r7, #52]	; 0x34
 80072da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072e0:	e841 2300 	strex	r3, r2, [r1]
 80072e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1e6      	bne.n	80072ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3308      	adds	r3, #8
 80072f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	e853 3f00 	ldrex	r3, [r3]
 80072fa:	613b      	str	r3, [r7, #16]
   return(result);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f023 0301 	bic.w	r3, r3, #1
 8007302:	66bb      	str	r3, [r7, #104]	; 0x68
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3308      	adds	r3, #8
 800730a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800730c:	623a      	str	r2, [r7, #32]
 800730e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007310:	69f9      	ldr	r1, [r7, #28]
 8007312:	6a3a      	ldr	r2, [r7, #32]
 8007314:	e841 2300 	strex	r3, r2, [r1]
 8007318:	61bb      	str	r3, [r7, #24]
   return(result);
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1e5      	bne.n	80072ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2220      	movs	r2, #32
 8007324:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2220      	movs	r2, #32
 800732a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2220      	movs	r2, #32
 8007330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e010      	b.n	8007362 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	69da      	ldr	r2, [r3, #28]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	4013      	ands	r3, r2
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	429a      	cmp	r2, r3
 800734e:	bf0c      	ite	eq
 8007350:	2301      	moveq	r3, #1
 8007352:	2300      	movne	r3, #0
 8007354:	b2db      	uxtb	r3, r3
 8007356:	461a      	mov	r2, r3
 8007358:	79fb      	ldrb	r3, [r7, #7]
 800735a:	429a      	cmp	r2, r3
 800735c:	f43f af4a 	beq.w	80071f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3770      	adds	r7, #112	; 0x70
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800736c:	b480      	push	{r7}
 800736e:	b097      	sub	sp, #92	; 0x5c
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	4613      	mov	r3, r2
 8007378:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	88fa      	ldrh	r2, [r7, #6]
 8007384:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	88fa      	ldrh	r2, [r7, #6]
 800738c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800739e:	d10e      	bne.n	80073be <UART_Start_Receive_IT+0x52>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d105      	bne.n	80073b4 <UART_Start_Receive_IT+0x48>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80073ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073b2:	e02d      	b.n	8007410 <UART_Start_Receive_IT+0xa4>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	22ff      	movs	r2, #255	; 0xff
 80073b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073bc:	e028      	b.n	8007410 <UART_Start_Receive_IT+0xa4>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10d      	bne.n	80073e2 <UART_Start_Receive_IT+0x76>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d104      	bne.n	80073d8 <UART_Start_Receive_IT+0x6c>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	22ff      	movs	r2, #255	; 0xff
 80073d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073d6:	e01b      	b.n	8007410 <UART_Start_Receive_IT+0xa4>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	227f      	movs	r2, #127	; 0x7f
 80073dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073e0:	e016      	b.n	8007410 <UART_Start_Receive_IT+0xa4>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073ea:	d10d      	bne.n	8007408 <UART_Start_Receive_IT+0x9c>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d104      	bne.n	80073fe <UART_Start_Receive_IT+0x92>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	227f      	movs	r2, #127	; 0x7f
 80073f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073fc:	e008      	b.n	8007410 <UART_Start_Receive_IT+0xa4>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	223f      	movs	r2, #63	; 0x3f
 8007402:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007406:	e003      	b.n	8007410 <UART_Start_Receive_IT+0xa4>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2222      	movs	r2, #34	; 0x22
 800741c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3308      	adds	r3, #8
 8007424:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800742e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007430:	f043 0301 	orr.w	r3, r3, #1
 8007434:	657b      	str	r3, [r7, #84]	; 0x54
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3308      	adds	r3, #8
 800743c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800743e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007440:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007442:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800744c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e5      	bne.n	800741e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800745a:	d107      	bne.n	800746c <UART_Start_Receive_IT+0x100>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d103      	bne.n	800746c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4a24      	ldr	r2, [pc, #144]	; (80074f8 <UART_Start_Receive_IT+0x18c>)
 8007468:	665a      	str	r2, [r3, #100]	; 0x64
 800746a:	e002      	b.n	8007472 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	4a23      	ldr	r2, [pc, #140]	; (80074fc <UART_Start_Receive_IT+0x190>)
 8007470:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d019      	beq.n	80074b6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a0:	637b      	str	r3, [r7, #52]	; 0x34
 80074a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e6      	bne.n	8007482 <UART_Start_Receive_IT+0x116>
 80074b4:	e018      	b.n	80074e8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	e853 3f00 	ldrex	r3, [r3]
 80074c2:	613b      	str	r3, [r7, #16]
   return(result);
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	f043 0320 	orr.w	r3, r3, #32
 80074ca:	653b      	str	r3, [r7, #80]	; 0x50
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	461a      	mov	r2, r3
 80074d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074d4:	623b      	str	r3, [r7, #32]
 80074d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d8:	69f9      	ldr	r1, [r7, #28]
 80074da:	6a3a      	ldr	r2, [r7, #32]
 80074dc:	e841 2300 	strex	r3, r2, [r1]
 80074e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1e6      	bne.n	80074b6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	375c      	adds	r7, #92	; 0x5c
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	080077a7 	.word	0x080077a7
 80074fc:	08007647 	.word	0x08007647

08007500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007500:	b480      	push	{r7}
 8007502:	b095      	sub	sp, #84	; 0x54
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007518:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800751c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007526:	643b      	str	r3, [r7, #64]	; 0x40
 8007528:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800752c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800752e:	e841 2300 	strex	r3, r2, [r1]
 8007532:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1e6      	bne.n	8007508 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3308      	adds	r3, #8
 8007540:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	61fb      	str	r3, [r7, #28]
   return(result);
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	f023 0301 	bic.w	r3, r3, #1
 8007550:	64bb      	str	r3, [r7, #72]	; 0x48
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3308      	adds	r3, #8
 8007558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800755a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800755c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e5      	bne.n	800753a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007572:	2b01      	cmp	r3, #1
 8007574:	d118      	bne.n	80075a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	e853 3f00 	ldrex	r3, [r3]
 8007582:	60bb      	str	r3, [r7, #8]
   return(result);
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f023 0310 	bic.w	r3, r3, #16
 800758a:	647b      	str	r3, [r7, #68]	; 0x44
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	461a      	mov	r2, r3
 8007592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007594:	61bb      	str	r3, [r7, #24]
 8007596:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007598:	6979      	ldr	r1, [r7, #20]
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	e841 2300 	strex	r3, r2, [r1]
 80075a0:	613b      	str	r3, [r7, #16]
   return(result);
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e6      	bne.n	8007576 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2220      	movs	r2, #32
 80075ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80075ba:	bf00      	nop
 80075bc:	3754      	adds	r7, #84	; 0x54
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f7ff facf 	bl	8006b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ea:	bf00      	nop
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b088      	sub	sp, #32
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	e853 3f00 	ldrex	r3, [r3]
 8007606:	60bb      	str	r3, [r7, #8]
   return(result);
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800760e:	61fb      	str	r3, [r7, #28]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	461a      	mov	r2, r3
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	61bb      	str	r3, [r7, #24]
 800761a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6979      	ldr	r1, [r7, #20]
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	613b      	str	r3, [r7, #16]
   return(result);
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e6      	bne.n	80075fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2220      	movs	r2, #32
 8007630:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f7ff fa9b 	bl	8006b74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800763e:	bf00      	nop
 8007640:	3720      	adds	r7, #32
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b096      	sub	sp, #88	; 0x58
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007654:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800765c:	2b22      	cmp	r3, #34	; 0x22
 800765e:	f040 8094 	bne.w	800778a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007668:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800766c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007670:	b2d9      	uxtb	r1, r3
 8007672:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007676:	b2da      	uxtb	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767c:	400a      	ands	r2, r1
 800767e:	b2d2      	uxtb	r2, r2
 8007680:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007686:	1c5a      	adds	r2, r3, #1
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007692:	b29b      	uxth	r3, r3
 8007694:	3b01      	subs	r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d179      	bne.n	800779e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	e853 3f00 	ldrex	r3, [r3]
 80076b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076be:	653b      	str	r3, [r7, #80]	; 0x50
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076c8:	647b      	str	r3, [r7, #68]	; 0x44
 80076ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076d0:	e841 2300 	strex	r3, r2, [r1]
 80076d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1e6      	bne.n	80076aa <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3308      	adds	r3, #8
 80076e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	e853 3f00 	ldrex	r3, [r3]
 80076ea:	623b      	str	r3, [r7, #32]
   return(result);
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	f023 0301 	bic.w	r3, r3, #1
 80076f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3308      	adds	r3, #8
 80076fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076fc:	633a      	str	r2, [r7, #48]	; 0x30
 80076fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007700:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007704:	e841 2300 	strex	r3, r2, [r1]
 8007708:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800770a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e5      	bne.n	80076dc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2220      	movs	r2, #32
 8007714:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007720:	2b01      	cmp	r3, #1
 8007722:	d12e      	bne.n	8007782 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	e853 3f00 	ldrex	r3, [r3]
 8007736:	60fb      	str	r3, [r7, #12]
   return(result);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f023 0310 	bic.w	r3, r3, #16
 800773e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	461a      	mov	r2, r3
 8007746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007748:	61fb      	str	r3, [r7, #28]
 800774a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774c:	69b9      	ldr	r1, [r7, #24]
 800774e:	69fa      	ldr	r2, [r7, #28]
 8007750:	e841 2300 	strex	r3, r2, [r1]
 8007754:	617b      	str	r3, [r7, #20]
   return(result);
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1e6      	bne.n	800772a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	f003 0310 	and.w	r3, r3, #16
 8007766:	2b10      	cmp	r3, #16
 8007768:	d103      	bne.n	8007772 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2210      	movs	r2, #16
 8007770:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7ff fa0e 	bl	8006b9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007780:	e00d      	b.n	800779e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7fa f8a2 	bl	80018cc <HAL_UART_RxCpltCallback>
}
 8007788:	e009      	b.n	800779e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	8b1b      	ldrh	r3, [r3, #24]
 8007790:	b29a      	uxth	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f042 0208 	orr.w	r2, r2, #8
 800779a:	b292      	uxth	r2, r2
 800779c:	831a      	strh	r2, [r3, #24]
}
 800779e:	bf00      	nop
 80077a0:	3758      	adds	r7, #88	; 0x58
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b096      	sub	sp, #88	; 0x58
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077bc:	2b22      	cmp	r3, #34	; 0x22
 80077be:	f040 8094 	bne.w	80078ea <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80077c8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80077d2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80077d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80077da:	4013      	ands	r3, r2
 80077dc:	b29a      	uxth	r2, r3
 80077de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e6:	1c9a      	adds	r2, r3, #2
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	3b01      	subs	r3, #1
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007804:	b29b      	uxth	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d179      	bne.n	80078fe <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007812:	e853 3f00 	ldrex	r3, [r3]
 8007816:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800781e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	461a      	mov	r2, r3
 8007826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007828:	643b      	str	r3, [r7, #64]	; 0x40
 800782a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800782e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007830:	e841 2300 	strex	r3, r2, [r1]
 8007834:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e6      	bne.n	800780a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3308      	adds	r3, #8
 8007842:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	61fb      	str	r3, [r7, #28]
   return(result);
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	f023 0301 	bic.w	r3, r3, #1
 8007852:	64bb      	str	r3, [r7, #72]	; 0x48
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3308      	adds	r3, #8
 800785a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800785c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800785e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e5      	bne.n	800783c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2220      	movs	r2, #32
 8007874:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007880:	2b01      	cmp	r3, #1
 8007882:	d12e      	bne.n	80078e2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	60bb      	str	r3, [r7, #8]
   return(result);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f023 0310 	bic.w	r3, r3, #16
 800789e:	647b      	str	r3, [r7, #68]	; 0x44
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	461a      	mov	r2, r3
 80078a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078a8:	61bb      	str	r3, [r7, #24]
 80078aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	6979      	ldr	r1, [r7, #20]
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	613b      	str	r3, [r7, #16]
   return(result);
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e6      	bne.n	800788a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	f003 0310 	and.w	r3, r3, #16
 80078c6:	2b10      	cmp	r3, #16
 80078c8:	d103      	bne.n	80078d2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2210      	movs	r2, #16
 80078d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7ff f95e 	bl	8006b9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078e0:	e00d      	b.n	80078fe <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7f9 fff2 	bl	80018cc <HAL_UART_RxCpltCallback>
}
 80078e8:	e009      	b.n	80078fe <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	8b1b      	ldrh	r3, [r3, #24]
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f042 0208 	orr.w	r2, r2, #8
 80078fa:	b292      	uxth	r2, r2
 80078fc:	831a      	strh	r2, [r3, #24]
}
 80078fe:	bf00      	nop
 8007900:	3758      	adds	r7, #88	; 0x58
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
	...

0800791c <__errno>:
 800791c:	4b01      	ldr	r3, [pc, #4]	; (8007924 <__errno+0x8>)
 800791e:	6818      	ldr	r0, [r3, #0]
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	20000028 	.word	0x20000028

08007928 <__libc_init_array>:
 8007928:	b570      	push	{r4, r5, r6, lr}
 800792a:	4d0d      	ldr	r5, [pc, #52]	; (8007960 <__libc_init_array+0x38>)
 800792c:	4c0d      	ldr	r4, [pc, #52]	; (8007964 <__libc_init_array+0x3c>)
 800792e:	1b64      	subs	r4, r4, r5
 8007930:	10a4      	asrs	r4, r4, #2
 8007932:	2600      	movs	r6, #0
 8007934:	42a6      	cmp	r6, r4
 8007936:	d109      	bne.n	800794c <__libc_init_array+0x24>
 8007938:	4d0b      	ldr	r5, [pc, #44]	; (8007968 <__libc_init_array+0x40>)
 800793a:	4c0c      	ldr	r4, [pc, #48]	; (800796c <__libc_init_array+0x44>)
 800793c:	f005 f93a 	bl	800cbb4 <_init>
 8007940:	1b64      	subs	r4, r4, r5
 8007942:	10a4      	asrs	r4, r4, #2
 8007944:	2600      	movs	r6, #0
 8007946:	42a6      	cmp	r6, r4
 8007948:	d105      	bne.n	8007956 <__libc_init_array+0x2e>
 800794a:	bd70      	pop	{r4, r5, r6, pc}
 800794c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007950:	4798      	blx	r3
 8007952:	3601      	adds	r6, #1
 8007954:	e7ee      	b.n	8007934 <__libc_init_array+0xc>
 8007956:	f855 3b04 	ldr.w	r3, [r5], #4
 800795a:	4798      	blx	r3
 800795c:	3601      	adds	r6, #1
 800795e:	e7f2      	b.n	8007946 <__libc_init_array+0x1e>
 8007960:	0800f284 	.word	0x0800f284
 8007964:	0800f284 	.word	0x0800f284
 8007968:	0800f284 	.word	0x0800f284
 800796c:	0800f288 	.word	0x0800f288

08007970 <__itoa>:
 8007970:	1e93      	subs	r3, r2, #2
 8007972:	2b22      	cmp	r3, #34	; 0x22
 8007974:	b510      	push	{r4, lr}
 8007976:	460c      	mov	r4, r1
 8007978:	d904      	bls.n	8007984 <__itoa+0x14>
 800797a:	2300      	movs	r3, #0
 800797c:	700b      	strb	r3, [r1, #0]
 800797e:	461c      	mov	r4, r3
 8007980:	4620      	mov	r0, r4
 8007982:	bd10      	pop	{r4, pc}
 8007984:	2a0a      	cmp	r2, #10
 8007986:	d109      	bne.n	800799c <__itoa+0x2c>
 8007988:	2800      	cmp	r0, #0
 800798a:	da07      	bge.n	800799c <__itoa+0x2c>
 800798c:	232d      	movs	r3, #45	; 0x2d
 800798e:	700b      	strb	r3, [r1, #0]
 8007990:	4240      	negs	r0, r0
 8007992:	2101      	movs	r1, #1
 8007994:	4421      	add	r1, r4
 8007996:	f001 fde3 	bl	8009560 <__utoa>
 800799a:	e7f1      	b.n	8007980 <__itoa+0x10>
 800799c:	2100      	movs	r1, #0
 800799e:	e7f9      	b.n	8007994 <__itoa+0x24>

080079a0 <itoa>:
 80079a0:	f7ff bfe6 	b.w	8007970 <__itoa>

080079a4 <memset>:
 80079a4:	4402      	add	r2, r0
 80079a6:	4603      	mov	r3, r0
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d100      	bne.n	80079ae <memset+0xa>
 80079ac:	4770      	bx	lr
 80079ae:	f803 1b01 	strb.w	r1, [r3], #1
 80079b2:	e7f9      	b.n	80079a8 <memset+0x4>

080079b4 <__cvt>:
 80079b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079b8:	ec55 4b10 	vmov	r4, r5, d0
 80079bc:	2d00      	cmp	r5, #0
 80079be:	460e      	mov	r6, r1
 80079c0:	4619      	mov	r1, r3
 80079c2:	462b      	mov	r3, r5
 80079c4:	bfbb      	ittet	lt
 80079c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80079ca:	461d      	movlt	r5, r3
 80079cc:	2300      	movge	r3, #0
 80079ce:	232d      	movlt	r3, #45	; 0x2d
 80079d0:	700b      	strb	r3, [r1, #0]
 80079d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80079d8:	4691      	mov	r9, r2
 80079da:	f023 0820 	bic.w	r8, r3, #32
 80079de:	bfbc      	itt	lt
 80079e0:	4622      	movlt	r2, r4
 80079e2:	4614      	movlt	r4, r2
 80079e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079e8:	d005      	beq.n	80079f6 <__cvt+0x42>
 80079ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80079ee:	d100      	bne.n	80079f2 <__cvt+0x3e>
 80079f0:	3601      	adds	r6, #1
 80079f2:	2102      	movs	r1, #2
 80079f4:	e000      	b.n	80079f8 <__cvt+0x44>
 80079f6:	2103      	movs	r1, #3
 80079f8:	ab03      	add	r3, sp, #12
 80079fa:	9301      	str	r3, [sp, #4]
 80079fc:	ab02      	add	r3, sp, #8
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	ec45 4b10 	vmov	d0, r4, r5
 8007a04:	4653      	mov	r3, sl
 8007a06:	4632      	mov	r2, r6
 8007a08:	f001 fe9a 	bl	8009740 <_dtoa_r>
 8007a0c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a10:	4607      	mov	r7, r0
 8007a12:	d102      	bne.n	8007a1a <__cvt+0x66>
 8007a14:	f019 0f01 	tst.w	r9, #1
 8007a18:	d022      	beq.n	8007a60 <__cvt+0xac>
 8007a1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a1e:	eb07 0906 	add.w	r9, r7, r6
 8007a22:	d110      	bne.n	8007a46 <__cvt+0x92>
 8007a24:	783b      	ldrb	r3, [r7, #0]
 8007a26:	2b30      	cmp	r3, #48	; 0x30
 8007a28:	d10a      	bne.n	8007a40 <__cvt+0x8c>
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	4620      	mov	r0, r4
 8007a30:	4629      	mov	r1, r5
 8007a32:	f7f9 f849 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a36:	b918      	cbnz	r0, 8007a40 <__cvt+0x8c>
 8007a38:	f1c6 0601 	rsb	r6, r6, #1
 8007a3c:	f8ca 6000 	str.w	r6, [sl]
 8007a40:	f8da 3000 	ldr.w	r3, [sl]
 8007a44:	4499      	add	r9, r3
 8007a46:	2200      	movs	r2, #0
 8007a48:	2300      	movs	r3, #0
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	f7f9 f83b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a52:	b108      	cbz	r0, 8007a58 <__cvt+0xa4>
 8007a54:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a58:	2230      	movs	r2, #48	; 0x30
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	454b      	cmp	r3, r9
 8007a5e:	d307      	bcc.n	8007a70 <__cvt+0xbc>
 8007a60:	9b03      	ldr	r3, [sp, #12]
 8007a62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a64:	1bdb      	subs	r3, r3, r7
 8007a66:	4638      	mov	r0, r7
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	b004      	add	sp, #16
 8007a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a70:	1c59      	adds	r1, r3, #1
 8007a72:	9103      	str	r1, [sp, #12]
 8007a74:	701a      	strb	r2, [r3, #0]
 8007a76:	e7f0      	b.n	8007a5a <__cvt+0xa6>

08007a78 <__exponent>:
 8007a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2900      	cmp	r1, #0
 8007a7e:	bfb8      	it	lt
 8007a80:	4249      	neglt	r1, r1
 8007a82:	f803 2b02 	strb.w	r2, [r3], #2
 8007a86:	bfb4      	ite	lt
 8007a88:	222d      	movlt	r2, #45	; 0x2d
 8007a8a:	222b      	movge	r2, #43	; 0x2b
 8007a8c:	2909      	cmp	r1, #9
 8007a8e:	7042      	strb	r2, [r0, #1]
 8007a90:	dd2a      	ble.n	8007ae8 <__exponent+0x70>
 8007a92:	f10d 0407 	add.w	r4, sp, #7
 8007a96:	46a4      	mov	ip, r4
 8007a98:	270a      	movs	r7, #10
 8007a9a:	46a6      	mov	lr, r4
 8007a9c:	460a      	mov	r2, r1
 8007a9e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007aa2:	fb07 1516 	mls	r5, r7, r6, r1
 8007aa6:	3530      	adds	r5, #48	; 0x30
 8007aa8:	2a63      	cmp	r2, #99	; 0x63
 8007aaa:	f104 34ff 	add.w	r4, r4, #4294967295
 8007aae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007ab2:	4631      	mov	r1, r6
 8007ab4:	dcf1      	bgt.n	8007a9a <__exponent+0x22>
 8007ab6:	3130      	adds	r1, #48	; 0x30
 8007ab8:	f1ae 0502 	sub.w	r5, lr, #2
 8007abc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ac0:	1c44      	adds	r4, r0, #1
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	4561      	cmp	r1, ip
 8007ac6:	d30a      	bcc.n	8007ade <__exponent+0x66>
 8007ac8:	f10d 0209 	add.w	r2, sp, #9
 8007acc:	eba2 020e 	sub.w	r2, r2, lr
 8007ad0:	4565      	cmp	r5, ip
 8007ad2:	bf88      	it	hi
 8007ad4:	2200      	movhi	r2, #0
 8007ad6:	4413      	add	r3, r2
 8007ad8:	1a18      	subs	r0, r3, r0
 8007ada:	b003      	add	sp, #12
 8007adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ade:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ae2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007ae6:	e7ed      	b.n	8007ac4 <__exponent+0x4c>
 8007ae8:	2330      	movs	r3, #48	; 0x30
 8007aea:	3130      	adds	r1, #48	; 0x30
 8007aec:	7083      	strb	r3, [r0, #2]
 8007aee:	70c1      	strb	r1, [r0, #3]
 8007af0:	1d03      	adds	r3, r0, #4
 8007af2:	e7f1      	b.n	8007ad8 <__exponent+0x60>

08007af4 <_printf_float>:
 8007af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af8:	ed2d 8b02 	vpush	{d8}
 8007afc:	b08d      	sub	sp, #52	; 0x34
 8007afe:	460c      	mov	r4, r1
 8007b00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007b04:	4616      	mov	r6, r2
 8007b06:	461f      	mov	r7, r3
 8007b08:	4605      	mov	r5, r0
 8007b0a:	f003 f86b 	bl	800abe4 <_localeconv_r>
 8007b0e:	f8d0 a000 	ldr.w	sl, [r0]
 8007b12:	4650      	mov	r0, sl
 8007b14:	f7f8 fb5c 	bl	80001d0 <strlen>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	9305      	str	r3, [sp, #20]
 8007b20:	f8d8 3000 	ldr.w	r3, [r8]
 8007b24:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007b28:	3307      	adds	r3, #7
 8007b2a:	f023 0307 	bic.w	r3, r3, #7
 8007b2e:	f103 0208 	add.w	r2, r3, #8
 8007b32:	f8c8 2000 	str.w	r2, [r8]
 8007b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007b3e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007b42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b46:	9307      	str	r3, [sp, #28]
 8007b48:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b4c:	ee08 0a10 	vmov	s16, r0
 8007b50:	4b9f      	ldr	r3, [pc, #636]	; (8007dd0 <_printf_float+0x2dc>)
 8007b52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b56:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5a:	f7f8 ffe7 	bl	8000b2c <__aeabi_dcmpun>
 8007b5e:	bb88      	cbnz	r0, 8007bc4 <_printf_float+0xd0>
 8007b60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b64:	4b9a      	ldr	r3, [pc, #616]	; (8007dd0 <_printf_float+0x2dc>)
 8007b66:	f04f 32ff 	mov.w	r2, #4294967295
 8007b6a:	f7f8 ffc1 	bl	8000af0 <__aeabi_dcmple>
 8007b6e:	bb48      	cbnz	r0, 8007bc4 <_printf_float+0xd0>
 8007b70:	2200      	movs	r2, #0
 8007b72:	2300      	movs	r3, #0
 8007b74:	4640      	mov	r0, r8
 8007b76:	4649      	mov	r1, r9
 8007b78:	f7f8 ffb0 	bl	8000adc <__aeabi_dcmplt>
 8007b7c:	b110      	cbz	r0, 8007b84 <_printf_float+0x90>
 8007b7e:	232d      	movs	r3, #45	; 0x2d
 8007b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b84:	4b93      	ldr	r3, [pc, #588]	; (8007dd4 <_printf_float+0x2e0>)
 8007b86:	4894      	ldr	r0, [pc, #592]	; (8007dd8 <_printf_float+0x2e4>)
 8007b88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007b8c:	bf94      	ite	ls
 8007b8e:	4698      	movls	r8, r3
 8007b90:	4680      	movhi	r8, r0
 8007b92:	2303      	movs	r3, #3
 8007b94:	6123      	str	r3, [r4, #16]
 8007b96:	9b05      	ldr	r3, [sp, #20]
 8007b98:	f023 0204 	bic.w	r2, r3, #4
 8007b9c:	6022      	str	r2, [r4, #0]
 8007b9e:	f04f 0900 	mov.w	r9, #0
 8007ba2:	9700      	str	r7, [sp, #0]
 8007ba4:	4633      	mov	r3, r6
 8007ba6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ba8:	4621      	mov	r1, r4
 8007baa:	4628      	mov	r0, r5
 8007bac:	f000 f9d8 	bl	8007f60 <_printf_common>
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	f040 8090 	bne.w	8007cd6 <_printf_float+0x1e2>
 8007bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bba:	b00d      	add	sp, #52	; 0x34
 8007bbc:	ecbd 8b02 	vpop	{d8}
 8007bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc4:	4642      	mov	r2, r8
 8007bc6:	464b      	mov	r3, r9
 8007bc8:	4640      	mov	r0, r8
 8007bca:	4649      	mov	r1, r9
 8007bcc:	f7f8 ffae 	bl	8000b2c <__aeabi_dcmpun>
 8007bd0:	b140      	cbz	r0, 8007be4 <_printf_float+0xf0>
 8007bd2:	464b      	mov	r3, r9
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	bfbc      	itt	lt
 8007bd8:	232d      	movlt	r3, #45	; 0x2d
 8007bda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007bde:	487f      	ldr	r0, [pc, #508]	; (8007ddc <_printf_float+0x2e8>)
 8007be0:	4b7f      	ldr	r3, [pc, #508]	; (8007de0 <_printf_float+0x2ec>)
 8007be2:	e7d1      	b.n	8007b88 <_printf_float+0x94>
 8007be4:	6863      	ldr	r3, [r4, #4]
 8007be6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007bea:	9206      	str	r2, [sp, #24]
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	d13f      	bne.n	8007c70 <_printf_float+0x17c>
 8007bf0:	2306      	movs	r3, #6
 8007bf2:	6063      	str	r3, [r4, #4]
 8007bf4:	9b05      	ldr	r3, [sp, #20]
 8007bf6:	6861      	ldr	r1, [r4, #4]
 8007bf8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	9303      	str	r3, [sp, #12]
 8007c00:	ab0a      	add	r3, sp, #40	; 0x28
 8007c02:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007c06:	ab09      	add	r3, sp, #36	; 0x24
 8007c08:	ec49 8b10 	vmov	d0, r8, r9
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	6022      	str	r2, [r4, #0]
 8007c10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c14:	4628      	mov	r0, r5
 8007c16:	f7ff fecd 	bl	80079b4 <__cvt>
 8007c1a:	9b06      	ldr	r3, [sp, #24]
 8007c1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c1e:	2b47      	cmp	r3, #71	; 0x47
 8007c20:	4680      	mov	r8, r0
 8007c22:	d108      	bne.n	8007c36 <_printf_float+0x142>
 8007c24:	1cc8      	adds	r0, r1, #3
 8007c26:	db02      	blt.n	8007c2e <_printf_float+0x13a>
 8007c28:	6863      	ldr	r3, [r4, #4]
 8007c2a:	4299      	cmp	r1, r3
 8007c2c:	dd41      	ble.n	8007cb2 <_printf_float+0x1be>
 8007c2e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007c32:	fa5f fb8b 	uxtb.w	fp, fp
 8007c36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c3a:	d820      	bhi.n	8007c7e <_printf_float+0x18a>
 8007c3c:	3901      	subs	r1, #1
 8007c3e:	465a      	mov	r2, fp
 8007c40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c44:	9109      	str	r1, [sp, #36]	; 0x24
 8007c46:	f7ff ff17 	bl	8007a78 <__exponent>
 8007c4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c4c:	1813      	adds	r3, r2, r0
 8007c4e:	2a01      	cmp	r2, #1
 8007c50:	4681      	mov	r9, r0
 8007c52:	6123      	str	r3, [r4, #16]
 8007c54:	dc02      	bgt.n	8007c5c <_printf_float+0x168>
 8007c56:	6822      	ldr	r2, [r4, #0]
 8007c58:	07d2      	lsls	r2, r2, #31
 8007c5a:	d501      	bpl.n	8007c60 <_printf_float+0x16c>
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	6123      	str	r3, [r4, #16]
 8007c60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d09c      	beq.n	8007ba2 <_printf_float+0xae>
 8007c68:	232d      	movs	r3, #45	; 0x2d
 8007c6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c6e:	e798      	b.n	8007ba2 <_printf_float+0xae>
 8007c70:	9a06      	ldr	r2, [sp, #24]
 8007c72:	2a47      	cmp	r2, #71	; 0x47
 8007c74:	d1be      	bne.n	8007bf4 <_printf_float+0x100>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1bc      	bne.n	8007bf4 <_printf_float+0x100>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e7b9      	b.n	8007bf2 <_printf_float+0xfe>
 8007c7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007c82:	d118      	bne.n	8007cb6 <_printf_float+0x1c2>
 8007c84:	2900      	cmp	r1, #0
 8007c86:	6863      	ldr	r3, [r4, #4]
 8007c88:	dd0b      	ble.n	8007ca2 <_printf_float+0x1ae>
 8007c8a:	6121      	str	r1, [r4, #16]
 8007c8c:	b913      	cbnz	r3, 8007c94 <_printf_float+0x1a0>
 8007c8e:	6822      	ldr	r2, [r4, #0]
 8007c90:	07d0      	lsls	r0, r2, #31
 8007c92:	d502      	bpl.n	8007c9a <_printf_float+0x1a6>
 8007c94:	3301      	adds	r3, #1
 8007c96:	440b      	add	r3, r1
 8007c98:	6123      	str	r3, [r4, #16]
 8007c9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007c9c:	f04f 0900 	mov.w	r9, #0
 8007ca0:	e7de      	b.n	8007c60 <_printf_float+0x16c>
 8007ca2:	b913      	cbnz	r3, 8007caa <_printf_float+0x1b6>
 8007ca4:	6822      	ldr	r2, [r4, #0]
 8007ca6:	07d2      	lsls	r2, r2, #31
 8007ca8:	d501      	bpl.n	8007cae <_printf_float+0x1ba>
 8007caa:	3302      	adds	r3, #2
 8007cac:	e7f4      	b.n	8007c98 <_printf_float+0x1a4>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e7f2      	b.n	8007c98 <_printf_float+0x1a4>
 8007cb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb8:	4299      	cmp	r1, r3
 8007cba:	db05      	blt.n	8007cc8 <_printf_float+0x1d4>
 8007cbc:	6823      	ldr	r3, [r4, #0]
 8007cbe:	6121      	str	r1, [r4, #16]
 8007cc0:	07d8      	lsls	r0, r3, #31
 8007cc2:	d5ea      	bpl.n	8007c9a <_printf_float+0x1a6>
 8007cc4:	1c4b      	adds	r3, r1, #1
 8007cc6:	e7e7      	b.n	8007c98 <_printf_float+0x1a4>
 8007cc8:	2900      	cmp	r1, #0
 8007cca:	bfd4      	ite	le
 8007ccc:	f1c1 0202 	rsble	r2, r1, #2
 8007cd0:	2201      	movgt	r2, #1
 8007cd2:	4413      	add	r3, r2
 8007cd4:	e7e0      	b.n	8007c98 <_printf_float+0x1a4>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	055a      	lsls	r2, r3, #21
 8007cda:	d407      	bmi.n	8007cec <_printf_float+0x1f8>
 8007cdc:	6923      	ldr	r3, [r4, #16]
 8007cde:	4642      	mov	r2, r8
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	47b8      	blx	r7
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	d12c      	bne.n	8007d44 <_printf_float+0x250>
 8007cea:	e764      	b.n	8007bb6 <_printf_float+0xc2>
 8007cec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007cf0:	f240 80e0 	bls.w	8007eb4 <_printf_float+0x3c0>
 8007cf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f7f8 fee4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d034      	beq.n	8007d6e <_printf_float+0x27a>
 8007d04:	4a37      	ldr	r2, [pc, #220]	; (8007de4 <_printf_float+0x2f0>)
 8007d06:	2301      	movs	r3, #1
 8007d08:	4631      	mov	r1, r6
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	47b8      	blx	r7
 8007d0e:	3001      	adds	r0, #1
 8007d10:	f43f af51 	beq.w	8007bb6 <_printf_float+0xc2>
 8007d14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	db02      	blt.n	8007d22 <_printf_float+0x22e>
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	07d8      	lsls	r0, r3, #31
 8007d20:	d510      	bpl.n	8007d44 <_printf_float+0x250>
 8007d22:	ee18 3a10 	vmov	r3, s16
 8007d26:	4652      	mov	r2, sl
 8007d28:	4631      	mov	r1, r6
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	47b8      	blx	r7
 8007d2e:	3001      	adds	r0, #1
 8007d30:	f43f af41 	beq.w	8007bb6 <_printf_float+0xc2>
 8007d34:	f04f 0800 	mov.w	r8, #0
 8007d38:	f104 091a 	add.w	r9, r4, #26
 8007d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	4543      	cmp	r3, r8
 8007d42:	dc09      	bgt.n	8007d58 <_printf_float+0x264>
 8007d44:	6823      	ldr	r3, [r4, #0]
 8007d46:	079b      	lsls	r3, r3, #30
 8007d48:	f100 8105 	bmi.w	8007f56 <_printf_float+0x462>
 8007d4c:	68e0      	ldr	r0, [r4, #12]
 8007d4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d50:	4298      	cmp	r0, r3
 8007d52:	bfb8      	it	lt
 8007d54:	4618      	movlt	r0, r3
 8007d56:	e730      	b.n	8007bba <_printf_float+0xc6>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	464a      	mov	r2, r9
 8007d5c:	4631      	mov	r1, r6
 8007d5e:	4628      	mov	r0, r5
 8007d60:	47b8      	blx	r7
 8007d62:	3001      	adds	r0, #1
 8007d64:	f43f af27 	beq.w	8007bb6 <_printf_float+0xc2>
 8007d68:	f108 0801 	add.w	r8, r8, #1
 8007d6c:	e7e6      	b.n	8007d3c <_printf_float+0x248>
 8007d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	dc39      	bgt.n	8007de8 <_printf_float+0x2f4>
 8007d74:	4a1b      	ldr	r2, [pc, #108]	; (8007de4 <_printf_float+0x2f0>)
 8007d76:	2301      	movs	r3, #1
 8007d78:	4631      	mov	r1, r6
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	47b8      	blx	r7
 8007d7e:	3001      	adds	r0, #1
 8007d80:	f43f af19 	beq.w	8007bb6 <_printf_float+0xc2>
 8007d84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	d102      	bne.n	8007d92 <_printf_float+0x29e>
 8007d8c:	6823      	ldr	r3, [r4, #0]
 8007d8e:	07d9      	lsls	r1, r3, #31
 8007d90:	d5d8      	bpl.n	8007d44 <_printf_float+0x250>
 8007d92:	ee18 3a10 	vmov	r3, s16
 8007d96:	4652      	mov	r2, sl
 8007d98:	4631      	mov	r1, r6
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	47b8      	blx	r7
 8007d9e:	3001      	adds	r0, #1
 8007da0:	f43f af09 	beq.w	8007bb6 <_printf_float+0xc2>
 8007da4:	f04f 0900 	mov.w	r9, #0
 8007da8:	f104 0a1a 	add.w	sl, r4, #26
 8007dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dae:	425b      	negs	r3, r3
 8007db0:	454b      	cmp	r3, r9
 8007db2:	dc01      	bgt.n	8007db8 <_printf_float+0x2c4>
 8007db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db6:	e792      	b.n	8007cde <_printf_float+0x1ea>
 8007db8:	2301      	movs	r3, #1
 8007dba:	4652      	mov	r2, sl
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	47b8      	blx	r7
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	f43f aef7 	beq.w	8007bb6 <_printf_float+0xc2>
 8007dc8:	f109 0901 	add.w	r9, r9, #1
 8007dcc:	e7ee      	b.n	8007dac <_printf_float+0x2b8>
 8007dce:	bf00      	nop
 8007dd0:	7fefffff 	.word	0x7fefffff
 8007dd4:	0800eda0 	.word	0x0800eda0
 8007dd8:	0800eda4 	.word	0x0800eda4
 8007ddc:	0800edac 	.word	0x0800edac
 8007de0:	0800eda8 	.word	0x0800eda8
 8007de4:	0800f229 	.word	0x0800f229
 8007de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007dec:	429a      	cmp	r2, r3
 8007dee:	bfa8      	it	ge
 8007df0:	461a      	movge	r2, r3
 8007df2:	2a00      	cmp	r2, #0
 8007df4:	4691      	mov	r9, r2
 8007df6:	dc37      	bgt.n	8007e68 <_printf_float+0x374>
 8007df8:	f04f 0b00 	mov.w	fp, #0
 8007dfc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e00:	f104 021a 	add.w	r2, r4, #26
 8007e04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e06:	9305      	str	r3, [sp, #20]
 8007e08:	eba3 0309 	sub.w	r3, r3, r9
 8007e0c:	455b      	cmp	r3, fp
 8007e0e:	dc33      	bgt.n	8007e78 <_printf_float+0x384>
 8007e10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e14:	429a      	cmp	r2, r3
 8007e16:	db3b      	blt.n	8007e90 <_printf_float+0x39c>
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	07da      	lsls	r2, r3, #31
 8007e1c:	d438      	bmi.n	8007e90 <_printf_float+0x39c>
 8007e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e20:	9a05      	ldr	r2, [sp, #20]
 8007e22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e24:	1a9a      	subs	r2, r3, r2
 8007e26:	eba3 0901 	sub.w	r9, r3, r1
 8007e2a:	4591      	cmp	r9, r2
 8007e2c:	bfa8      	it	ge
 8007e2e:	4691      	movge	r9, r2
 8007e30:	f1b9 0f00 	cmp.w	r9, #0
 8007e34:	dc35      	bgt.n	8007ea2 <_printf_float+0x3ae>
 8007e36:	f04f 0800 	mov.w	r8, #0
 8007e3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e3e:	f104 0a1a 	add.w	sl, r4, #26
 8007e42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e46:	1a9b      	subs	r3, r3, r2
 8007e48:	eba3 0309 	sub.w	r3, r3, r9
 8007e4c:	4543      	cmp	r3, r8
 8007e4e:	f77f af79 	ble.w	8007d44 <_printf_float+0x250>
 8007e52:	2301      	movs	r3, #1
 8007e54:	4652      	mov	r2, sl
 8007e56:	4631      	mov	r1, r6
 8007e58:	4628      	mov	r0, r5
 8007e5a:	47b8      	blx	r7
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	f43f aeaa 	beq.w	8007bb6 <_printf_float+0xc2>
 8007e62:	f108 0801 	add.w	r8, r8, #1
 8007e66:	e7ec      	b.n	8007e42 <_printf_float+0x34e>
 8007e68:	4613      	mov	r3, r2
 8007e6a:	4631      	mov	r1, r6
 8007e6c:	4642      	mov	r2, r8
 8007e6e:	4628      	mov	r0, r5
 8007e70:	47b8      	blx	r7
 8007e72:	3001      	adds	r0, #1
 8007e74:	d1c0      	bne.n	8007df8 <_printf_float+0x304>
 8007e76:	e69e      	b.n	8007bb6 <_printf_float+0xc2>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	9205      	str	r2, [sp, #20]
 8007e80:	47b8      	blx	r7
 8007e82:	3001      	adds	r0, #1
 8007e84:	f43f ae97 	beq.w	8007bb6 <_printf_float+0xc2>
 8007e88:	9a05      	ldr	r2, [sp, #20]
 8007e8a:	f10b 0b01 	add.w	fp, fp, #1
 8007e8e:	e7b9      	b.n	8007e04 <_printf_float+0x310>
 8007e90:	ee18 3a10 	vmov	r3, s16
 8007e94:	4652      	mov	r2, sl
 8007e96:	4631      	mov	r1, r6
 8007e98:	4628      	mov	r0, r5
 8007e9a:	47b8      	blx	r7
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	d1be      	bne.n	8007e1e <_printf_float+0x32a>
 8007ea0:	e689      	b.n	8007bb6 <_printf_float+0xc2>
 8007ea2:	9a05      	ldr	r2, [sp, #20]
 8007ea4:	464b      	mov	r3, r9
 8007ea6:	4442      	add	r2, r8
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	4628      	mov	r0, r5
 8007eac:	47b8      	blx	r7
 8007eae:	3001      	adds	r0, #1
 8007eb0:	d1c1      	bne.n	8007e36 <_printf_float+0x342>
 8007eb2:	e680      	b.n	8007bb6 <_printf_float+0xc2>
 8007eb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eb6:	2a01      	cmp	r2, #1
 8007eb8:	dc01      	bgt.n	8007ebe <_printf_float+0x3ca>
 8007eba:	07db      	lsls	r3, r3, #31
 8007ebc:	d538      	bpl.n	8007f30 <_printf_float+0x43c>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	4642      	mov	r2, r8
 8007ec2:	4631      	mov	r1, r6
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	47b8      	blx	r7
 8007ec8:	3001      	adds	r0, #1
 8007eca:	f43f ae74 	beq.w	8007bb6 <_printf_float+0xc2>
 8007ece:	ee18 3a10 	vmov	r3, s16
 8007ed2:	4652      	mov	r2, sl
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	47b8      	blx	r7
 8007eda:	3001      	adds	r0, #1
 8007edc:	f43f ae6b 	beq.w	8007bb6 <_printf_float+0xc2>
 8007ee0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f7f8 fdee 	bl	8000ac8 <__aeabi_dcmpeq>
 8007eec:	b9d8      	cbnz	r0, 8007f26 <_printf_float+0x432>
 8007eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef0:	f108 0201 	add.w	r2, r8, #1
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	4628      	mov	r0, r5
 8007efa:	47b8      	blx	r7
 8007efc:	3001      	adds	r0, #1
 8007efe:	d10e      	bne.n	8007f1e <_printf_float+0x42a>
 8007f00:	e659      	b.n	8007bb6 <_printf_float+0xc2>
 8007f02:	2301      	movs	r3, #1
 8007f04:	4652      	mov	r2, sl
 8007f06:	4631      	mov	r1, r6
 8007f08:	4628      	mov	r0, r5
 8007f0a:	47b8      	blx	r7
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	f43f ae52 	beq.w	8007bb6 <_printf_float+0xc2>
 8007f12:	f108 0801 	add.w	r8, r8, #1
 8007f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	4543      	cmp	r3, r8
 8007f1c:	dcf1      	bgt.n	8007f02 <_printf_float+0x40e>
 8007f1e:	464b      	mov	r3, r9
 8007f20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f24:	e6dc      	b.n	8007ce0 <_printf_float+0x1ec>
 8007f26:	f04f 0800 	mov.w	r8, #0
 8007f2a:	f104 0a1a 	add.w	sl, r4, #26
 8007f2e:	e7f2      	b.n	8007f16 <_printf_float+0x422>
 8007f30:	2301      	movs	r3, #1
 8007f32:	4642      	mov	r2, r8
 8007f34:	e7df      	b.n	8007ef6 <_printf_float+0x402>
 8007f36:	2301      	movs	r3, #1
 8007f38:	464a      	mov	r2, r9
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	47b8      	blx	r7
 8007f40:	3001      	adds	r0, #1
 8007f42:	f43f ae38 	beq.w	8007bb6 <_printf_float+0xc2>
 8007f46:	f108 0801 	add.w	r8, r8, #1
 8007f4a:	68e3      	ldr	r3, [r4, #12]
 8007f4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f4e:	1a5b      	subs	r3, r3, r1
 8007f50:	4543      	cmp	r3, r8
 8007f52:	dcf0      	bgt.n	8007f36 <_printf_float+0x442>
 8007f54:	e6fa      	b.n	8007d4c <_printf_float+0x258>
 8007f56:	f04f 0800 	mov.w	r8, #0
 8007f5a:	f104 0919 	add.w	r9, r4, #25
 8007f5e:	e7f4      	b.n	8007f4a <_printf_float+0x456>

08007f60 <_printf_common>:
 8007f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f64:	4616      	mov	r6, r2
 8007f66:	4699      	mov	r9, r3
 8007f68:	688a      	ldr	r2, [r1, #8]
 8007f6a:	690b      	ldr	r3, [r1, #16]
 8007f6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f70:	4293      	cmp	r3, r2
 8007f72:	bfb8      	it	lt
 8007f74:	4613      	movlt	r3, r2
 8007f76:	6033      	str	r3, [r6, #0]
 8007f78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f7c:	4607      	mov	r7, r0
 8007f7e:	460c      	mov	r4, r1
 8007f80:	b10a      	cbz	r2, 8007f86 <_printf_common+0x26>
 8007f82:	3301      	adds	r3, #1
 8007f84:	6033      	str	r3, [r6, #0]
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	0699      	lsls	r1, r3, #26
 8007f8a:	bf42      	ittt	mi
 8007f8c:	6833      	ldrmi	r3, [r6, #0]
 8007f8e:	3302      	addmi	r3, #2
 8007f90:	6033      	strmi	r3, [r6, #0]
 8007f92:	6825      	ldr	r5, [r4, #0]
 8007f94:	f015 0506 	ands.w	r5, r5, #6
 8007f98:	d106      	bne.n	8007fa8 <_printf_common+0x48>
 8007f9a:	f104 0a19 	add.w	sl, r4, #25
 8007f9e:	68e3      	ldr	r3, [r4, #12]
 8007fa0:	6832      	ldr	r2, [r6, #0]
 8007fa2:	1a9b      	subs	r3, r3, r2
 8007fa4:	42ab      	cmp	r3, r5
 8007fa6:	dc26      	bgt.n	8007ff6 <_printf_common+0x96>
 8007fa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fac:	1e13      	subs	r3, r2, #0
 8007fae:	6822      	ldr	r2, [r4, #0]
 8007fb0:	bf18      	it	ne
 8007fb2:	2301      	movne	r3, #1
 8007fb4:	0692      	lsls	r2, r2, #26
 8007fb6:	d42b      	bmi.n	8008010 <_printf_common+0xb0>
 8007fb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	47c0      	blx	r8
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	d01e      	beq.n	8008004 <_printf_common+0xa4>
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	68e5      	ldr	r5, [r4, #12]
 8007fca:	6832      	ldr	r2, [r6, #0]
 8007fcc:	f003 0306 	and.w	r3, r3, #6
 8007fd0:	2b04      	cmp	r3, #4
 8007fd2:	bf08      	it	eq
 8007fd4:	1aad      	subeq	r5, r5, r2
 8007fd6:	68a3      	ldr	r3, [r4, #8]
 8007fd8:	6922      	ldr	r2, [r4, #16]
 8007fda:	bf0c      	ite	eq
 8007fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fe0:	2500      	movne	r5, #0
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	bfc4      	itt	gt
 8007fe6:	1a9b      	subgt	r3, r3, r2
 8007fe8:	18ed      	addgt	r5, r5, r3
 8007fea:	2600      	movs	r6, #0
 8007fec:	341a      	adds	r4, #26
 8007fee:	42b5      	cmp	r5, r6
 8007ff0:	d11a      	bne.n	8008028 <_printf_common+0xc8>
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	e008      	b.n	8008008 <_printf_common+0xa8>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	4652      	mov	r2, sl
 8007ffa:	4649      	mov	r1, r9
 8007ffc:	4638      	mov	r0, r7
 8007ffe:	47c0      	blx	r8
 8008000:	3001      	adds	r0, #1
 8008002:	d103      	bne.n	800800c <_printf_common+0xac>
 8008004:	f04f 30ff 	mov.w	r0, #4294967295
 8008008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800800c:	3501      	adds	r5, #1
 800800e:	e7c6      	b.n	8007f9e <_printf_common+0x3e>
 8008010:	18e1      	adds	r1, r4, r3
 8008012:	1c5a      	adds	r2, r3, #1
 8008014:	2030      	movs	r0, #48	; 0x30
 8008016:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800801a:	4422      	add	r2, r4
 800801c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008020:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008024:	3302      	adds	r3, #2
 8008026:	e7c7      	b.n	8007fb8 <_printf_common+0x58>
 8008028:	2301      	movs	r3, #1
 800802a:	4622      	mov	r2, r4
 800802c:	4649      	mov	r1, r9
 800802e:	4638      	mov	r0, r7
 8008030:	47c0      	blx	r8
 8008032:	3001      	adds	r0, #1
 8008034:	d0e6      	beq.n	8008004 <_printf_common+0xa4>
 8008036:	3601      	adds	r6, #1
 8008038:	e7d9      	b.n	8007fee <_printf_common+0x8e>
	...

0800803c <_printf_i>:
 800803c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008040:	7e0f      	ldrb	r7, [r1, #24]
 8008042:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008044:	2f78      	cmp	r7, #120	; 0x78
 8008046:	4691      	mov	r9, r2
 8008048:	4680      	mov	r8, r0
 800804a:	460c      	mov	r4, r1
 800804c:	469a      	mov	sl, r3
 800804e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008052:	d807      	bhi.n	8008064 <_printf_i+0x28>
 8008054:	2f62      	cmp	r7, #98	; 0x62
 8008056:	d80a      	bhi.n	800806e <_printf_i+0x32>
 8008058:	2f00      	cmp	r7, #0
 800805a:	f000 80d8 	beq.w	800820e <_printf_i+0x1d2>
 800805e:	2f58      	cmp	r7, #88	; 0x58
 8008060:	f000 80a3 	beq.w	80081aa <_printf_i+0x16e>
 8008064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008068:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800806c:	e03a      	b.n	80080e4 <_printf_i+0xa8>
 800806e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008072:	2b15      	cmp	r3, #21
 8008074:	d8f6      	bhi.n	8008064 <_printf_i+0x28>
 8008076:	a101      	add	r1, pc, #4	; (adr r1, 800807c <_printf_i+0x40>)
 8008078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800807c:	080080d5 	.word	0x080080d5
 8008080:	080080e9 	.word	0x080080e9
 8008084:	08008065 	.word	0x08008065
 8008088:	08008065 	.word	0x08008065
 800808c:	08008065 	.word	0x08008065
 8008090:	08008065 	.word	0x08008065
 8008094:	080080e9 	.word	0x080080e9
 8008098:	08008065 	.word	0x08008065
 800809c:	08008065 	.word	0x08008065
 80080a0:	08008065 	.word	0x08008065
 80080a4:	08008065 	.word	0x08008065
 80080a8:	080081f5 	.word	0x080081f5
 80080ac:	08008119 	.word	0x08008119
 80080b0:	080081d7 	.word	0x080081d7
 80080b4:	08008065 	.word	0x08008065
 80080b8:	08008065 	.word	0x08008065
 80080bc:	08008217 	.word	0x08008217
 80080c0:	08008065 	.word	0x08008065
 80080c4:	08008119 	.word	0x08008119
 80080c8:	08008065 	.word	0x08008065
 80080cc:	08008065 	.word	0x08008065
 80080d0:	080081df 	.word	0x080081df
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	1d1a      	adds	r2, r3, #4
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	602a      	str	r2, [r5, #0]
 80080dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080e4:	2301      	movs	r3, #1
 80080e6:	e0a3      	b.n	8008230 <_printf_i+0x1f4>
 80080e8:	6820      	ldr	r0, [r4, #0]
 80080ea:	6829      	ldr	r1, [r5, #0]
 80080ec:	0606      	lsls	r6, r0, #24
 80080ee:	f101 0304 	add.w	r3, r1, #4
 80080f2:	d50a      	bpl.n	800810a <_printf_i+0xce>
 80080f4:	680e      	ldr	r6, [r1, #0]
 80080f6:	602b      	str	r3, [r5, #0]
 80080f8:	2e00      	cmp	r6, #0
 80080fa:	da03      	bge.n	8008104 <_printf_i+0xc8>
 80080fc:	232d      	movs	r3, #45	; 0x2d
 80080fe:	4276      	negs	r6, r6
 8008100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008104:	485e      	ldr	r0, [pc, #376]	; (8008280 <_printf_i+0x244>)
 8008106:	230a      	movs	r3, #10
 8008108:	e019      	b.n	800813e <_printf_i+0x102>
 800810a:	680e      	ldr	r6, [r1, #0]
 800810c:	602b      	str	r3, [r5, #0]
 800810e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008112:	bf18      	it	ne
 8008114:	b236      	sxthne	r6, r6
 8008116:	e7ef      	b.n	80080f8 <_printf_i+0xbc>
 8008118:	682b      	ldr	r3, [r5, #0]
 800811a:	6820      	ldr	r0, [r4, #0]
 800811c:	1d19      	adds	r1, r3, #4
 800811e:	6029      	str	r1, [r5, #0]
 8008120:	0601      	lsls	r1, r0, #24
 8008122:	d501      	bpl.n	8008128 <_printf_i+0xec>
 8008124:	681e      	ldr	r6, [r3, #0]
 8008126:	e002      	b.n	800812e <_printf_i+0xf2>
 8008128:	0646      	lsls	r6, r0, #25
 800812a:	d5fb      	bpl.n	8008124 <_printf_i+0xe8>
 800812c:	881e      	ldrh	r6, [r3, #0]
 800812e:	4854      	ldr	r0, [pc, #336]	; (8008280 <_printf_i+0x244>)
 8008130:	2f6f      	cmp	r7, #111	; 0x6f
 8008132:	bf0c      	ite	eq
 8008134:	2308      	moveq	r3, #8
 8008136:	230a      	movne	r3, #10
 8008138:	2100      	movs	r1, #0
 800813a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800813e:	6865      	ldr	r5, [r4, #4]
 8008140:	60a5      	str	r5, [r4, #8]
 8008142:	2d00      	cmp	r5, #0
 8008144:	bfa2      	ittt	ge
 8008146:	6821      	ldrge	r1, [r4, #0]
 8008148:	f021 0104 	bicge.w	r1, r1, #4
 800814c:	6021      	strge	r1, [r4, #0]
 800814e:	b90e      	cbnz	r6, 8008154 <_printf_i+0x118>
 8008150:	2d00      	cmp	r5, #0
 8008152:	d04d      	beq.n	80081f0 <_printf_i+0x1b4>
 8008154:	4615      	mov	r5, r2
 8008156:	fbb6 f1f3 	udiv	r1, r6, r3
 800815a:	fb03 6711 	mls	r7, r3, r1, r6
 800815e:	5dc7      	ldrb	r7, [r0, r7]
 8008160:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008164:	4637      	mov	r7, r6
 8008166:	42bb      	cmp	r3, r7
 8008168:	460e      	mov	r6, r1
 800816a:	d9f4      	bls.n	8008156 <_printf_i+0x11a>
 800816c:	2b08      	cmp	r3, #8
 800816e:	d10b      	bne.n	8008188 <_printf_i+0x14c>
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	07de      	lsls	r6, r3, #31
 8008174:	d508      	bpl.n	8008188 <_printf_i+0x14c>
 8008176:	6923      	ldr	r3, [r4, #16]
 8008178:	6861      	ldr	r1, [r4, #4]
 800817a:	4299      	cmp	r1, r3
 800817c:	bfde      	ittt	le
 800817e:	2330      	movle	r3, #48	; 0x30
 8008180:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008184:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008188:	1b52      	subs	r2, r2, r5
 800818a:	6122      	str	r2, [r4, #16]
 800818c:	f8cd a000 	str.w	sl, [sp]
 8008190:	464b      	mov	r3, r9
 8008192:	aa03      	add	r2, sp, #12
 8008194:	4621      	mov	r1, r4
 8008196:	4640      	mov	r0, r8
 8008198:	f7ff fee2 	bl	8007f60 <_printf_common>
 800819c:	3001      	adds	r0, #1
 800819e:	d14c      	bne.n	800823a <_printf_i+0x1fe>
 80081a0:	f04f 30ff 	mov.w	r0, #4294967295
 80081a4:	b004      	add	sp, #16
 80081a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081aa:	4835      	ldr	r0, [pc, #212]	; (8008280 <_printf_i+0x244>)
 80081ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80081b0:	6829      	ldr	r1, [r5, #0]
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80081b8:	6029      	str	r1, [r5, #0]
 80081ba:	061d      	lsls	r5, r3, #24
 80081bc:	d514      	bpl.n	80081e8 <_printf_i+0x1ac>
 80081be:	07df      	lsls	r7, r3, #31
 80081c0:	bf44      	itt	mi
 80081c2:	f043 0320 	orrmi.w	r3, r3, #32
 80081c6:	6023      	strmi	r3, [r4, #0]
 80081c8:	b91e      	cbnz	r6, 80081d2 <_printf_i+0x196>
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	f023 0320 	bic.w	r3, r3, #32
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	2310      	movs	r3, #16
 80081d4:	e7b0      	b.n	8008138 <_printf_i+0xfc>
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	f043 0320 	orr.w	r3, r3, #32
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	2378      	movs	r3, #120	; 0x78
 80081e0:	4828      	ldr	r0, [pc, #160]	; (8008284 <_printf_i+0x248>)
 80081e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081e6:	e7e3      	b.n	80081b0 <_printf_i+0x174>
 80081e8:	0659      	lsls	r1, r3, #25
 80081ea:	bf48      	it	mi
 80081ec:	b2b6      	uxthmi	r6, r6
 80081ee:	e7e6      	b.n	80081be <_printf_i+0x182>
 80081f0:	4615      	mov	r5, r2
 80081f2:	e7bb      	b.n	800816c <_printf_i+0x130>
 80081f4:	682b      	ldr	r3, [r5, #0]
 80081f6:	6826      	ldr	r6, [r4, #0]
 80081f8:	6961      	ldr	r1, [r4, #20]
 80081fa:	1d18      	adds	r0, r3, #4
 80081fc:	6028      	str	r0, [r5, #0]
 80081fe:	0635      	lsls	r5, r6, #24
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	d501      	bpl.n	8008208 <_printf_i+0x1cc>
 8008204:	6019      	str	r1, [r3, #0]
 8008206:	e002      	b.n	800820e <_printf_i+0x1d2>
 8008208:	0670      	lsls	r0, r6, #25
 800820a:	d5fb      	bpl.n	8008204 <_printf_i+0x1c8>
 800820c:	8019      	strh	r1, [r3, #0]
 800820e:	2300      	movs	r3, #0
 8008210:	6123      	str	r3, [r4, #16]
 8008212:	4615      	mov	r5, r2
 8008214:	e7ba      	b.n	800818c <_printf_i+0x150>
 8008216:	682b      	ldr	r3, [r5, #0]
 8008218:	1d1a      	adds	r2, r3, #4
 800821a:	602a      	str	r2, [r5, #0]
 800821c:	681d      	ldr	r5, [r3, #0]
 800821e:	6862      	ldr	r2, [r4, #4]
 8008220:	2100      	movs	r1, #0
 8008222:	4628      	mov	r0, r5
 8008224:	f7f7 ffdc 	bl	80001e0 <memchr>
 8008228:	b108      	cbz	r0, 800822e <_printf_i+0x1f2>
 800822a:	1b40      	subs	r0, r0, r5
 800822c:	6060      	str	r0, [r4, #4]
 800822e:	6863      	ldr	r3, [r4, #4]
 8008230:	6123      	str	r3, [r4, #16]
 8008232:	2300      	movs	r3, #0
 8008234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008238:	e7a8      	b.n	800818c <_printf_i+0x150>
 800823a:	6923      	ldr	r3, [r4, #16]
 800823c:	462a      	mov	r2, r5
 800823e:	4649      	mov	r1, r9
 8008240:	4640      	mov	r0, r8
 8008242:	47d0      	blx	sl
 8008244:	3001      	adds	r0, #1
 8008246:	d0ab      	beq.n	80081a0 <_printf_i+0x164>
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	079b      	lsls	r3, r3, #30
 800824c:	d413      	bmi.n	8008276 <_printf_i+0x23a>
 800824e:	68e0      	ldr	r0, [r4, #12]
 8008250:	9b03      	ldr	r3, [sp, #12]
 8008252:	4298      	cmp	r0, r3
 8008254:	bfb8      	it	lt
 8008256:	4618      	movlt	r0, r3
 8008258:	e7a4      	b.n	80081a4 <_printf_i+0x168>
 800825a:	2301      	movs	r3, #1
 800825c:	4632      	mov	r2, r6
 800825e:	4649      	mov	r1, r9
 8008260:	4640      	mov	r0, r8
 8008262:	47d0      	blx	sl
 8008264:	3001      	adds	r0, #1
 8008266:	d09b      	beq.n	80081a0 <_printf_i+0x164>
 8008268:	3501      	adds	r5, #1
 800826a:	68e3      	ldr	r3, [r4, #12]
 800826c:	9903      	ldr	r1, [sp, #12]
 800826e:	1a5b      	subs	r3, r3, r1
 8008270:	42ab      	cmp	r3, r5
 8008272:	dcf2      	bgt.n	800825a <_printf_i+0x21e>
 8008274:	e7eb      	b.n	800824e <_printf_i+0x212>
 8008276:	2500      	movs	r5, #0
 8008278:	f104 0619 	add.w	r6, r4, #25
 800827c:	e7f5      	b.n	800826a <_printf_i+0x22e>
 800827e:	bf00      	nop
 8008280:	0800edb0 	.word	0x0800edb0
 8008284:	0800edc1 	.word	0x0800edc1

08008288 <_scanf_float>:
 8008288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	b087      	sub	sp, #28
 800828e:	4617      	mov	r7, r2
 8008290:	9303      	str	r3, [sp, #12]
 8008292:	688b      	ldr	r3, [r1, #8]
 8008294:	1e5a      	subs	r2, r3, #1
 8008296:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800829a:	bf83      	ittte	hi
 800829c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80082a0:	195b      	addhi	r3, r3, r5
 80082a2:	9302      	strhi	r3, [sp, #8]
 80082a4:	2300      	movls	r3, #0
 80082a6:	bf86      	itte	hi
 80082a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80082ac:	608b      	strhi	r3, [r1, #8]
 80082ae:	9302      	strls	r3, [sp, #8]
 80082b0:	680b      	ldr	r3, [r1, #0]
 80082b2:	468b      	mov	fp, r1
 80082b4:	2500      	movs	r5, #0
 80082b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80082ba:	f84b 3b1c 	str.w	r3, [fp], #28
 80082be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80082c2:	4680      	mov	r8, r0
 80082c4:	460c      	mov	r4, r1
 80082c6:	465e      	mov	r6, fp
 80082c8:	46aa      	mov	sl, r5
 80082ca:	46a9      	mov	r9, r5
 80082cc:	9501      	str	r5, [sp, #4]
 80082ce:	68a2      	ldr	r2, [r4, #8]
 80082d0:	b152      	cbz	r2, 80082e8 <_scanf_float+0x60>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	2b4e      	cmp	r3, #78	; 0x4e
 80082d8:	d864      	bhi.n	80083a4 <_scanf_float+0x11c>
 80082da:	2b40      	cmp	r3, #64	; 0x40
 80082dc:	d83c      	bhi.n	8008358 <_scanf_float+0xd0>
 80082de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80082e2:	b2c8      	uxtb	r0, r1
 80082e4:	280e      	cmp	r0, #14
 80082e6:	d93a      	bls.n	800835e <_scanf_float+0xd6>
 80082e8:	f1b9 0f00 	cmp.w	r9, #0
 80082ec:	d003      	beq.n	80082f6 <_scanf_float+0x6e>
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082fa:	f1ba 0f01 	cmp.w	sl, #1
 80082fe:	f200 8113 	bhi.w	8008528 <_scanf_float+0x2a0>
 8008302:	455e      	cmp	r6, fp
 8008304:	f200 8105 	bhi.w	8008512 <_scanf_float+0x28a>
 8008308:	2501      	movs	r5, #1
 800830a:	4628      	mov	r0, r5
 800830c:	b007      	add	sp, #28
 800830e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008312:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008316:	2a0d      	cmp	r2, #13
 8008318:	d8e6      	bhi.n	80082e8 <_scanf_float+0x60>
 800831a:	a101      	add	r1, pc, #4	; (adr r1, 8008320 <_scanf_float+0x98>)
 800831c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008320:	0800845f 	.word	0x0800845f
 8008324:	080082e9 	.word	0x080082e9
 8008328:	080082e9 	.word	0x080082e9
 800832c:	080082e9 	.word	0x080082e9
 8008330:	080084bf 	.word	0x080084bf
 8008334:	08008497 	.word	0x08008497
 8008338:	080082e9 	.word	0x080082e9
 800833c:	080082e9 	.word	0x080082e9
 8008340:	0800846d 	.word	0x0800846d
 8008344:	080082e9 	.word	0x080082e9
 8008348:	080082e9 	.word	0x080082e9
 800834c:	080082e9 	.word	0x080082e9
 8008350:	080082e9 	.word	0x080082e9
 8008354:	08008425 	.word	0x08008425
 8008358:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800835c:	e7db      	b.n	8008316 <_scanf_float+0x8e>
 800835e:	290e      	cmp	r1, #14
 8008360:	d8c2      	bhi.n	80082e8 <_scanf_float+0x60>
 8008362:	a001      	add	r0, pc, #4	; (adr r0, 8008368 <_scanf_float+0xe0>)
 8008364:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008368:	08008417 	.word	0x08008417
 800836c:	080082e9 	.word	0x080082e9
 8008370:	08008417 	.word	0x08008417
 8008374:	080084ab 	.word	0x080084ab
 8008378:	080082e9 	.word	0x080082e9
 800837c:	080083c5 	.word	0x080083c5
 8008380:	08008401 	.word	0x08008401
 8008384:	08008401 	.word	0x08008401
 8008388:	08008401 	.word	0x08008401
 800838c:	08008401 	.word	0x08008401
 8008390:	08008401 	.word	0x08008401
 8008394:	08008401 	.word	0x08008401
 8008398:	08008401 	.word	0x08008401
 800839c:	08008401 	.word	0x08008401
 80083a0:	08008401 	.word	0x08008401
 80083a4:	2b6e      	cmp	r3, #110	; 0x6e
 80083a6:	d809      	bhi.n	80083bc <_scanf_float+0x134>
 80083a8:	2b60      	cmp	r3, #96	; 0x60
 80083aa:	d8b2      	bhi.n	8008312 <_scanf_float+0x8a>
 80083ac:	2b54      	cmp	r3, #84	; 0x54
 80083ae:	d077      	beq.n	80084a0 <_scanf_float+0x218>
 80083b0:	2b59      	cmp	r3, #89	; 0x59
 80083b2:	d199      	bne.n	80082e8 <_scanf_float+0x60>
 80083b4:	2d07      	cmp	r5, #7
 80083b6:	d197      	bne.n	80082e8 <_scanf_float+0x60>
 80083b8:	2508      	movs	r5, #8
 80083ba:	e029      	b.n	8008410 <_scanf_float+0x188>
 80083bc:	2b74      	cmp	r3, #116	; 0x74
 80083be:	d06f      	beq.n	80084a0 <_scanf_float+0x218>
 80083c0:	2b79      	cmp	r3, #121	; 0x79
 80083c2:	e7f6      	b.n	80083b2 <_scanf_float+0x12a>
 80083c4:	6821      	ldr	r1, [r4, #0]
 80083c6:	05c8      	lsls	r0, r1, #23
 80083c8:	d51a      	bpl.n	8008400 <_scanf_float+0x178>
 80083ca:	9b02      	ldr	r3, [sp, #8]
 80083cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80083d0:	6021      	str	r1, [r4, #0]
 80083d2:	f109 0901 	add.w	r9, r9, #1
 80083d6:	b11b      	cbz	r3, 80083e0 <_scanf_float+0x158>
 80083d8:	3b01      	subs	r3, #1
 80083da:	3201      	adds	r2, #1
 80083dc:	9302      	str	r3, [sp, #8]
 80083de:	60a2      	str	r2, [r4, #8]
 80083e0:	68a3      	ldr	r3, [r4, #8]
 80083e2:	3b01      	subs	r3, #1
 80083e4:	60a3      	str	r3, [r4, #8]
 80083e6:	6923      	ldr	r3, [r4, #16]
 80083e8:	3301      	adds	r3, #1
 80083ea:	6123      	str	r3, [r4, #16]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3b01      	subs	r3, #1
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	607b      	str	r3, [r7, #4]
 80083f4:	f340 8084 	ble.w	8008500 <_scanf_float+0x278>
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	3301      	adds	r3, #1
 80083fc:	603b      	str	r3, [r7, #0]
 80083fe:	e766      	b.n	80082ce <_scanf_float+0x46>
 8008400:	eb1a 0f05 	cmn.w	sl, r5
 8008404:	f47f af70 	bne.w	80082e8 <_scanf_float+0x60>
 8008408:	6822      	ldr	r2, [r4, #0]
 800840a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800840e:	6022      	str	r2, [r4, #0]
 8008410:	f806 3b01 	strb.w	r3, [r6], #1
 8008414:	e7e4      	b.n	80083e0 <_scanf_float+0x158>
 8008416:	6822      	ldr	r2, [r4, #0]
 8008418:	0610      	lsls	r0, r2, #24
 800841a:	f57f af65 	bpl.w	80082e8 <_scanf_float+0x60>
 800841e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008422:	e7f4      	b.n	800840e <_scanf_float+0x186>
 8008424:	f1ba 0f00 	cmp.w	sl, #0
 8008428:	d10e      	bne.n	8008448 <_scanf_float+0x1c0>
 800842a:	f1b9 0f00 	cmp.w	r9, #0
 800842e:	d10e      	bne.n	800844e <_scanf_float+0x1c6>
 8008430:	6822      	ldr	r2, [r4, #0]
 8008432:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008436:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800843a:	d108      	bne.n	800844e <_scanf_float+0x1c6>
 800843c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008440:	6022      	str	r2, [r4, #0]
 8008442:	f04f 0a01 	mov.w	sl, #1
 8008446:	e7e3      	b.n	8008410 <_scanf_float+0x188>
 8008448:	f1ba 0f02 	cmp.w	sl, #2
 800844c:	d055      	beq.n	80084fa <_scanf_float+0x272>
 800844e:	2d01      	cmp	r5, #1
 8008450:	d002      	beq.n	8008458 <_scanf_float+0x1d0>
 8008452:	2d04      	cmp	r5, #4
 8008454:	f47f af48 	bne.w	80082e8 <_scanf_float+0x60>
 8008458:	3501      	adds	r5, #1
 800845a:	b2ed      	uxtb	r5, r5
 800845c:	e7d8      	b.n	8008410 <_scanf_float+0x188>
 800845e:	f1ba 0f01 	cmp.w	sl, #1
 8008462:	f47f af41 	bne.w	80082e8 <_scanf_float+0x60>
 8008466:	f04f 0a02 	mov.w	sl, #2
 800846a:	e7d1      	b.n	8008410 <_scanf_float+0x188>
 800846c:	b97d      	cbnz	r5, 800848e <_scanf_float+0x206>
 800846e:	f1b9 0f00 	cmp.w	r9, #0
 8008472:	f47f af3c 	bne.w	80082ee <_scanf_float+0x66>
 8008476:	6822      	ldr	r2, [r4, #0]
 8008478:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800847c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008480:	f47f af39 	bne.w	80082f6 <_scanf_float+0x6e>
 8008484:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008488:	6022      	str	r2, [r4, #0]
 800848a:	2501      	movs	r5, #1
 800848c:	e7c0      	b.n	8008410 <_scanf_float+0x188>
 800848e:	2d03      	cmp	r5, #3
 8008490:	d0e2      	beq.n	8008458 <_scanf_float+0x1d0>
 8008492:	2d05      	cmp	r5, #5
 8008494:	e7de      	b.n	8008454 <_scanf_float+0x1cc>
 8008496:	2d02      	cmp	r5, #2
 8008498:	f47f af26 	bne.w	80082e8 <_scanf_float+0x60>
 800849c:	2503      	movs	r5, #3
 800849e:	e7b7      	b.n	8008410 <_scanf_float+0x188>
 80084a0:	2d06      	cmp	r5, #6
 80084a2:	f47f af21 	bne.w	80082e8 <_scanf_float+0x60>
 80084a6:	2507      	movs	r5, #7
 80084a8:	e7b2      	b.n	8008410 <_scanf_float+0x188>
 80084aa:	6822      	ldr	r2, [r4, #0]
 80084ac:	0591      	lsls	r1, r2, #22
 80084ae:	f57f af1b 	bpl.w	80082e8 <_scanf_float+0x60>
 80084b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80084b6:	6022      	str	r2, [r4, #0]
 80084b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80084bc:	e7a8      	b.n	8008410 <_scanf_float+0x188>
 80084be:	6822      	ldr	r2, [r4, #0]
 80084c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80084c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80084c8:	d006      	beq.n	80084d8 <_scanf_float+0x250>
 80084ca:	0550      	lsls	r0, r2, #21
 80084cc:	f57f af0c 	bpl.w	80082e8 <_scanf_float+0x60>
 80084d0:	f1b9 0f00 	cmp.w	r9, #0
 80084d4:	f43f af0f 	beq.w	80082f6 <_scanf_float+0x6e>
 80084d8:	0591      	lsls	r1, r2, #22
 80084da:	bf58      	it	pl
 80084dc:	9901      	ldrpl	r1, [sp, #4]
 80084de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80084e2:	bf58      	it	pl
 80084e4:	eba9 0101 	subpl.w	r1, r9, r1
 80084e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80084ec:	bf58      	it	pl
 80084ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80084f2:	6022      	str	r2, [r4, #0]
 80084f4:	f04f 0900 	mov.w	r9, #0
 80084f8:	e78a      	b.n	8008410 <_scanf_float+0x188>
 80084fa:	f04f 0a03 	mov.w	sl, #3
 80084fe:	e787      	b.n	8008410 <_scanf_float+0x188>
 8008500:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008504:	4639      	mov	r1, r7
 8008506:	4640      	mov	r0, r8
 8008508:	4798      	blx	r3
 800850a:	2800      	cmp	r0, #0
 800850c:	f43f aedf 	beq.w	80082ce <_scanf_float+0x46>
 8008510:	e6ea      	b.n	80082e8 <_scanf_float+0x60>
 8008512:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008516:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800851a:	463a      	mov	r2, r7
 800851c:	4640      	mov	r0, r8
 800851e:	4798      	blx	r3
 8008520:	6923      	ldr	r3, [r4, #16]
 8008522:	3b01      	subs	r3, #1
 8008524:	6123      	str	r3, [r4, #16]
 8008526:	e6ec      	b.n	8008302 <_scanf_float+0x7a>
 8008528:	1e6b      	subs	r3, r5, #1
 800852a:	2b06      	cmp	r3, #6
 800852c:	d825      	bhi.n	800857a <_scanf_float+0x2f2>
 800852e:	2d02      	cmp	r5, #2
 8008530:	d836      	bhi.n	80085a0 <_scanf_float+0x318>
 8008532:	455e      	cmp	r6, fp
 8008534:	f67f aee8 	bls.w	8008308 <_scanf_float+0x80>
 8008538:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800853c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008540:	463a      	mov	r2, r7
 8008542:	4640      	mov	r0, r8
 8008544:	4798      	blx	r3
 8008546:	6923      	ldr	r3, [r4, #16]
 8008548:	3b01      	subs	r3, #1
 800854a:	6123      	str	r3, [r4, #16]
 800854c:	e7f1      	b.n	8008532 <_scanf_float+0x2aa>
 800854e:	9802      	ldr	r0, [sp, #8]
 8008550:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008554:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008558:	9002      	str	r0, [sp, #8]
 800855a:	463a      	mov	r2, r7
 800855c:	4640      	mov	r0, r8
 800855e:	4798      	blx	r3
 8008560:	6923      	ldr	r3, [r4, #16]
 8008562:	3b01      	subs	r3, #1
 8008564:	6123      	str	r3, [r4, #16]
 8008566:	f10a 3aff 	add.w	sl, sl, #4294967295
 800856a:	fa5f fa8a 	uxtb.w	sl, sl
 800856e:	f1ba 0f02 	cmp.w	sl, #2
 8008572:	d1ec      	bne.n	800854e <_scanf_float+0x2c6>
 8008574:	3d03      	subs	r5, #3
 8008576:	b2ed      	uxtb	r5, r5
 8008578:	1b76      	subs	r6, r6, r5
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	05da      	lsls	r2, r3, #23
 800857e:	d52f      	bpl.n	80085e0 <_scanf_float+0x358>
 8008580:	055b      	lsls	r3, r3, #21
 8008582:	d510      	bpl.n	80085a6 <_scanf_float+0x31e>
 8008584:	455e      	cmp	r6, fp
 8008586:	f67f aebf 	bls.w	8008308 <_scanf_float+0x80>
 800858a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800858e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008592:	463a      	mov	r2, r7
 8008594:	4640      	mov	r0, r8
 8008596:	4798      	blx	r3
 8008598:	6923      	ldr	r3, [r4, #16]
 800859a:	3b01      	subs	r3, #1
 800859c:	6123      	str	r3, [r4, #16]
 800859e:	e7f1      	b.n	8008584 <_scanf_float+0x2fc>
 80085a0:	46aa      	mov	sl, r5
 80085a2:	9602      	str	r6, [sp, #8]
 80085a4:	e7df      	b.n	8008566 <_scanf_float+0x2de>
 80085a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80085aa:	6923      	ldr	r3, [r4, #16]
 80085ac:	2965      	cmp	r1, #101	; 0x65
 80085ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80085b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80085b6:	6123      	str	r3, [r4, #16]
 80085b8:	d00c      	beq.n	80085d4 <_scanf_float+0x34c>
 80085ba:	2945      	cmp	r1, #69	; 0x45
 80085bc:	d00a      	beq.n	80085d4 <_scanf_float+0x34c>
 80085be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085c2:	463a      	mov	r2, r7
 80085c4:	4640      	mov	r0, r8
 80085c6:	4798      	blx	r3
 80085c8:	6923      	ldr	r3, [r4, #16]
 80085ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	1eb5      	subs	r5, r6, #2
 80085d2:	6123      	str	r3, [r4, #16]
 80085d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085d8:	463a      	mov	r2, r7
 80085da:	4640      	mov	r0, r8
 80085dc:	4798      	blx	r3
 80085de:	462e      	mov	r6, r5
 80085e0:	6825      	ldr	r5, [r4, #0]
 80085e2:	f015 0510 	ands.w	r5, r5, #16
 80085e6:	d159      	bne.n	800869c <_scanf_float+0x414>
 80085e8:	7035      	strb	r5, [r6, #0]
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80085f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085f4:	d11b      	bne.n	800862e <_scanf_float+0x3a6>
 80085f6:	9b01      	ldr	r3, [sp, #4]
 80085f8:	454b      	cmp	r3, r9
 80085fa:	eba3 0209 	sub.w	r2, r3, r9
 80085fe:	d123      	bne.n	8008648 <_scanf_float+0x3c0>
 8008600:	2200      	movs	r2, #0
 8008602:	4659      	mov	r1, fp
 8008604:	4640      	mov	r0, r8
 8008606:	f000 ff21 	bl	800944c <_strtod_r>
 800860a:	6822      	ldr	r2, [r4, #0]
 800860c:	9b03      	ldr	r3, [sp, #12]
 800860e:	f012 0f02 	tst.w	r2, #2
 8008612:	ec57 6b10 	vmov	r6, r7, d0
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	d021      	beq.n	800865e <_scanf_float+0x3d6>
 800861a:	9903      	ldr	r1, [sp, #12]
 800861c:	1d1a      	adds	r2, r3, #4
 800861e:	600a      	str	r2, [r1, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	e9c3 6700 	strd	r6, r7, [r3]
 8008626:	68e3      	ldr	r3, [r4, #12]
 8008628:	3301      	adds	r3, #1
 800862a:	60e3      	str	r3, [r4, #12]
 800862c:	e66d      	b.n	800830a <_scanf_float+0x82>
 800862e:	9b04      	ldr	r3, [sp, #16]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0e5      	beq.n	8008600 <_scanf_float+0x378>
 8008634:	9905      	ldr	r1, [sp, #20]
 8008636:	230a      	movs	r3, #10
 8008638:	462a      	mov	r2, r5
 800863a:	3101      	adds	r1, #1
 800863c:	4640      	mov	r0, r8
 800863e:	f000 ff8d 	bl	800955c <_strtol_r>
 8008642:	9b04      	ldr	r3, [sp, #16]
 8008644:	9e05      	ldr	r6, [sp, #20]
 8008646:	1ac2      	subs	r2, r0, r3
 8008648:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800864c:	429e      	cmp	r6, r3
 800864e:	bf28      	it	cs
 8008650:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008654:	4912      	ldr	r1, [pc, #72]	; (80086a0 <_scanf_float+0x418>)
 8008656:	4630      	mov	r0, r6
 8008658:	f000 f844 	bl	80086e4 <siprintf>
 800865c:	e7d0      	b.n	8008600 <_scanf_float+0x378>
 800865e:	9903      	ldr	r1, [sp, #12]
 8008660:	f012 0f04 	tst.w	r2, #4
 8008664:	f103 0204 	add.w	r2, r3, #4
 8008668:	600a      	str	r2, [r1, #0]
 800866a:	d1d9      	bne.n	8008620 <_scanf_float+0x398>
 800866c:	f8d3 8000 	ldr.w	r8, [r3]
 8008670:	ee10 2a10 	vmov	r2, s0
 8008674:	ee10 0a10 	vmov	r0, s0
 8008678:	463b      	mov	r3, r7
 800867a:	4639      	mov	r1, r7
 800867c:	f7f8 fa56 	bl	8000b2c <__aeabi_dcmpun>
 8008680:	b128      	cbz	r0, 800868e <_scanf_float+0x406>
 8008682:	4808      	ldr	r0, [pc, #32]	; (80086a4 <_scanf_float+0x41c>)
 8008684:	f000 f828 	bl	80086d8 <nanf>
 8008688:	ed88 0a00 	vstr	s0, [r8]
 800868c:	e7cb      	b.n	8008626 <_scanf_float+0x39e>
 800868e:	4630      	mov	r0, r6
 8008690:	4639      	mov	r1, r7
 8008692:	f7f8 faa9 	bl	8000be8 <__aeabi_d2f>
 8008696:	f8c8 0000 	str.w	r0, [r8]
 800869a:	e7c4      	b.n	8008626 <_scanf_float+0x39e>
 800869c:	2500      	movs	r5, #0
 800869e:	e634      	b.n	800830a <_scanf_float+0x82>
 80086a0:	0800edd2 	.word	0x0800edd2
 80086a4:	0800f27b 	.word	0x0800f27b

080086a8 <iprintf>:
 80086a8:	b40f      	push	{r0, r1, r2, r3}
 80086aa:	4b0a      	ldr	r3, [pc, #40]	; (80086d4 <iprintf+0x2c>)
 80086ac:	b513      	push	{r0, r1, r4, lr}
 80086ae:	681c      	ldr	r4, [r3, #0]
 80086b0:	b124      	cbz	r4, 80086bc <iprintf+0x14>
 80086b2:	69a3      	ldr	r3, [r4, #24]
 80086b4:	b913      	cbnz	r3, 80086bc <iprintf+0x14>
 80086b6:	4620      	mov	r0, r4
 80086b8:	f001 fe88 	bl	800a3cc <__sinit>
 80086bc:	ab05      	add	r3, sp, #20
 80086be:	9a04      	ldr	r2, [sp, #16]
 80086c0:	68a1      	ldr	r1, [r4, #8]
 80086c2:	9301      	str	r3, [sp, #4]
 80086c4:	4620      	mov	r0, r4
 80086c6:	f003 fbdf 	bl	800be88 <_vfiprintf_r>
 80086ca:	b002      	add	sp, #8
 80086cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086d0:	b004      	add	sp, #16
 80086d2:	4770      	bx	lr
 80086d4:	20000028 	.word	0x20000028

080086d8 <nanf>:
 80086d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80086e0 <nanf+0x8>
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	7fc00000 	.word	0x7fc00000

080086e4 <siprintf>:
 80086e4:	b40e      	push	{r1, r2, r3}
 80086e6:	b500      	push	{lr}
 80086e8:	b09c      	sub	sp, #112	; 0x70
 80086ea:	ab1d      	add	r3, sp, #116	; 0x74
 80086ec:	9002      	str	r0, [sp, #8]
 80086ee:	9006      	str	r0, [sp, #24]
 80086f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086f4:	4809      	ldr	r0, [pc, #36]	; (800871c <siprintf+0x38>)
 80086f6:	9107      	str	r1, [sp, #28]
 80086f8:	9104      	str	r1, [sp, #16]
 80086fa:	4909      	ldr	r1, [pc, #36]	; (8008720 <siprintf+0x3c>)
 80086fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008700:	9105      	str	r1, [sp, #20]
 8008702:	6800      	ldr	r0, [r0, #0]
 8008704:	9301      	str	r3, [sp, #4]
 8008706:	a902      	add	r1, sp, #8
 8008708:	f003 f8c2 	bl	800b890 <_svfiprintf_r>
 800870c:	9b02      	ldr	r3, [sp, #8]
 800870e:	2200      	movs	r2, #0
 8008710:	701a      	strb	r2, [r3, #0]
 8008712:	b01c      	add	sp, #112	; 0x70
 8008714:	f85d eb04 	ldr.w	lr, [sp], #4
 8008718:	b003      	add	sp, #12
 800871a:	4770      	bx	lr
 800871c:	20000028 	.word	0x20000028
 8008720:	ffff0208 	.word	0xffff0208

08008724 <siscanf>:
 8008724:	b40e      	push	{r1, r2, r3}
 8008726:	b510      	push	{r4, lr}
 8008728:	b09f      	sub	sp, #124	; 0x7c
 800872a:	ac21      	add	r4, sp, #132	; 0x84
 800872c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008730:	f854 2b04 	ldr.w	r2, [r4], #4
 8008734:	9201      	str	r2, [sp, #4]
 8008736:	f8ad 101c 	strh.w	r1, [sp, #28]
 800873a:	9004      	str	r0, [sp, #16]
 800873c:	9008      	str	r0, [sp, #32]
 800873e:	f7f7 fd47 	bl	80001d0 <strlen>
 8008742:	4b0c      	ldr	r3, [pc, #48]	; (8008774 <siscanf+0x50>)
 8008744:	9005      	str	r0, [sp, #20]
 8008746:	9009      	str	r0, [sp, #36]	; 0x24
 8008748:	930d      	str	r3, [sp, #52]	; 0x34
 800874a:	480b      	ldr	r0, [pc, #44]	; (8008778 <siscanf+0x54>)
 800874c:	9a01      	ldr	r2, [sp, #4]
 800874e:	6800      	ldr	r0, [r0, #0]
 8008750:	9403      	str	r4, [sp, #12]
 8008752:	2300      	movs	r3, #0
 8008754:	9311      	str	r3, [sp, #68]	; 0x44
 8008756:	9316      	str	r3, [sp, #88]	; 0x58
 8008758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800875c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008760:	a904      	add	r1, sp, #16
 8008762:	4623      	mov	r3, r4
 8008764:	f003 f9ee 	bl	800bb44 <__ssvfiscanf_r>
 8008768:	b01f      	add	sp, #124	; 0x7c
 800876a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800876e:	b003      	add	sp, #12
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	0800879f 	.word	0x0800879f
 8008778:	20000028 	.word	0x20000028

0800877c <__sread>:
 800877c:	b510      	push	{r4, lr}
 800877e:	460c      	mov	r4, r1
 8008780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008784:	f003 fe02 	bl	800c38c <_read_r>
 8008788:	2800      	cmp	r0, #0
 800878a:	bfab      	itete	ge
 800878c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800878e:	89a3      	ldrhlt	r3, [r4, #12]
 8008790:	181b      	addge	r3, r3, r0
 8008792:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008796:	bfac      	ite	ge
 8008798:	6563      	strge	r3, [r4, #84]	; 0x54
 800879a:	81a3      	strhlt	r3, [r4, #12]
 800879c:	bd10      	pop	{r4, pc}

0800879e <__seofread>:
 800879e:	2000      	movs	r0, #0
 80087a0:	4770      	bx	lr

080087a2 <__swrite>:
 80087a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a6:	461f      	mov	r7, r3
 80087a8:	898b      	ldrh	r3, [r1, #12]
 80087aa:	05db      	lsls	r3, r3, #23
 80087ac:	4605      	mov	r5, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	4616      	mov	r6, r2
 80087b2:	d505      	bpl.n	80087c0 <__swrite+0x1e>
 80087b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087b8:	2302      	movs	r3, #2
 80087ba:	2200      	movs	r2, #0
 80087bc:	f002 fa1a 	bl	800abf4 <_lseek_r>
 80087c0:	89a3      	ldrh	r3, [r4, #12]
 80087c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087ca:	81a3      	strh	r3, [r4, #12]
 80087cc:	4632      	mov	r2, r6
 80087ce:	463b      	mov	r3, r7
 80087d0:	4628      	mov	r0, r5
 80087d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087d6:	f000 bf05 	b.w	80095e4 <_write_r>

080087da <__sseek>:
 80087da:	b510      	push	{r4, lr}
 80087dc:	460c      	mov	r4, r1
 80087de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e2:	f002 fa07 	bl	800abf4 <_lseek_r>
 80087e6:	1c43      	adds	r3, r0, #1
 80087e8:	89a3      	ldrh	r3, [r4, #12]
 80087ea:	bf15      	itete	ne
 80087ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80087ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087f6:	81a3      	strheq	r3, [r4, #12]
 80087f8:	bf18      	it	ne
 80087fa:	81a3      	strhne	r3, [r4, #12]
 80087fc:	bd10      	pop	{r4, pc}

080087fe <__sclose>:
 80087fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008802:	f000 bf01 	b.w	8009608 <_close_r>

08008806 <sulp>:
 8008806:	b570      	push	{r4, r5, r6, lr}
 8008808:	4604      	mov	r4, r0
 800880a:	460d      	mov	r5, r1
 800880c:	ec45 4b10 	vmov	d0, r4, r5
 8008810:	4616      	mov	r6, r2
 8008812:	f002 fd9b 	bl	800b34c <__ulp>
 8008816:	ec51 0b10 	vmov	r0, r1, d0
 800881a:	b17e      	cbz	r6, 800883c <sulp+0x36>
 800881c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008820:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008824:	2b00      	cmp	r3, #0
 8008826:	dd09      	ble.n	800883c <sulp+0x36>
 8008828:	051b      	lsls	r3, r3, #20
 800882a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800882e:	2400      	movs	r4, #0
 8008830:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008834:	4622      	mov	r2, r4
 8008836:	462b      	mov	r3, r5
 8008838:	f7f7 fede 	bl	80005f8 <__aeabi_dmul>
 800883c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008840 <_strtod_l>:
 8008840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008844:	ed2d 8b02 	vpush	{d8}
 8008848:	b09d      	sub	sp, #116	; 0x74
 800884a:	461f      	mov	r7, r3
 800884c:	2300      	movs	r3, #0
 800884e:	9318      	str	r3, [sp, #96]	; 0x60
 8008850:	4ba2      	ldr	r3, [pc, #648]	; (8008adc <_strtod_l+0x29c>)
 8008852:	9213      	str	r2, [sp, #76]	; 0x4c
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	9305      	str	r3, [sp, #20]
 8008858:	4604      	mov	r4, r0
 800885a:	4618      	mov	r0, r3
 800885c:	4688      	mov	r8, r1
 800885e:	f7f7 fcb7 	bl	80001d0 <strlen>
 8008862:	f04f 0a00 	mov.w	sl, #0
 8008866:	4605      	mov	r5, r0
 8008868:	f04f 0b00 	mov.w	fp, #0
 800886c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008872:	781a      	ldrb	r2, [r3, #0]
 8008874:	2a2b      	cmp	r2, #43	; 0x2b
 8008876:	d04e      	beq.n	8008916 <_strtod_l+0xd6>
 8008878:	d83b      	bhi.n	80088f2 <_strtod_l+0xb2>
 800887a:	2a0d      	cmp	r2, #13
 800887c:	d834      	bhi.n	80088e8 <_strtod_l+0xa8>
 800887e:	2a08      	cmp	r2, #8
 8008880:	d834      	bhi.n	80088ec <_strtod_l+0xac>
 8008882:	2a00      	cmp	r2, #0
 8008884:	d03e      	beq.n	8008904 <_strtod_l+0xc4>
 8008886:	2300      	movs	r3, #0
 8008888:	930a      	str	r3, [sp, #40]	; 0x28
 800888a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800888c:	7833      	ldrb	r3, [r6, #0]
 800888e:	2b30      	cmp	r3, #48	; 0x30
 8008890:	f040 80b0 	bne.w	80089f4 <_strtod_l+0x1b4>
 8008894:	7873      	ldrb	r3, [r6, #1]
 8008896:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800889a:	2b58      	cmp	r3, #88	; 0x58
 800889c:	d168      	bne.n	8008970 <_strtod_l+0x130>
 800889e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a0:	9301      	str	r3, [sp, #4]
 80088a2:	ab18      	add	r3, sp, #96	; 0x60
 80088a4:	9702      	str	r7, [sp, #8]
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	4a8d      	ldr	r2, [pc, #564]	; (8008ae0 <_strtod_l+0x2a0>)
 80088aa:	ab19      	add	r3, sp, #100	; 0x64
 80088ac:	a917      	add	r1, sp, #92	; 0x5c
 80088ae:	4620      	mov	r0, r4
 80088b0:	f001 fe90 	bl	800a5d4 <__gethex>
 80088b4:	f010 0707 	ands.w	r7, r0, #7
 80088b8:	4605      	mov	r5, r0
 80088ba:	d005      	beq.n	80088c8 <_strtod_l+0x88>
 80088bc:	2f06      	cmp	r7, #6
 80088be:	d12c      	bne.n	800891a <_strtod_l+0xda>
 80088c0:	3601      	adds	r6, #1
 80088c2:	2300      	movs	r3, #0
 80088c4:	9617      	str	r6, [sp, #92]	; 0x5c
 80088c6:	930a      	str	r3, [sp, #40]	; 0x28
 80088c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f040 8590 	bne.w	80093f0 <_strtod_l+0xbb0>
 80088d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088d2:	b1eb      	cbz	r3, 8008910 <_strtod_l+0xd0>
 80088d4:	4652      	mov	r2, sl
 80088d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80088da:	ec43 2b10 	vmov	d0, r2, r3
 80088de:	b01d      	add	sp, #116	; 0x74
 80088e0:	ecbd 8b02 	vpop	{d8}
 80088e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e8:	2a20      	cmp	r2, #32
 80088ea:	d1cc      	bne.n	8008886 <_strtod_l+0x46>
 80088ec:	3301      	adds	r3, #1
 80088ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80088f0:	e7be      	b.n	8008870 <_strtod_l+0x30>
 80088f2:	2a2d      	cmp	r2, #45	; 0x2d
 80088f4:	d1c7      	bne.n	8008886 <_strtod_l+0x46>
 80088f6:	2201      	movs	r2, #1
 80088f8:	920a      	str	r2, [sp, #40]	; 0x28
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80088fe:	785b      	ldrb	r3, [r3, #1]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1c2      	bne.n	800888a <_strtod_l+0x4a>
 8008904:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008906:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800890a:	2b00      	cmp	r3, #0
 800890c:	f040 856e 	bne.w	80093ec <_strtod_l+0xbac>
 8008910:	4652      	mov	r2, sl
 8008912:	465b      	mov	r3, fp
 8008914:	e7e1      	b.n	80088da <_strtod_l+0x9a>
 8008916:	2200      	movs	r2, #0
 8008918:	e7ee      	b.n	80088f8 <_strtod_l+0xb8>
 800891a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800891c:	b13a      	cbz	r2, 800892e <_strtod_l+0xee>
 800891e:	2135      	movs	r1, #53	; 0x35
 8008920:	a81a      	add	r0, sp, #104	; 0x68
 8008922:	f002 fe1e 	bl	800b562 <__copybits>
 8008926:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008928:	4620      	mov	r0, r4
 800892a:	f002 f9dd 	bl	800ace8 <_Bfree>
 800892e:	3f01      	subs	r7, #1
 8008930:	2f04      	cmp	r7, #4
 8008932:	d806      	bhi.n	8008942 <_strtod_l+0x102>
 8008934:	e8df f007 	tbb	[pc, r7]
 8008938:	1714030a 	.word	0x1714030a
 800893c:	0a          	.byte	0x0a
 800893d:	00          	.byte	0x00
 800893e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008942:	0728      	lsls	r0, r5, #28
 8008944:	d5c0      	bpl.n	80088c8 <_strtod_l+0x88>
 8008946:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800894a:	e7bd      	b.n	80088c8 <_strtod_l+0x88>
 800894c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008950:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008952:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008956:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800895a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800895e:	e7f0      	b.n	8008942 <_strtod_l+0x102>
 8008960:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008ae4 <_strtod_l+0x2a4>
 8008964:	e7ed      	b.n	8008942 <_strtod_l+0x102>
 8008966:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800896a:	f04f 3aff 	mov.w	sl, #4294967295
 800896e:	e7e8      	b.n	8008942 <_strtod_l+0x102>
 8008970:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008972:	1c5a      	adds	r2, r3, #1
 8008974:	9217      	str	r2, [sp, #92]	; 0x5c
 8008976:	785b      	ldrb	r3, [r3, #1]
 8008978:	2b30      	cmp	r3, #48	; 0x30
 800897a:	d0f9      	beq.n	8008970 <_strtod_l+0x130>
 800897c:	2b00      	cmp	r3, #0
 800897e:	d0a3      	beq.n	80088c8 <_strtod_l+0x88>
 8008980:	2301      	movs	r3, #1
 8008982:	f04f 0900 	mov.w	r9, #0
 8008986:	9304      	str	r3, [sp, #16]
 8008988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800898a:	9308      	str	r3, [sp, #32]
 800898c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008990:	464f      	mov	r7, r9
 8008992:	220a      	movs	r2, #10
 8008994:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008996:	7806      	ldrb	r6, [r0, #0]
 8008998:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800899c:	b2d9      	uxtb	r1, r3
 800899e:	2909      	cmp	r1, #9
 80089a0:	d92a      	bls.n	80089f8 <_strtod_l+0x1b8>
 80089a2:	9905      	ldr	r1, [sp, #20]
 80089a4:	462a      	mov	r2, r5
 80089a6:	f003 fd53 	bl	800c450 <strncmp>
 80089aa:	b398      	cbz	r0, 8008a14 <_strtod_l+0x1d4>
 80089ac:	2000      	movs	r0, #0
 80089ae:	4632      	mov	r2, r6
 80089b0:	463d      	mov	r5, r7
 80089b2:	9005      	str	r0, [sp, #20]
 80089b4:	4603      	mov	r3, r0
 80089b6:	2a65      	cmp	r2, #101	; 0x65
 80089b8:	d001      	beq.n	80089be <_strtod_l+0x17e>
 80089ba:	2a45      	cmp	r2, #69	; 0x45
 80089bc:	d118      	bne.n	80089f0 <_strtod_l+0x1b0>
 80089be:	b91d      	cbnz	r5, 80089c8 <_strtod_l+0x188>
 80089c0:	9a04      	ldr	r2, [sp, #16]
 80089c2:	4302      	orrs	r2, r0
 80089c4:	d09e      	beq.n	8008904 <_strtod_l+0xc4>
 80089c6:	2500      	movs	r5, #0
 80089c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80089cc:	f108 0201 	add.w	r2, r8, #1
 80089d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80089d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80089d6:	2a2b      	cmp	r2, #43	; 0x2b
 80089d8:	d075      	beq.n	8008ac6 <_strtod_l+0x286>
 80089da:	2a2d      	cmp	r2, #45	; 0x2d
 80089dc:	d07b      	beq.n	8008ad6 <_strtod_l+0x296>
 80089de:	f04f 0c00 	mov.w	ip, #0
 80089e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80089e6:	2909      	cmp	r1, #9
 80089e8:	f240 8082 	bls.w	8008af0 <_strtod_l+0x2b0>
 80089ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80089f0:	2600      	movs	r6, #0
 80089f2:	e09d      	b.n	8008b30 <_strtod_l+0x2f0>
 80089f4:	2300      	movs	r3, #0
 80089f6:	e7c4      	b.n	8008982 <_strtod_l+0x142>
 80089f8:	2f08      	cmp	r7, #8
 80089fa:	bfd8      	it	le
 80089fc:	9907      	ldrle	r1, [sp, #28]
 80089fe:	f100 0001 	add.w	r0, r0, #1
 8008a02:	bfda      	itte	le
 8008a04:	fb02 3301 	mlale	r3, r2, r1, r3
 8008a08:	9307      	strle	r3, [sp, #28]
 8008a0a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008a0e:	3701      	adds	r7, #1
 8008a10:	9017      	str	r0, [sp, #92]	; 0x5c
 8008a12:	e7bf      	b.n	8008994 <_strtod_l+0x154>
 8008a14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a16:	195a      	adds	r2, r3, r5
 8008a18:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a1a:	5d5a      	ldrb	r2, [r3, r5]
 8008a1c:	2f00      	cmp	r7, #0
 8008a1e:	d037      	beq.n	8008a90 <_strtod_l+0x250>
 8008a20:	9005      	str	r0, [sp, #20]
 8008a22:	463d      	mov	r5, r7
 8008a24:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008a28:	2b09      	cmp	r3, #9
 8008a2a:	d912      	bls.n	8008a52 <_strtod_l+0x212>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e7c2      	b.n	80089b6 <_strtod_l+0x176>
 8008a30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a32:	1c5a      	adds	r2, r3, #1
 8008a34:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a36:	785a      	ldrb	r2, [r3, #1]
 8008a38:	3001      	adds	r0, #1
 8008a3a:	2a30      	cmp	r2, #48	; 0x30
 8008a3c:	d0f8      	beq.n	8008a30 <_strtod_l+0x1f0>
 8008a3e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008a42:	2b08      	cmp	r3, #8
 8008a44:	f200 84d9 	bhi.w	80093fa <_strtod_l+0xbba>
 8008a48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a4a:	9005      	str	r0, [sp, #20]
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	9308      	str	r3, [sp, #32]
 8008a50:	4605      	mov	r5, r0
 8008a52:	3a30      	subs	r2, #48	; 0x30
 8008a54:	f100 0301 	add.w	r3, r0, #1
 8008a58:	d014      	beq.n	8008a84 <_strtod_l+0x244>
 8008a5a:	9905      	ldr	r1, [sp, #20]
 8008a5c:	4419      	add	r1, r3
 8008a5e:	9105      	str	r1, [sp, #20]
 8008a60:	462b      	mov	r3, r5
 8008a62:	eb00 0e05 	add.w	lr, r0, r5
 8008a66:	210a      	movs	r1, #10
 8008a68:	4573      	cmp	r3, lr
 8008a6a:	d113      	bne.n	8008a94 <_strtod_l+0x254>
 8008a6c:	182b      	adds	r3, r5, r0
 8008a6e:	2b08      	cmp	r3, #8
 8008a70:	f105 0501 	add.w	r5, r5, #1
 8008a74:	4405      	add	r5, r0
 8008a76:	dc1c      	bgt.n	8008ab2 <_strtod_l+0x272>
 8008a78:	9907      	ldr	r1, [sp, #28]
 8008a7a:	230a      	movs	r3, #10
 8008a7c:	fb03 2301 	mla	r3, r3, r1, r2
 8008a80:	9307      	str	r3, [sp, #28]
 8008a82:	2300      	movs	r3, #0
 8008a84:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008a86:	1c51      	adds	r1, r2, #1
 8008a88:	9117      	str	r1, [sp, #92]	; 0x5c
 8008a8a:	7852      	ldrb	r2, [r2, #1]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	e7c9      	b.n	8008a24 <_strtod_l+0x1e4>
 8008a90:	4638      	mov	r0, r7
 8008a92:	e7d2      	b.n	8008a3a <_strtod_l+0x1fa>
 8008a94:	2b08      	cmp	r3, #8
 8008a96:	dc04      	bgt.n	8008aa2 <_strtod_l+0x262>
 8008a98:	9e07      	ldr	r6, [sp, #28]
 8008a9a:	434e      	muls	r6, r1
 8008a9c:	9607      	str	r6, [sp, #28]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	e7e2      	b.n	8008a68 <_strtod_l+0x228>
 8008aa2:	f103 0c01 	add.w	ip, r3, #1
 8008aa6:	f1bc 0f10 	cmp.w	ip, #16
 8008aaa:	bfd8      	it	le
 8008aac:	fb01 f909 	mulle.w	r9, r1, r9
 8008ab0:	e7f5      	b.n	8008a9e <_strtod_l+0x25e>
 8008ab2:	2d10      	cmp	r5, #16
 8008ab4:	bfdc      	itt	le
 8008ab6:	230a      	movle	r3, #10
 8008ab8:	fb03 2909 	mlale	r9, r3, r9, r2
 8008abc:	e7e1      	b.n	8008a82 <_strtod_l+0x242>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	9305      	str	r3, [sp, #20]
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e77c      	b.n	80089c0 <_strtod_l+0x180>
 8008ac6:	f04f 0c00 	mov.w	ip, #0
 8008aca:	f108 0202 	add.w	r2, r8, #2
 8008ace:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ad0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008ad4:	e785      	b.n	80089e2 <_strtod_l+0x1a2>
 8008ad6:	f04f 0c01 	mov.w	ip, #1
 8008ada:	e7f6      	b.n	8008aca <_strtod_l+0x28a>
 8008adc:	0800f0a8 	.word	0x0800f0a8
 8008ae0:	0800edd8 	.word	0x0800edd8
 8008ae4:	7ff00000 	.word	0x7ff00000
 8008ae8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008aea:	1c51      	adds	r1, r2, #1
 8008aec:	9117      	str	r1, [sp, #92]	; 0x5c
 8008aee:	7852      	ldrb	r2, [r2, #1]
 8008af0:	2a30      	cmp	r2, #48	; 0x30
 8008af2:	d0f9      	beq.n	8008ae8 <_strtod_l+0x2a8>
 8008af4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008af8:	2908      	cmp	r1, #8
 8008afa:	f63f af79 	bhi.w	80089f0 <_strtod_l+0x1b0>
 8008afe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008b02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008b04:	9206      	str	r2, [sp, #24]
 8008b06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008b08:	1c51      	adds	r1, r2, #1
 8008b0a:	9117      	str	r1, [sp, #92]	; 0x5c
 8008b0c:	7852      	ldrb	r2, [r2, #1]
 8008b0e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008b12:	2e09      	cmp	r6, #9
 8008b14:	d937      	bls.n	8008b86 <_strtod_l+0x346>
 8008b16:	9e06      	ldr	r6, [sp, #24]
 8008b18:	1b89      	subs	r1, r1, r6
 8008b1a:	2908      	cmp	r1, #8
 8008b1c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008b20:	dc02      	bgt.n	8008b28 <_strtod_l+0x2e8>
 8008b22:	4576      	cmp	r6, lr
 8008b24:	bfa8      	it	ge
 8008b26:	4676      	movge	r6, lr
 8008b28:	f1bc 0f00 	cmp.w	ip, #0
 8008b2c:	d000      	beq.n	8008b30 <_strtod_l+0x2f0>
 8008b2e:	4276      	negs	r6, r6
 8008b30:	2d00      	cmp	r5, #0
 8008b32:	d14d      	bne.n	8008bd0 <_strtod_l+0x390>
 8008b34:	9904      	ldr	r1, [sp, #16]
 8008b36:	4301      	orrs	r1, r0
 8008b38:	f47f aec6 	bne.w	80088c8 <_strtod_l+0x88>
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f47f aee1 	bne.w	8008904 <_strtod_l+0xc4>
 8008b42:	2a69      	cmp	r2, #105	; 0x69
 8008b44:	d027      	beq.n	8008b96 <_strtod_l+0x356>
 8008b46:	dc24      	bgt.n	8008b92 <_strtod_l+0x352>
 8008b48:	2a49      	cmp	r2, #73	; 0x49
 8008b4a:	d024      	beq.n	8008b96 <_strtod_l+0x356>
 8008b4c:	2a4e      	cmp	r2, #78	; 0x4e
 8008b4e:	f47f aed9 	bne.w	8008904 <_strtod_l+0xc4>
 8008b52:	499f      	ldr	r1, [pc, #636]	; (8008dd0 <_strtod_l+0x590>)
 8008b54:	a817      	add	r0, sp, #92	; 0x5c
 8008b56:	f001 ff95 	bl	800aa84 <__match>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	f43f aed2 	beq.w	8008904 <_strtod_l+0xc4>
 8008b60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	2b28      	cmp	r3, #40	; 0x28
 8008b66:	d12d      	bne.n	8008bc4 <_strtod_l+0x384>
 8008b68:	499a      	ldr	r1, [pc, #616]	; (8008dd4 <_strtod_l+0x594>)
 8008b6a:	aa1a      	add	r2, sp, #104	; 0x68
 8008b6c:	a817      	add	r0, sp, #92	; 0x5c
 8008b6e:	f001 ff9d 	bl	800aaac <__hexnan>
 8008b72:	2805      	cmp	r0, #5
 8008b74:	d126      	bne.n	8008bc4 <_strtod_l+0x384>
 8008b76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b78:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008b7c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008b80:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008b84:	e6a0      	b.n	80088c8 <_strtod_l+0x88>
 8008b86:	210a      	movs	r1, #10
 8008b88:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008b8c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008b90:	e7b9      	b.n	8008b06 <_strtod_l+0x2c6>
 8008b92:	2a6e      	cmp	r2, #110	; 0x6e
 8008b94:	e7db      	b.n	8008b4e <_strtod_l+0x30e>
 8008b96:	4990      	ldr	r1, [pc, #576]	; (8008dd8 <_strtod_l+0x598>)
 8008b98:	a817      	add	r0, sp, #92	; 0x5c
 8008b9a:	f001 ff73 	bl	800aa84 <__match>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f43f aeb0 	beq.w	8008904 <_strtod_l+0xc4>
 8008ba4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ba6:	498d      	ldr	r1, [pc, #564]	; (8008ddc <_strtod_l+0x59c>)
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	a817      	add	r0, sp, #92	; 0x5c
 8008bac:	9317      	str	r3, [sp, #92]	; 0x5c
 8008bae:	f001 ff69 	bl	800aa84 <__match>
 8008bb2:	b910      	cbnz	r0, 8008bba <_strtod_l+0x37a>
 8008bb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	9317      	str	r3, [sp, #92]	; 0x5c
 8008bba:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008dec <_strtod_l+0x5ac>
 8008bbe:	f04f 0a00 	mov.w	sl, #0
 8008bc2:	e681      	b.n	80088c8 <_strtod_l+0x88>
 8008bc4:	4886      	ldr	r0, [pc, #536]	; (8008de0 <_strtod_l+0x5a0>)
 8008bc6:	f003 fbf3 	bl	800c3b0 <nan>
 8008bca:	ec5b ab10 	vmov	sl, fp, d0
 8008bce:	e67b      	b.n	80088c8 <_strtod_l+0x88>
 8008bd0:	9b05      	ldr	r3, [sp, #20]
 8008bd2:	9807      	ldr	r0, [sp, #28]
 8008bd4:	1af3      	subs	r3, r6, r3
 8008bd6:	2f00      	cmp	r7, #0
 8008bd8:	bf08      	it	eq
 8008bda:	462f      	moveq	r7, r5
 8008bdc:	2d10      	cmp	r5, #16
 8008bde:	9306      	str	r3, [sp, #24]
 8008be0:	46a8      	mov	r8, r5
 8008be2:	bfa8      	it	ge
 8008be4:	f04f 0810 	movge.w	r8, #16
 8008be8:	f7f7 fc8c 	bl	8000504 <__aeabi_ui2d>
 8008bec:	2d09      	cmp	r5, #9
 8008bee:	4682      	mov	sl, r0
 8008bf0:	468b      	mov	fp, r1
 8008bf2:	dd13      	ble.n	8008c1c <_strtod_l+0x3dc>
 8008bf4:	4b7b      	ldr	r3, [pc, #492]	; (8008de4 <_strtod_l+0x5a4>)
 8008bf6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008bfa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008bfe:	f7f7 fcfb 	bl	80005f8 <__aeabi_dmul>
 8008c02:	4682      	mov	sl, r0
 8008c04:	4648      	mov	r0, r9
 8008c06:	468b      	mov	fp, r1
 8008c08:	f7f7 fc7c 	bl	8000504 <__aeabi_ui2d>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4650      	mov	r0, sl
 8008c12:	4659      	mov	r1, fp
 8008c14:	f7f7 fb3a 	bl	800028c <__adddf3>
 8008c18:	4682      	mov	sl, r0
 8008c1a:	468b      	mov	fp, r1
 8008c1c:	2d0f      	cmp	r5, #15
 8008c1e:	dc38      	bgt.n	8008c92 <_strtod_l+0x452>
 8008c20:	9b06      	ldr	r3, [sp, #24]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f43f ae50 	beq.w	80088c8 <_strtod_l+0x88>
 8008c28:	dd24      	ble.n	8008c74 <_strtod_l+0x434>
 8008c2a:	2b16      	cmp	r3, #22
 8008c2c:	dc0b      	bgt.n	8008c46 <_strtod_l+0x406>
 8008c2e:	496d      	ldr	r1, [pc, #436]	; (8008de4 <_strtod_l+0x5a4>)
 8008c30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c38:	4652      	mov	r2, sl
 8008c3a:	465b      	mov	r3, fp
 8008c3c:	f7f7 fcdc 	bl	80005f8 <__aeabi_dmul>
 8008c40:	4682      	mov	sl, r0
 8008c42:	468b      	mov	fp, r1
 8008c44:	e640      	b.n	80088c8 <_strtod_l+0x88>
 8008c46:	9a06      	ldr	r2, [sp, #24]
 8008c48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	db20      	blt.n	8008c92 <_strtod_l+0x452>
 8008c50:	4c64      	ldr	r4, [pc, #400]	; (8008de4 <_strtod_l+0x5a4>)
 8008c52:	f1c5 050f 	rsb	r5, r5, #15
 8008c56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008c5a:	4652      	mov	r2, sl
 8008c5c:	465b      	mov	r3, fp
 8008c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c62:	f7f7 fcc9 	bl	80005f8 <__aeabi_dmul>
 8008c66:	9b06      	ldr	r3, [sp, #24]
 8008c68:	1b5d      	subs	r5, r3, r5
 8008c6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008c6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008c72:	e7e3      	b.n	8008c3c <_strtod_l+0x3fc>
 8008c74:	9b06      	ldr	r3, [sp, #24]
 8008c76:	3316      	adds	r3, #22
 8008c78:	db0b      	blt.n	8008c92 <_strtod_l+0x452>
 8008c7a:	9b05      	ldr	r3, [sp, #20]
 8008c7c:	1b9e      	subs	r6, r3, r6
 8008c7e:	4b59      	ldr	r3, [pc, #356]	; (8008de4 <_strtod_l+0x5a4>)
 8008c80:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008c84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c88:	4650      	mov	r0, sl
 8008c8a:	4659      	mov	r1, fp
 8008c8c:	f7f7 fdde 	bl	800084c <__aeabi_ddiv>
 8008c90:	e7d6      	b.n	8008c40 <_strtod_l+0x400>
 8008c92:	9b06      	ldr	r3, [sp, #24]
 8008c94:	eba5 0808 	sub.w	r8, r5, r8
 8008c98:	4498      	add	r8, r3
 8008c9a:	f1b8 0f00 	cmp.w	r8, #0
 8008c9e:	dd74      	ble.n	8008d8a <_strtod_l+0x54a>
 8008ca0:	f018 030f 	ands.w	r3, r8, #15
 8008ca4:	d00a      	beq.n	8008cbc <_strtod_l+0x47c>
 8008ca6:	494f      	ldr	r1, [pc, #316]	; (8008de4 <_strtod_l+0x5a4>)
 8008ca8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008cac:	4652      	mov	r2, sl
 8008cae:	465b      	mov	r3, fp
 8008cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cb4:	f7f7 fca0 	bl	80005f8 <__aeabi_dmul>
 8008cb8:	4682      	mov	sl, r0
 8008cba:	468b      	mov	fp, r1
 8008cbc:	f038 080f 	bics.w	r8, r8, #15
 8008cc0:	d04f      	beq.n	8008d62 <_strtod_l+0x522>
 8008cc2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008cc6:	dd22      	ble.n	8008d0e <_strtod_l+0x4ce>
 8008cc8:	2500      	movs	r5, #0
 8008cca:	462e      	mov	r6, r5
 8008ccc:	9507      	str	r5, [sp, #28]
 8008cce:	9505      	str	r5, [sp, #20]
 8008cd0:	2322      	movs	r3, #34	; 0x22
 8008cd2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008dec <_strtod_l+0x5ac>
 8008cd6:	6023      	str	r3, [r4, #0]
 8008cd8:	f04f 0a00 	mov.w	sl, #0
 8008cdc:	9b07      	ldr	r3, [sp, #28]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f43f adf2 	beq.w	80088c8 <_strtod_l+0x88>
 8008ce4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f001 fffe 	bl	800ace8 <_Bfree>
 8008cec:	9905      	ldr	r1, [sp, #20]
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f001 fffa 	bl	800ace8 <_Bfree>
 8008cf4:	4631      	mov	r1, r6
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	f001 fff6 	bl	800ace8 <_Bfree>
 8008cfc:	9907      	ldr	r1, [sp, #28]
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f001 fff2 	bl	800ace8 <_Bfree>
 8008d04:	4629      	mov	r1, r5
 8008d06:	4620      	mov	r0, r4
 8008d08:	f001 ffee 	bl	800ace8 <_Bfree>
 8008d0c:	e5dc      	b.n	80088c8 <_strtod_l+0x88>
 8008d0e:	4b36      	ldr	r3, [pc, #216]	; (8008de8 <_strtod_l+0x5a8>)
 8008d10:	9304      	str	r3, [sp, #16]
 8008d12:	2300      	movs	r3, #0
 8008d14:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008d18:	4650      	mov	r0, sl
 8008d1a:	4659      	mov	r1, fp
 8008d1c:	4699      	mov	r9, r3
 8008d1e:	f1b8 0f01 	cmp.w	r8, #1
 8008d22:	dc21      	bgt.n	8008d68 <_strtod_l+0x528>
 8008d24:	b10b      	cbz	r3, 8008d2a <_strtod_l+0x4ea>
 8008d26:	4682      	mov	sl, r0
 8008d28:	468b      	mov	fp, r1
 8008d2a:	4b2f      	ldr	r3, [pc, #188]	; (8008de8 <_strtod_l+0x5a8>)
 8008d2c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008d30:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008d34:	4652      	mov	r2, sl
 8008d36:	465b      	mov	r3, fp
 8008d38:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008d3c:	f7f7 fc5c 	bl	80005f8 <__aeabi_dmul>
 8008d40:	4b2a      	ldr	r3, [pc, #168]	; (8008dec <_strtod_l+0x5ac>)
 8008d42:	460a      	mov	r2, r1
 8008d44:	400b      	ands	r3, r1
 8008d46:	492a      	ldr	r1, [pc, #168]	; (8008df0 <_strtod_l+0x5b0>)
 8008d48:	428b      	cmp	r3, r1
 8008d4a:	4682      	mov	sl, r0
 8008d4c:	d8bc      	bhi.n	8008cc8 <_strtod_l+0x488>
 8008d4e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008d52:	428b      	cmp	r3, r1
 8008d54:	bf86      	itte	hi
 8008d56:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008df4 <_strtod_l+0x5b4>
 8008d5a:	f04f 3aff 	movhi.w	sl, #4294967295
 8008d5e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008d62:	2300      	movs	r3, #0
 8008d64:	9304      	str	r3, [sp, #16]
 8008d66:	e084      	b.n	8008e72 <_strtod_l+0x632>
 8008d68:	f018 0f01 	tst.w	r8, #1
 8008d6c:	d005      	beq.n	8008d7a <_strtod_l+0x53a>
 8008d6e:	9b04      	ldr	r3, [sp, #16]
 8008d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d74:	f7f7 fc40 	bl	80005f8 <__aeabi_dmul>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	9a04      	ldr	r2, [sp, #16]
 8008d7c:	3208      	adds	r2, #8
 8008d7e:	f109 0901 	add.w	r9, r9, #1
 8008d82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008d86:	9204      	str	r2, [sp, #16]
 8008d88:	e7c9      	b.n	8008d1e <_strtod_l+0x4de>
 8008d8a:	d0ea      	beq.n	8008d62 <_strtod_l+0x522>
 8008d8c:	f1c8 0800 	rsb	r8, r8, #0
 8008d90:	f018 020f 	ands.w	r2, r8, #15
 8008d94:	d00a      	beq.n	8008dac <_strtod_l+0x56c>
 8008d96:	4b13      	ldr	r3, [pc, #76]	; (8008de4 <_strtod_l+0x5a4>)
 8008d98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d9c:	4650      	mov	r0, sl
 8008d9e:	4659      	mov	r1, fp
 8008da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da4:	f7f7 fd52 	bl	800084c <__aeabi_ddiv>
 8008da8:	4682      	mov	sl, r0
 8008daa:	468b      	mov	fp, r1
 8008dac:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008db0:	d0d7      	beq.n	8008d62 <_strtod_l+0x522>
 8008db2:	f1b8 0f1f 	cmp.w	r8, #31
 8008db6:	dd1f      	ble.n	8008df8 <_strtod_l+0x5b8>
 8008db8:	2500      	movs	r5, #0
 8008dba:	462e      	mov	r6, r5
 8008dbc:	9507      	str	r5, [sp, #28]
 8008dbe:	9505      	str	r5, [sp, #20]
 8008dc0:	2322      	movs	r3, #34	; 0x22
 8008dc2:	f04f 0a00 	mov.w	sl, #0
 8008dc6:	f04f 0b00 	mov.w	fp, #0
 8008dca:	6023      	str	r3, [r4, #0]
 8008dcc:	e786      	b.n	8008cdc <_strtod_l+0x49c>
 8008dce:	bf00      	nop
 8008dd0:	0800edad 	.word	0x0800edad
 8008dd4:	0800edec 	.word	0x0800edec
 8008dd8:	0800eda5 	.word	0x0800eda5
 8008ddc:	0800ef51 	.word	0x0800ef51
 8008de0:	0800f27b 	.word	0x0800f27b
 8008de4:	0800f140 	.word	0x0800f140
 8008de8:	0800f118 	.word	0x0800f118
 8008dec:	7ff00000 	.word	0x7ff00000
 8008df0:	7ca00000 	.word	0x7ca00000
 8008df4:	7fefffff 	.word	0x7fefffff
 8008df8:	f018 0310 	ands.w	r3, r8, #16
 8008dfc:	bf18      	it	ne
 8008dfe:	236a      	movne	r3, #106	; 0x6a
 8008e00:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80091b0 <_strtod_l+0x970>
 8008e04:	9304      	str	r3, [sp, #16]
 8008e06:	4650      	mov	r0, sl
 8008e08:	4659      	mov	r1, fp
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f018 0f01 	tst.w	r8, #1
 8008e10:	d004      	beq.n	8008e1c <_strtod_l+0x5dc>
 8008e12:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008e16:	f7f7 fbef 	bl	80005f8 <__aeabi_dmul>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008e20:	f109 0908 	add.w	r9, r9, #8
 8008e24:	d1f2      	bne.n	8008e0c <_strtod_l+0x5cc>
 8008e26:	b10b      	cbz	r3, 8008e2c <_strtod_l+0x5ec>
 8008e28:	4682      	mov	sl, r0
 8008e2a:	468b      	mov	fp, r1
 8008e2c:	9b04      	ldr	r3, [sp, #16]
 8008e2e:	b1c3      	cbz	r3, 8008e62 <_strtod_l+0x622>
 8008e30:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008e34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	4659      	mov	r1, fp
 8008e3c:	dd11      	ble.n	8008e62 <_strtod_l+0x622>
 8008e3e:	2b1f      	cmp	r3, #31
 8008e40:	f340 8124 	ble.w	800908c <_strtod_l+0x84c>
 8008e44:	2b34      	cmp	r3, #52	; 0x34
 8008e46:	bfde      	ittt	le
 8008e48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008e4c:	f04f 33ff 	movle.w	r3, #4294967295
 8008e50:	fa03 f202 	lslle.w	r2, r3, r2
 8008e54:	f04f 0a00 	mov.w	sl, #0
 8008e58:	bfcc      	ite	gt
 8008e5a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008e5e:	ea02 0b01 	andle.w	fp, r2, r1
 8008e62:	2200      	movs	r2, #0
 8008e64:	2300      	movs	r3, #0
 8008e66:	4650      	mov	r0, sl
 8008e68:	4659      	mov	r1, fp
 8008e6a:	f7f7 fe2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d1a2      	bne.n	8008db8 <_strtod_l+0x578>
 8008e72:	9b07      	ldr	r3, [sp, #28]
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	9908      	ldr	r1, [sp, #32]
 8008e78:	462b      	mov	r3, r5
 8008e7a:	463a      	mov	r2, r7
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f001 ff9b 	bl	800adb8 <__s2b>
 8008e82:	9007      	str	r0, [sp, #28]
 8008e84:	2800      	cmp	r0, #0
 8008e86:	f43f af1f 	beq.w	8008cc8 <_strtod_l+0x488>
 8008e8a:	9b05      	ldr	r3, [sp, #20]
 8008e8c:	1b9e      	subs	r6, r3, r6
 8008e8e:	9b06      	ldr	r3, [sp, #24]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	bfb4      	ite	lt
 8008e94:	4633      	movlt	r3, r6
 8008e96:	2300      	movge	r3, #0
 8008e98:	930c      	str	r3, [sp, #48]	; 0x30
 8008e9a:	9b06      	ldr	r3, [sp, #24]
 8008e9c:	2500      	movs	r5, #0
 8008e9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008ea2:	9312      	str	r3, [sp, #72]	; 0x48
 8008ea4:	462e      	mov	r6, r5
 8008ea6:	9b07      	ldr	r3, [sp, #28]
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	6859      	ldr	r1, [r3, #4]
 8008eac:	f001 fedc 	bl	800ac68 <_Balloc>
 8008eb0:	9005      	str	r0, [sp, #20]
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	f43f af0c 	beq.w	8008cd0 <_strtod_l+0x490>
 8008eb8:	9b07      	ldr	r3, [sp, #28]
 8008eba:	691a      	ldr	r2, [r3, #16]
 8008ebc:	3202      	adds	r2, #2
 8008ebe:	f103 010c 	add.w	r1, r3, #12
 8008ec2:	0092      	lsls	r2, r2, #2
 8008ec4:	300c      	adds	r0, #12
 8008ec6:	f001 fec1 	bl	800ac4c <memcpy>
 8008eca:	ec4b ab10 	vmov	d0, sl, fp
 8008ece:	aa1a      	add	r2, sp, #104	; 0x68
 8008ed0:	a919      	add	r1, sp, #100	; 0x64
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f002 fab6 	bl	800b444 <__d2b>
 8008ed8:	ec4b ab18 	vmov	d8, sl, fp
 8008edc:	9018      	str	r0, [sp, #96]	; 0x60
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	f43f aef6 	beq.w	8008cd0 <_strtod_l+0x490>
 8008ee4:	2101      	movs	r1, #1
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f002 f800 	bl	800aeec <__i2b>
 8008eec:	4606      	mov	r6, r0
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	f43f aeee 	beq.w	8008cd0 <_strtod_l+0x490>
 8008ef4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ef6:	9904      	ldr	r1, [sp, #16]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	bfab      	itete	ge
 8008efc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008efe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008f00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008f02:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008f06:	bfac      	ite	ge
 8008f08:	eb03 0902 	addge.w	r9, r3, r2
 8008f0c:	1ad7      	sublt	r7, r2, r3
 8008f0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008f10:	eba3 0801 	sub.w	r8, r3, r1
 8008f14:	4490      	add	r8, r2
 8008f16:	4ba1      	ldr	r3, [pc, #644]	; (800919c <_strtod_l+0x95c>)
 8008f18:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f1c:	4598      	cmp	r8, r3
 8008f1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008f22:	f280 80c7 	bge.w	80090b4 <_strtod_l+0x874>
 8008f26:	eba3 0308 	sub.w	r3, r3, r8
 8008f2a:	2b1f      	cmp	r3, #31
 8008f2c:	eba2 0203 	sub.w	r2, r2, r3
 8008f30:	f04f 0101 	mov.w	r1, #1
 8008f34:	f300 80b1 	bgt.w	800909a <_strtod_l+0x85a>
 8008f38:	fa01 f303 	lsl.w	r3, r1, r3
 8008f3c:	930d      	str	r3, [sp, #52]	; 0x34
 8008f3e:	2300      	movs	r3, #0
 8008f40:	9308      	str	r3, [sp, #32]
 8008f42:	eb09 0802 	add.w	r8, r9, r2
 8008f46:	9b04      	ldr	r3, [sp, #16]
 8008f48:	45c1      	cmp	r9, r8
 8008f4a:	4417      	add	r7, r2
 8008f4c:	441f      	add	r7, r3
 8008f4e:	464b      	mov	r3, r9
 8008f50:	bfa8      	it	ge
 8008f52:	4643      	movge	r3, r8
 8008f54:	42bb      	cmp	r3, r7
 8008f56:	bfa8      	it	ge
 8008f58:	463b      	movge	r3, r7
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	bfc2      	ittt	gt
 8008f5e:	eba8 0803 	subgt.w	r8, r8, r3
 8008f62:	1aff      	subgt	r7, r7, r3
 8008f64:	eba9 0903 	subgt.w	r9, r9, r3
 8008f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	dd17      	ble.n	8008f9e <_strtod_l+0x75e>
 8008f6e:	4631      	mov	r1, r6
 8008f70:	461a      	mov	r2, r3
 8008f72:	4620      	mov	r0, r4
 8008f74:	f002 f87a 	bl	800b06c <__pow5mult>
 8008f78:	4606      	mov	r6, r0
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	f43f aea8 	beq.w	8008cd0 <_strtod_l+0x490>
 8008f80:	4601      	mov	r1, r0
 8008f82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008f84:	4620      	mov	r0, r4
 8008f86:	f001 ffc7 	bl	800af18 <__multiply>
 8008f8a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	f43f ae9f 	beq.w	8008cd0 <_strtod_l+0x490>
 8008f92:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f94:	4620      	mov	r0, r4
 8008f96:	f001 fea7 	bl	800ace8 <_Bfree>
 8008f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f9c:	9318      	str	r3, [sp, #96]	; 0x60
 8008f9e:	f1b8 0f00 	cmp.w	r8, #0
 8008fa2:	f300 808c 	bgt.w	80090be <_strtod_l+0x87e>
 8008fa6:	9b06      	ldr	r3, [sp, #24]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	dd08      	ble.n	8008fbe <_strtod_l+0x77e>
 8008fac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fae:	9905      	ldr	r1, [sp, #20]
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f002 f85b 	bl	800b06c <__pow5mult>
 8008fb6:	9005      	str	r0, [sp, #20]
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	f43f ae89 	beq.w	8008cd0 <_strtod_l+0x490>
 8008fbe:	2f00      	cmp	r7, #0
 8008fc0:	dd08      	ble.n	8008fd4 <_strtod_l+0x794>
 8008fc2:	9905      	ldr	r1, [sp, #20]
 8008fc4:	463a      	mov	r2, r7
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f002 f8aa 	bl	800b120 <__lshift>
 8008fcc:	9005      	str	r0, [sp, #20]
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	f43f ae7e 	beq.w	8008cd0 <_strtod_l+0x490>
 8008fd4:	f1b9 0f00 	cmp.w	r9, #0
 8008fd8:	dd08      	ble.n	8008fec <_strtod_l+0x7ac>
 8008fda:	4631      	mov	r1, r6
 8008fdc:	464a      	mov	r2, r9
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f002 f89e 	bl	800b120 <__lshift>
 8008fe4:	4606      	mov	r6, r0
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	f43f ae72 	beq.w	8008cd0 <_strtod_l+0x490>
 8008fec:	9a05      	ldr	r2, [sp, #20]
 8008fee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f002 f921 	bl	800b238 <__mdiff>
 8008ff6:	4605      	mov	r5, r0
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	f43f ae69 	beq.w	8008cd0 <_strtod_l+0x490>
 8008ffe:	68c3      	ldr	r3, [r0, #12]
 8009000:	930b      	str	r3, [sp, #44]	; 0x2c
 8009002:	2300      	movs	r3, #0
 8009004:	60c3      	str	r3, [r0, #12]
 8009006:	4631      	mov	r1, r6
 8009008:	f002 f8fa 	bl	800b200 <__mcmp>
 800900c:	2800      	cmp	r0, #0
 800900e:	da60      	bge.n	80090d2 <_strtod_l+0x892>
 8009010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009012:	ea53 030a 	orrs.w	r3, r3, sl
 8009016:	f040 8082 	bne.w	800911e <_strtod_l+0x8de>
 800901a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800901e:	2b00      	cmp	r3, #0
 8009020:	d17d      	bne.n	800911e <_strtod_l+0x8de>
 8009022:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009026:	0d1b      	lsrs	r3, r3, #20
 8009028:	051b      	lsls	r3, r3, #20
 800902a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800902e:	d976      	bls.n	800911e <_strtod_l+0x8de>
 8009030:	696b      	ldr	r3, [r5, #20]
 8009032:	b913      	cbnz	r3, 800903a <_strtod_l+0x7fa>
 8009034:	692b      	ldr	r3, [r5, #16]
 8009036:	2b01      	cmp	r3, #1
 8009038:	dd71      	ble.n	800911e <_strtod_l+0x8de>
 800903a:	4629      	mov	r1, r5
 800903c:	2201      	movs	r2, #1
 800903e:	4620      	mov	r0, r4
 8009040:	f002 f86e 	bl	800b120 <__lshift>
 8009044:	4631      	mov	r1, r6
 8009046:	4605      	mov	r5, r0
 8009048:	f002 f8da 	bl	800b200 <__mcmp>
 800904c:	2800      	cmp	r0, #0
 800904e:	dd66      	ble.n	800911e <_strtod_l+0x8de>
 8009050:	9904      	ldr	r1, [sp, #16]
 8009052:	4a53      	ldr	r2, [pc, #332]	; (80091a0 <_strtod_l+0x960>)
 8009054:	465b      	mov	r3, fp
 8009056:	2900      	cmp	r1, #0
 8009058:	f000 8081 	beq.w	800915e <_strtod_l+0x91e>
 800905c:	ea02 010b 	and.w	r1, r2, fp
 8009060:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009064:	dc7b      	bgt.n	800915e <_strtod_l+0x91e>
 8009066:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800906a:	f77f aea9 	ble.w	8008dc0 <_strtod_l+0x580>
 800906e:	4b4d      	ldr	r3, [pc, #308]	; (80091a4 <_strtod_l+0x964>)
 8009070:	4650      	mov	r0, sl
 8009072:	4659      	mov	r1, fp
 8009074:	2200      	movs	r2, #0
 8009076:	f7f7 fabf 	bl	80005f8 <__aeabi_dmul>
 800907a:	460b      	mov	r3, r1
 800907c:	4303      	orrs	r3, r0
 800907e:	bf08      	it	eq
 8009080:	2322      	moveq	r3, #34	; 0x22
 8009082:	4682      	mov	sl, r0
 8009084:	468b      	mov	fp, r1
 8009086:	bf08      	it	eq
 8009088:	6023      	streq	r3, [r4, #0]
 800908a:	e62b      	b.n	8008ce4 <_strtod_l+0x4a4>
 800908c:	f04f 32ff 	mov.w	r2, #4294967295
 8009090:	fa02 f303 	lsl.w	r3, r2, r3
 8009094:	ea03 0a0a 	and.w	sl, r3, sl
 8009098:	e6e3      	b.n	8008e62 <_strtod_l+0x622>
 800909a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800909e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80090a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80090a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80090aa:	fa01 f308 	lsl.w	r3, r1, r8
 80090ae:	9308      	str	r3, [sp, #32]
 80090b0:	910d      	str	r1, [sp, #52]	; 0x34
 80090b2:	e746      	b.n	8008f42 <_strtod_l+0x702>
 80090b4:	2300      	movs	r3, #0
 80090b6:	9308      	str	r3, [sp, #32]
 80090b8:	2301      	movs	r3, #1
 80090ba:	930d      	str	r3, [sp, #52]	; 0x34
 80090bc:	e741      	b.n	8008f42 <_strtod_l+0x702>
 80090be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80090c0:	4642      	mov	r2, r8
 80090c2:	4620      	mov	r0, r4
 80090c4:	f002 f82c 	bl	800b120 <__lshift>
 80090c8:	9018      	str	r0, [sp, #96]	; 0x60
 80090ca:	2800      	cmp	r0, #0
 80090cc:	f47f af6b 	bne.w	8008fa6 <_strtod_l+0x766>
 80090d0:	e5fe      	b.n	8008cd0 <_strtod_l+0x490>
 80090d2:	465f      	mov	r7, fp
 80090d4:	d16e      	bne.n	80091b4 <_strtod_l+0x974>
 80090d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090dc:	b342      	cbz	r2, 8009130 <_strtod_l+0x8f0>
 80090de:	4a32      	ldr	r2, [pc, #200]	; (80091a8 <_strtod_l+0x968>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d128      	bne.n	8009136 <_strtod_l+0x8f6>
 80090e4:	9b04      	ldr	r3, [sp, #16]
 80090e6:	4651      	mov	r1, sl
 80090e8:	b1eb      	cbz	r3, 8009126 <_strtod_l+0x8e6>
 80090ea:	4b2d      	ldr	r3, [pc, #180]	; (80091a0 <_strtod_l+0x960>)
 80090ec:	403b      	ands	r3, r7
 80090ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80090f2:	f04f 32ff 	mov.w	r2, #4294967295
 80090f6:	d819      	bhi.n	800912c <_strtod_l+0x8ec>
 80090f8:	0d1b      	lsrs	r3, r3, #20
 80090fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80090fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009102:	4299      	cmp	r1, r3
 8009104:	d117      	bne.n	8009136 <_strtod_l+0x8f6>
 8009106:	4b29      	ldr	r3, [pc, #164]	; (80091ac <_strtod_l+0x96c>)
 8009108:	429f      	cmp	r7, r3
 800910a:	d102      	bne.n	8009112 <_strtod_l+0x8d2>
 800910c:	3101      	adds	r1, #1
 800910e:	f43f addf 	beq.w	8008cd0 <_strtod_l+0x490>
 8009112:	4b23      	ldr	r3, [pc, #140]	; (80091a0 <_strtod_l+0x960>)
 8009114:	403b      	ands	r3, r7
 8009116:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800911a:	f04f 0a00 	mov.w	sl, #0
 800911e:	9b04      	ldr	r3, [sp, #16]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1a4      	bne.n	800906e <_strtod_l+0x82e>
 8009124:	e5de      	b.n	8008ce4 <_strtod_l+0x4a4>
 8009126:	f04f 33ff 	mov.w	r3, #4294967295
 800912a:	e7ea      	b.n	8009102 <_strtod_l+0x8c2>
 800912c:	4613      	mov	r3, r2
 800912e:	e7e8      	b.n	8009102 <_strtod_l+0x8c2>
 8009130:	ea53 030a 	orrs.w	r3, r3, sl
 8009134:	d08c      	beq.n	8009050 <_strtod_l+0x810>
 8009136:	9b08      	ldr	r3, [sp, #32]
 8009138:	b1db      	cbz	r3, 8009172 <_strtod_l+0x932>
 800913a:	423b      	tst	r3, r7
 800913c:	d0ef      	beq.n	800911e <_strtod_l+0x8de>
 800913e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009140:	9a04      	ldr	r2, [sp, #16]
 8009142:	4650      	mov	r0, sl
 8009144:	4659      	mov	r1, fp
 8009146:	b1c3      	cbz	r3, 800917a <_strtod_l+0x93a>
 8009148:	f7ff fb5d 	bl	8008806 <sulp>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	ec51 0b18 	vmov	r0, r1, d8
 8009154:	f7f7 f89a 	bl	800028c <__adddf3>
 8009158:	4682      	mov	sl, r0
 800915a:	468b      	mov	fp, r1
 800915c:	e7df      	b.n	800911e <_strtod_l+0x8de>
 800915e:	4013      	ands	r3, r2
 8009160:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009164:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009168:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800916c:	f04f 3aff 	mov.w	sl, #4294967295
 8009170:	e7d5      	b.n	800911e <_strtod_l+0x8de>
 8009172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009174:	ea13 0f0a 	tst.w	r3, sl
 8009178:	e7e0      	b.n	800913c <_strtod_l+0x8fc>
 800917a:	f7ff fb44 	bl	8008806 <sulp>
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	ec51 0b18 	vmov	r0, r1, d8
 8009186:	f7f7 f87f 	bl	8000288 <__aeabi_dsub>
 800918a:	2200      	movs	r2, #0
 800918c:	2300      	movs	r3, #0
 800918e:	4682      	mov	sl, r0
 8009190:	468b      	mov	fp, r1
 8009192:	f7f7 fc99 	bl	8000ac8 <__aeabi_dcmpeq>
 8009196:	2800      	cmp	r0, #0
 8009198:	d0c1      	beq.n	800911e <_strtod_l+0x8de>
 800919a:	e611      	b.n	8008dc0 <_strtod_l+0x580>
 800919c:	fffffc02 	.word	0xfffffc02
 80091a0:	7ff00000 	.word	0x7ff00000
 80091a4:	39500000 	.word	0x39500000
 80091a8:	000fffff 	.word	0x000fffff
 80091ac:	7fefffff 	.word	0x7fefffff
 80091b0:	0800ee00 	.word	0x0800ee00
 80091b4:	4631      	mov	r1, r6
 80091b6:	4628      	mov	r0, r5
 80091b8:	f002 f9a0 	bl	800b4fc <__ratio>
 80091bc:	ec59 8b10 	vmov	r8, r9, d0
 80091c0:	ee10 0a10 	vmov	r0, s0
 80091c4:	2200      	movs	r2, #0
 80091c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80091ca:	4649      	mov	r1, r9
 80091cc:	f7f7 fc90 	bl	8000af0 <__aeabi_dcmple>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d07a      	beq.n	80092ca <_strtod_l+0xa8a>
 80091d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d04a      	beq.n	8009270 <_strtod_l+0xa30>
 80091da:	4b95      	ldr	r3, [pc, #596]	; (8009430 <_strtod_l+0xbf0>)
 80091dc:	2200      	movs	r2, #0
 80091de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80091e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009430 <_strtod_l+0xbf0>
 80091e6:	f04f 0800 	mov.w	r8, #0
 80091ea:	4b92      	ldr	r3, [pc, #584]	; (8009434 <_strtod_l+0xbf4>)
 80091ec:	403b      	ands	r3, r7
 80091ee:	930d      	str	r3, [sp, #52]	; 0x34
 80091f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091f2:	4b91      	ldr	r3, [pc, #580]	; (8009438 <_strtod_l+0xbf8>)
 80091f4:	429a      	cmp	r2, r3
 80091f6:	f040 80b0 	bne.w	800935a <_strtod_l+0xb1a>
 80091fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80091fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009202:	ec4b ab10 	vmov	d0, sl, fp
 8009206:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800920a:	f002 f89f 	bl	800b34c <__ulp>
 800920e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009212:	ec53 2b10 	vmov	r2, r3, d0
 8009216:	f7f7 f9ef 	bl	80005f8 <__aeabi_dmul>
 800921a:	4652      	mov	r2, sl
 800921c:	465b      	mov	r3, fp
 800921e:	f7f7 f835 	bl	800028c <__adddf3>
 8009222:	460b      	mov	r3, r1
 8009224:	4983      	ldr	r1, [pc, #524]	; (8009434 <_strtod_l+0xbf4>)
 8009226:	4a85      	ldr	r2, [pc, #532]	; (800943c <_strtod_l+0xbfc>)
 8009228:	4019      	ands	r1, r3
 800922a:	4291      	cmp	r1, r2
 800922c:	4682      	mov	sl, r0
 800922e:	d960      	bls.n	80092f2 <_strtod_l+0xab2>
 8009230:	ee18 3a90 	vmov	r3, s17
 8009234:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009238:	4293      	cmp	r3, r2
 800923a:	d104      	bne.n	8009246 <_strtod_l+0xa06>
 800923c:	ee18 3a10 	vmov	r3, s16
 8009240:	3301      	adds	r3, #1
 8009242:	f43f ad45 	beq.w	8008cd0 <_strtod_l+0x490>
 8009246:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009448 <_strtod_l+0xc08>
 800924a:	f04f 3aff 	mov.w	sl, #4294967295
 800924e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009250:	4620      	mov	r0, r4
 8009252:	f001 fd49 	bl	800ace8 <_Bfree>
 8009256:	9905      	ldr	r1, [sp, #20]
 8009258:	4620      	mov	r0, r4
 800925a:	f001 fd45 	bl	800ace8 <_Bfree>
 800925e:	4631      	mov	r1, r6
 8009260:	4620      	mov	r0, r4
 8009262:	f001 fd41 	bl	800ace8 <_Bfree>
 8009266:	4629      	mov	r1, r5
 8009268:	4620      	mov	r0, r4
 800926a:	f001 fd3d 	bl	800ace8 <_Bfree>
 800926e:	e61a      	b.n	8008ea6 <_strtod_l+0x666>
 8009270:	f1ba 0f00 	cmp.w	sl, #0
 8009274:	d11b      	bne.n	80092ae <_strtod_l+0xa6e>
 8009276:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800927a:	b9f3      	cbnz	r3, 80092ba <_strtod_l+0xa7a>
 800927c:	4b6c      	ldr	r3, [pc, #432]	; (8009430 <_strtod_l+0xbf0>)
 800927e:	2200      	movs	r2, #0
 8009280:	4640      	mov	r0, r8
 8009282:	4649      	mov	r1, r9
 8009284:	f7f7 fc2a 	bl	8000adc <__aeabi_dcmplt>
 8009288:	b9d0      	cbnz	r0, 80092c0 <_strtod_l+0xa80>
 800928a:	4640      	mov	r0, r8
 800928c:	4649      	mov	r1, r9
 800928e:	4b6c      	ldr	r3, [pc, #432]	; (8009440 <_strtod_l+0xc00>)
 8009290:	2200      	movs	r2, #0
 8009292:	f7f7 f9b1 	bl	80005f8 <__aeabi_dmul>
 8009296:	4680      	mov	r8, r0
 8009298:	4689      	mov	r9, r1
 800929a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800929e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80092a2:	9315      	str	r3, [sp, #84]	; 0x54
 80092a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80092a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80092ac:	e79d      	b.n	80091ea <_strtod_l+0x9aa>
 80092ae:	f1ba 0f01 	cmp.w	sl, #1
 80092b2:	d102      	bne.n	80092ba <_strtod_l+0xa7a>
 80092b4:	2f00      	cmp	r7, #0
 80092b6:	f43f ad83 	beq.w	8008dc0 <_strtod_l+0x580>
 80092ba:	4b62      	ldr	r3, [pc, #392]	; (8009444 <_strtod_l+0xc04>)
 80092bc:	2200      	movs	r2, #0
 80092be:	e78e      	b.n	80091de <_strtod_l+0x99e>
 80092c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009440 <_strtod_l+0xc00>
 80092c4:	f04f 0800 	mov.w	r8, #0
 80092c8:	e7e7      	b.n	800929a <_strtod_l+0xa5a>
 80092ca:	4b5d      	ldr	r3, [pc, #372]	; (8009440 <_strtod_l+0xc00>)
 80092cc:	4640      	mov	r0, r8
 80092ce:	4649      	mov	r1, r9
 80092d0:	2200      	movs	r2, #0
 80092d2:	f7f7 f991 	bl	80005f8 <__aeabi_dmul>
 80092d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092d8:	4680      	mov	r8, r0
 80092da:	4689      	mov	r9, r1
 80092dc:	b933      	cbnz	r3, 80092ec <_strtod_l+0xaac>
 80092de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092e2:	900e      	str	r0, [sp, #56]	; 0x38
 80092e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80092e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80092ea:	e7dd      	b.n	80092a8 <_strtod_l+0xa68>
 80092ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80092f0:	e7f9      	b.n	80092e6 <_strtod_l+0xaa6>
 80092f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80092f6:	9b04      	ldr	r3, [sp, #16]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1a8      	bne.n	800924e <_strtod_l+0xa0e>
 80092fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009300:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009302:	0d1b      	lsrs	r3, r3, #20
 8009304:	051b      	lsls	r3, r3, #20
 8009306:	429a      	cmp	r2, r3
 8009308:	d1a1      	bne.n	800924e <_strtod_l+0xa0e>
 800930a:	4640      	mov	r0, r8
 800930c:	4649      	mov	r1, r9
 800930e:	f7f7 fcd3 	bl	8000cb8 <__aeabi_d2lz>
 8009312:	f7f7 f943 	bl	800059c <__aeabi_l2d>
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	4640      	mov	r0, r8
 800931c:	4649      	mov	r1, r9
 800931e:	f7f6 ffb3 	bl	8000288 <__aeabi_dsub>
 8009322:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009324:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009328:	ea43 030a 	orr.w	r3, r3, sl
 800932c:	4313      	orrs	r3, r2
 800932e:	4680      	mov	r8, r0
 8009330:	4689      	mov	r9, r1
 8009332:	d055      	beq.n	80093e0 <_strtod_l+0xba0>
 8009334:	a336      	add	r3, pc, #216	; (adr r3, 8009410 <_strtod_l+0xbd0>)
 8009336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933a:	f7f7 fbcf 	bl	8000adc <__aeabi_dcmplt>
 800933e:	2800      	cmp	r0, #0
 8009340:	f47f acd0 	bne.w	8008ce4 <_strtod_l+0x4a4>
 8009344:	a334      	add	r3, pc, #208	; (adr r3, 8009418 <_strtod_l+0xbd8>)
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	4640      	mov	r0, r8
 800934c:	4649      	mov	r1, r9
 800934e:	f7f7 fbe3 	bl	8000b18 <__aeabi_dcmpgt>
 8009352:	2800      	cmp	r0, #0
 8009354:	f43f af7b 	beq.w	800924e <_strtod_l+0xa0e>
 8009358:	e4c4      	b.n	8008ce4 <_strtod_l+0x4a4>
 800935a:	9b04      	ldr	r3, [sp, #16]
 800935c:	b333      	cbz	r3, 80093ac <_strtod_l+0xb6c>
 800935e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009360:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009364:	d822      	bhi.n	80093ac <_strtod_l+0xb6c>
 8009366:	a32e      	add	r3, pc, #184	; (adr r3, 8009420 <_strtod_l+0xbe0>)
 8009368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936c:	4640      	mov	r0, r8
 800936e:	4649      	mov	r1, r9
 8009370:	f7f7 fbbe 	bl	8000af0 <__aeabi_dcmple>
 8009374:	b1a0      	cbz	r0, 80093a0 <_strtod_l+0xb60>
 8009376:	4649      	mov	r1, r9
 8009378:	4640      	mov	r0, r8
 800937a:	f7f7 fc15 	bl	8000ba8 <__aeabi_d2uiz>
 800937e:	2801      	cmp	r0, #1
 8009380:	bf38      	it	cc
 8009382:	2001      	movcc	r0, #1
 8009384:	f7f7 f8be 	bl	8000504 <__aeabi_ui2d>
 8009388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800938a:	4680      	mov	r8, r0
 800938c:	4689      	mov	r9, r1
 800938e:	bb23      	cbnz	r3, 80093da <_strtod_l+0xb9a>
 8009390:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009394:	9010      	str	r0, [sp, #64]	; 0x40
 8009396:	9311      	str	r3, [sp, #68]	; 0x44
 8009398:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800939c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80093a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093a4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80093a8:	1a9b      	subs	r3, r3, r2
 80093aa:	9309      	str	r3, [sp, #36]	; 0x24
 80093ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80093b0:	eeb0 0a48 	vmov.f32	s0, s16
 80093b4:	eef0 0a68 	vmov.f32	s1, s17
 80093b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80093bc:	f001 ffc6 	bl	800b34c <__ulp>
 80093c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80093c4:	ec53 2b10 	vmov	r2, r3, d0
 80093c8:	f7f7 f916 	bl	80005f8 <__aeabi_dmul>
 80093cc:	ec53 2b18 	vmov	r2, r3, d8
 80093d0:	f7f6 ff5c 	bl	800028c <__adddf3>
 80093d4:	4682      	mov	sl, r0
 80093d6:	468b      	mov	fp, r1
 80093d8:	e78d      	b.n	80092f6 <_strtod_l+0xab6>
 80093da:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80093de:	e7db      	b.n	8009398 <_strtod_l+0xb58>
 80093e0:	a311      	add	r3, pc, #68	; (adr r3, 8009428 <_strtod_l+0xbe8>)
 80093e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e6:	f7f7 fb79 	bl	8000adc <__aeabi_dcmplt>
 80093ea:	e7b2      	b.n	8009352 <_strtod_l+0xb12>
 80093ec:	2300      	movs	r3, #0
 80093ee:	930a      	str	r3, [sp, #40]	; 0x28
 80093f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80093f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093f4:	6013      	str	r3, [r2, #0]
 80093f6:	f7ff ba6b 	b.w	80088d0 <_strtod_l+0x90>
 80093fa:	2a65      	cmp	r2, #101	; 0x65
 80093fc:	f43f ab5f 	beq.w	8008abe <_strtod_l+0x27e>
 8009400:	2a45      	cmp	r2, #69	; 0x45
 8009402:	f43f ab5c 	beq.w	8008abe <_strtod_l+0x27e>
 8009406:	2301      	movs	r3, #1
 8009408:	f7ff bb94 	b.w	8008b34 <_strtod_l+0x2f4>
 800940c:	f3af 8000 	nop.w
 8009410:	94a03595 	.word	0x94a03595
 8009414:	3fdfffff 	.word	0x3fdfffff
 8009418:	35afe535 	.word	0x35afe535
 800941c:	3fe00000 	.word	0x3fe00000
 8009420:	ffc00000 	.word	0xffc00000
 8009424:	41dfffff 	.word	0x41dfffff
 8009428:	94a03595 	.word	0x94a03595
 800942c:	3fcfffff 	.word	0x3fcfffff
 8009430:	3ff00000 	.word	0x3ff00000
 8009434:	7ff00000 	.word	0x7ff00000
 8009438:	7fe00000 	.word	0x7fe00000
 800943c:	7c9fffff 	.word	0x7c9fffff
 8009440:	3fe00000 	.word	0x3fe00000
 8009444:	bff00000 	.word	0xbff00000
 8009448:	7fefffff 	.word	0x7fefffff

0800944c <_strtod_r>:
 800944c:	4b01      	ldr	r3, [pc, #4]	; (8009454 <_strtod_r+0x8>)
 800944e:	f7ff b9f7 	b.w	8008840 <_strtod_l>
 8009452:	bf00      	nop
 8009454:	20000090 	.word	0x20000090

08009458 <_strtol_l.constprop.0>:
 8009458:	2b01      	cmp	r3, #1
 800945a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800945e:	d001      	beq.n	8009464 <_strtol_l.constprop.0+0xc>
 8009460:	2b24      	cmp	r3, #36	; 0x24
 8009462:	d906      	bls.n	8009472 <_strtol_l.constprop.0+0x1a>
 8009464:	f7fe fa5a 	bl	800791c <__errno>
 8009468:	2316      	movs	r3, #22
 800946a:	6003      	str	r3, [r0, #0]
 800946c:	2000      	movs	r0, #0
 800946e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009472:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009558 <_strtol_l.constprop.0+0x100>
 8009476:	460d      	mov	r5, r1
 8009478:	462e      	mov	r6, r5
 800947a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800947e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009482:	f017 0708 	ands.w	r7, r7, #8
 8009486:	d1f7      	bne.n	8009478 <_strtol_l.constprop.0+0x20>
 8009488:	2c2d      	cmp	r4, #45	; 0x2d
 800948a:	d132      	bne.n	80094f2 <_strtol_l.constprop.0+0x9a>
 800948c:	782c      	ldrb	r4, [r5, #0]
 800948e:	2701      	movs	r7, #1
 8009490:	1cb5      	adds	r5, r6, #2
 8009492:	2b00      	cmp	r3, #0
 8009494:	d05b      	beq.n	800954e <_strtol_l.constprop.0+0xf6>
 8009496:	2b10      	cmp	r3, #16
 8009498:	d109      	bne.n	80094ae <_strtol_l.constprop.0+0x56>
 800949a:	2c30      	cmp	r4, #48	; 0x30
 800949c:	d107      	bne.n	80094ae <_strtol_l.constprop.0+0x56>
 800949e:	782c      	ldrb	r4, [r5, #0]
 80094a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80094a4:	2c58      	cmp	r4, #88	; 0x58
 80094a6:	d14d      	bne.n	8009544 <_strtol_l.constprop.0+0xec>
 80094a8:	786c      	ldrb	r4, [r5, #1]
 80094aa:	2310      	movs	r3, #16
 80094ac:	3502      	adds	r5, #2
 80094ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80094b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80094b6:	f04f 0c00 	mov.w	ip, #0
 80094ba:	fbb8 f9f3 	udiv	r9, r8, r3
 80094be:	4666      	mov	r6, ip
 80094c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80094c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80094c8:	f1be 0f09 	cmp.w	lr, #9
 80094cc:	d816      	bhi.n	80094fc <_strtol_l.constprop.0+0xa4>
 80094ce:	4674      	mov	r4, lr
 80094d0:	42a3      	cmp	r3, r4
 80094d2:	dd24      	ble.n	800951e <_strtol_l.constprop.0+0xc6>
 80094d4:	f1bc 0f00 	cmp.w	ip, #0
 80094d8:	db1e      	blt.n	8009518 <_strtol_l.constprop.0+0xc0>
 80094da:	45b1      	cmp	r9, r6
 80094dc:	d31c      	bcc.n	8009518 <_strtol_l.constprop.0+0xc0>
 80094de:	d101      	bne.n	80094e4 <_strtol_l.constprop.0+0x8c>
 80094e0:	45a2      	cmp	sl, r4
 80094e2:	db19      	blt.n	8009518 <_strtol_l.constprop.0+0xc0>
 80094e4:	fb06 4603 	mla	r6, r6, r3, r4
 80094e8:	f04f 0c01 	mov.w	ip, #1
 80094ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094f0:	e7e8      	b.n	80094c4 <_strtol_l.constprop.0+0x6c>
 80094f2:	2c2b      	cmp	r4, #43	; 0x2b
 80094f4:	bf04      	itt	eq
 80094f6:	782c      	ldrbeq	r4, [r5, #0]
 80094f8:	1cb5      	addeq	r5, r6, #2
 80094fa:	e7ca      	b.n	8009492 <_strtol_l.constprop.0+0x3a>
 80094fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009500:	f1be 0f19 	cmp.w	lr, #25
 8009504:	d801      	bhi.n	800950a <_strtol_l.constprop.0+0xb2>
 8009506:	3c37      	subs	r4, #55	; 0x37
 8009508:	e7e2      	b.n	80094d0 <_strtol_l.constprop.0+0x78>
 800950a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800950e:	f1be 0f19 	cmp.w	lr, #25
 8009512:	d804      	bhi.n	800951e <_strtol_l.constprop.0+0xc6>
 8009514:	3c57      	subs	r4, #87	; 0x57
 8009516:	e7db      	b.n	80094d0 <_strtol_l.constprop.0+0x78>
 8009518:	f04f 3cff 	mov.w	ip, #4294967295
 800951c:	e7e6      	b.n	80094ec <_strtol_l.constprop.0+0x94>
 800951e:	f1bc 0f00 	cmp.w	ip, #0
 8009522:	da05      	bge.n	8009530 <_strtol_l.constprop.0+0xd8>
 8009524:	2322      	movs	r3, #34	; 0x22
 8009526:	6003      	str	r3, [r0, #0]
 8009528:	4646      	mov	r6, r8
 800952a:	b942      	cbnz	r2, 800953e <_strtol_l.constprop.0+0xe6>
 800952c:	4630      	mov	r0, r6
 800952e:	e79e      	b.n	800946e <_strtol_l.constprop.0+0x16>
 8009530:	b107      	cbz	r7, 8009534 <_strtol_l.constprop.0+0xdc>
 8009532:	4276      	negs	r6, r6
 8009534:	2a00      	cmp	r2, #0
 8009536:	d0f9      	beq.n	800952c <_strtol_l.constprop.0+0xd4>
 8009538:	f1bc 0f00 	cmp.w	ip, #0
 800953c:	d000      	beq.n	8009540 <_strtol_l.constprop.0+0xe8>
 800953e:	1e69      	subs	r1, r5, #1
 8009540:	6011      	str	r1, [r2, #0]
 8009542:	e7f3      	b.n	800952c <_strtol_l.constprop.0+0xd4>
 8009544:	2430      	movs	r4, #48	; 0x30
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1b1      	bne.n	80094ae <_strtol_l.constprop.0+0x56>
 800954a:	2308      	movs	r3, #8
 800954c:	e7af      	b.n	80094ae <_strtol_l.constprop.0+0x56>
 800954e:	2c30      	cmp	r4, #48	; 0x30
 8009550:	d0a5      	beq.n	800949e <_strtol_l.constprop.0+0x46>
 8009552:	230a      	movs	r3, #10
 8009554:	e7ab      	b.n	80094ae <_strtol_l.constprop.0+0x56>
 8009556:	bf00      	nop
 8009558:	0800ee4e 	.word	0x0800ee4e

0800955c <_strtol_r>:
 800955c:	f7ff bf7c 	b.w	8009458 <_strtol_l.constprop.0>

08009560 <__utoa>:
 8009560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009562:	4c1f      	ldr	r4, [pc, #124]	; (80095e0 <__utoa+0x80>)
 8009564:	b08b      	sub	sp, #44	; 0x2c
 8009566:	4605      	mov	r5, r0
 8009568:	460b      	mov	r3, r1
 800956a:	466e      	mov	r6, sp
 800956c:	f104 0c20 	add.w	ip, r4, #32
 8009570:	6820      	ldr	r0, [r4, #0]
 8009572:	6861      	ldr	r1, [r4, #4]
 8009574:	4637      	mov	r7, r6
 8009576:	c703      	stmia	r7!, {r0, r1}
 8009578:	3408      	adds	r4, #8
 800957a:	4564      	cmp	r4, ip
 800957c:	463e      	mov	r6, r7
 800957e:	d1f7      	bne.n	8009570 <__utoa+0x10>
 8009580:	7921      	ldrb	r1, [r4, #4]
 8009582:	7139      	strb	r1, [r7, #4]
 8009584:	1e91      	subs	r1, r2, #2
 8009586:	6820      	ldr	r0, [r4, #0]
 8009588:	6038      	str	r0, [r7, #0]
 800958a:	2922      	cmp	r1, #34	; 0x22
 800958c:	f04f 0100 	mov.w	r1, #0
 8009590:	d904      	bls.n	800959c <__utoa+0x3c>
 8009592:	7019      	strb	r1, [r3, #0]
 8009594:	460b      	mov	r3, r1
 8009596:	4618      	mov	r0, r3
 8009598:	b00b      	add	sp, #44	; 0x2c
 800959a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800959c:	1e58      	subs	r0, r3, #1
 800959e:	4684      	mov	ip, r0
 80095a0:	fbb5 f7f2 	udiv	r7, r5, r2
 80095a4:	fb02 5617 	mls	r6, r2, r7, r5
 80095a8:	3628      	adds	r6, #40	; 0x28
 80095aa:	446e      	add	r6, sp
 80095ac:	460c      	mov	r4, r1
 80095ae:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80095b2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80095b6:	462e      	mov	r6, r5
 80095b8:	42b2      	cmp	r2, r6
 80095ba:	f101 0101 	add.w	r1, r1, #1
 80095be:	463d      	mov	r5, r7
 80095c0:	d9ee      	bls.n	80095a0 <__utoa+0x40>
 80095c2:	2200      	movs	r2, #0
 80095c4:	545a      	strb	r2, [r3, r1]
 80095c6:	1919      	adds	r1, r3, r4
 80095c8:	1aa5      	subs	r5, r4, r2
 80095ca:	42aa      	cmp	r2, r5
 80095cc:	dae3      	bge.n	8009596 <__utoa+0x36>
 80095ce:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80095d2:	780e      	ldrb	r6, [r1, #0]
 80095d4:	7006      	strb	r6, [r0, #0]
 80095d6:	3201      	adds	r2, #1
 80095d8:	f801 5901 	strb.w	r5, [r1], #-1
 80095dc:	e7f4      	b.n	80095c8 <__utoa+0x68>
 80095de:	bf00      	nop
 80095e0:	0800ee28 	.word	0x0800ee28

080095e4 <_write_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	4d07      	ldr	r5, [pc, #28]	; (8009604 <_write_r+0x20>)
 80095e8:	4604      	mov	r4, r0
 80095ea:	4608      	mov	r0, r1
 80095ec:	4611      	mov	r1, r2
 80095ee:	2200      	movs	r2, #0
 80095f0:	602a      	str	r2, [r5, #0]
 80095f2:	461a      	mov	r2, r3
 80095f4:	f7f8 fdb7 	bl	8002166 <_write>
 80095f8:	1c43      	adds	r3, r0, #1
 80095fa:	d102      	bne.n	8009602 <_write_r+0x1e>
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	b103      	cbz	r3, 8009602 <_write_r+0x1e>
 8009600:	6023      	str	r3, [r4, #0]
 8009602:	bd38      	pop	{r3, r4, r5, pc}
 8009604:	20000924 	.word	0x20000924

08009608 <_close_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	4d06      	ldr	r5, [pc, #24]	; (8009624 <_close_r+0x1c>)
 800960c:	2300      	movs	r3, #0
 800960e:	4604      	mov	r4, r0
 8009610:	4608      	mov	r0, r1
 8009612:	602b      	str	r3, [r5, #0]
 8009614:	f7f8 fdc3 	bl	800219e <_close>
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	d102      	bne.n	8009622 <_close_r+0x1a>
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	b103      	cbz	r3, 8009622 <_close_r+0x1a>
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	20000924 	.word	0x20000924

08009628 <quorem>:
 8009628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	6903      	ldr	r3, [r0, #16]
 800962e:	690c      	ldr	r4, [r1, #16]
 8009630:	42a3      	cmp	r3, r4
 8009632:	4607      	mov	r7, r0
 8009634:	f2c0 8081 	blt.w	800973a <quorem+0x112>
 8009638:	3c01      	subs	r4, #1
 800963a:	f101 0814 	add.w	r8, r1, #20
 800963e:	f100 0514 	add.w	r5, r0, #20
 8009642:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009646:	9301      	str	r3, [sp, #4]
 8009648:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800964c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009650:	3301      	adds	r3, #1
 8009652:	429a      	cmp	r2, r3
 8009654:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009658:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800965c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009660:	d331      	bcc.n	80096c6 <quorem+0x9e>
 8009662:	f04f 0e00 	mov.w	lr, #0
 8009666:	4640      	mov	r0, r8
 8009668:	46ac      	mov	ip, r5
 800966a:	46f2      	mov	sl, lr
 800966c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009670:	b293      	uxth	r3, r2
 8009672:	fb06 e303 	mla	r3, r6, r3, lr
 8009676:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800967a:	b29b      	uxth	r3, r3
 800967c:	ebaa 0303 	sub.w	r3, sl, r3
 8009680:	f8dc a000 	ldr.w	sl, [ip]
 8009684:	0c12      	lsrs	r2, r2, #16
 8009686:	fa13 f38a 	uxtah	r3, r3, sl
 800968a:	fb06 e202 	mla	r2, r6, r2, lr
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	9b00      	ldr	r3, [sp, #0]
 8009692:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009696:	b292      	uxth	r2, r2
 8009698:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800969c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80096a4:	4581      	cmp	r9, r0
 80096a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096aa:	f84c 3b04 	str.w	r3, [ip], #4
 80096ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80096b2:	d2db      	bcs.n	800966c <quorem+0x44>
 80096b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80096b8:	b92b      	cbnz	r3, 80096c6 <quorem+0x9e>
 80096ba:	9b01      	ldr	r3, [sp, #4]
 80096bc:	3b04      	subs	r3, #4
 80096be:	429d      	cmp	r5, r3
 80096c0:	461a      	mov	r2, r3
 80096c2:	d32e      	bcc.n	8009722 <quorem+0xfa>
 80096c4:	613c      	str	r4, [r7, #16]
 80096c6:	4638      	mov	r0, r7
 80096c8:	f001 fd9a 	bl	800b200 <__mcmp>
 80096cc:	2800      	cmp	r0, #0
 80096ce:	db24      	blt.n	800971a <quorem+0xf2>
 80096d0:	3601      	adds	r6, #1
 80096d2:	4628      	mov	r0, r5
 80096d4:	f04f 0c00 	mov.w	ip, #0
 80096d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80096dc:	f8d0 e000 	ldr.w	lr, [r0]
 80096e0:	b293      	uxth	r3, r2
 80096e2:	ebac 0303 	sub.w	r3, ip, r3
 80096e6:	0c12      	lsrs	r2, r2, #16
 80096e8:	fa13 f38e 	uxtah	r3, r3, lr
 80096ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80096f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096fa:	45c1      	cmp	r9, r8
 80096fc:	f840 3b04 	str.w	r3, [r0], #4
 8009700:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009704:	d2e8      	bcs.n	80096d8 <quorem+0xb0>
 8009706:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800970a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800970e:	b922      	cbnz	r2, 800971a <quorem+0xf2>
 8009710:	3b04      	subs	r3, #4
 8009712:	429d      	cmp	r5, r3
 8009714:	461a      	mov	r2, r3
 8009716:	d30a      	bcc.n	800972e <quorem+0x106>
 8009718:	613c      	str	r4, [r7, #16]
 800971a:	4630      	mov	r0, r6
 800971c:	b003      	add	sp, #12
 800971e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009722:	6812      	ldr	r2, [r2, #0]
 8009724:	3b04      	subs	r3, #4
 8009726:	2a00      	cmp	r2, #0
 8009728:	d1cc      	bne.n	80096c4 <quorem+0x9c>
 800972a:	3c01      	subs	r4, #1
 800972c:	e7c7      	b.n	80096be <quorem+0x96>
 800972e:	6812      	ldr	r2, [r2, #0]
 8009730:	3b04      	subs	r3, #4
 8009732:	2a00      	cmp	r2, #0
 8009734:	d1f0      	bne.n	8009718 <quorem+0xf0>
 8009736:	3c01      	subs	r4, #1
 8009738:	e7eb      	b.n	8009712 <quorem+0xea>
 800973a:	2000      	movs	r0, #0
 800973c:	e7ee      	b.n	800971c <quorem+0xf4>
	...

08009740 <_dtoa_r>:
 8009740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	ed2d 8b04 	vpush	{d8-d9}
 8009748:	ec57 6b10 	vmov	r6, r7, d0
 800974c:	b093      	sub	sp, #76	; 0x4c
 800974e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009750:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009754:	9106      	str	r1, [sp, #24]
 8009756:	ee10 aa10 	vmov	sl, s0
 800975a:	4604      	mov	r4, r0
 800975c:	9209      	str	r2, [sp, #36]	; 0x24
 800975e:	930c      	str	r3, [sp, #48]	; 0x30
 8009760:	46bb      	mov	fp, r7
 8009762:	b975      	cbnz	r5, 8009782 <_dtoa_r+0x42>
 8009764:	2010      	movs	r0, #16
 8009766:	f001 fa57 	bl	800ac18 <malloc>
 800976a:	4602      	mov	r2, r0
 800976c:	6260      	str	r0, [r4, #36]	; 0x24
 800976e:	b920      	cbnz	r0, 800977a <_dtoa_r+0x3a>
 8009770:	4ba7      	ldr	r3, [pc, #668]	; (8009a10 <_dtoa_r+0x2d0>)
 8009772:	21ea      	movs	r1, #234	; 0xea
 8009774:	48a7      	ldr	r0, [pc, #668]	; (8009a14 <_dtoa_r+0x2d4>)
 8009776:	f002 fffb 	bl	800c770 <__assert_func>
 800977a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800977e:	6005      	str	r5, [r0, #0]
 8009780:	60c5      	str	r5, [r0, #12]
 8009782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009784:	6819      	ldr	r1, [r3, #0]
 8009786:	b151      	cbz	r1, 800979e <_dtoa_r+0x5e>
 8009788:	685a      	ldr	r2, [r3, #4]
 800978a:	604a      	str	r2, [r1, #4]
 800978c:	2301      	movs	r3, #1
 800978e:	4093      	lsls	r3, r2
 8009790:	608b      	str	r3, [r1, #8]
 8009792:	4620      	mov	r0, r4
 8009794:	f001 faa8 	bl	800ace8 <_Bfree>
 8009798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800979a:	2200      	movs	r2, #0
 800979c:	601a      	str	r2, [r3, #0]
 800979e:	1e3b      	subs	r3, r7, #0
 80097a0:	bfaa      	itet	ge
 80097a2:	2300      	movge	r3, #0
 80097a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80097a8:	f8c8 3000 	strge.w	r3, [r8]
 80097ac:	4b9a      	ldr	r3, [pc, #616]	; (8009a18 <_dtoa_r+0x2d8>)
 80097ae:	bfbc      	itt	lt
 80097b0:	2201      	movlt	r2, #1
 80097b2:	f8c8 2000 	strlt.w	r2, [r8]
 80097b6:	ea33 030b 	bics.w	r3, r3, fp
 80097ba:	d11b      	bne.n	80097f4 <_dtoa_r+0xb4>
 80097bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097be:	f242 730f 	movw	r3, #9999	; 0x270f
 80097c2:	6013      	str	r3, [r2, #0]
 80097c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097c8:	4333      	orrs	r3, r6
 80097ca:	f000 8592 	beq.w	800a2f2 <_dtoa_r+0xbb2>
 80097ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097d0:	b963      	cbnz	r3, 80097ec <_dtoa_r+0xac>
 80097d2:	4b92      	ldr	r3, [pc, #584]	; (8009a1c <_dtoa_r+0x2dc>)
 80097d4:	e022      	b.n	800981c <_dtoa_r+0xdc>
 80097d6:	4b92      	ldr	r3, [pc, #584]	; (8009a20 <_dtoa_r+0x2e0>)
 80097d8:	9301      	str	r3, [sp, #4]
 80097da:	3308      	adds	r3, #8
 80097dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	9801      	ldr	r0, [sp, #4]
 80097e2:	b013      	add	sp, #76	; 0x4c
 80097e4:	ecbd 8b04 	vpop	{d8-d9}
 80097e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ec:	4b8b      	ldr	r3, [pc, #556]	; (8009a1c <_dtoa_r+0x2dc>)
 80097ee:	9301      	str	r3, [sp, #4]
 80097f0:	3303      	adds	r3, #3
 80097f2:	e7f3      	b.n	80097dc <_dtoa_r+0x9c>
 80097f4:	2200      	movs	r2, #0
 80097f6:	2300      	movs	r3, #0
 80097f8:	4650      	mov	r0, sl
 80097fa:	4659      	mov	r1, fp
 80097fc:	f7f7 f964 	bl	8000ac8 <__aeabi_dcmpeq>
 8009800:	ec4b ab19 	vmov	d9, sl, fp
 8009804:	4680      	mov	r8, r0
 8009806:	b158      	cbz	r0, 8009820 <_dtoa_r+0xe0>
 8009808:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800980a:	2301      	movs	r3, #1
 800980c:	6013      	str	r3, [r2, #0]
 800980e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009810:	2b00      	cmp	r3, #0
 8009812:	f000 856b 	beq.w	800a2ec <_dtoa_r+0xbac>
 8009816:	4883      	ldr	r0, [pc, #524]	; (8009a24 <_dtoa_r+0x2e4>)
 8009818:	6018      	str	r0, [r3, #0]
 800981a:	1e43      	subs	r3, r0, #1
 800981c:	9301      	str	r3, [sp, #4]
 800981e:	e7df      	b.n	80097e0 <_dtoa_r+0xa0>
 8009820:	ec4b ab10 	vmov	d0, sl, fp
 8009824:	aa10      	add	r2, sp, #64	; 0x40
 8009826:	a911      	add	r1, sp, #68	; 0x44
 8009828:	4620      	mov	r0, r4
 800982a:	f001 fe0b 	bl	800b444 <__d2b>
 800982e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009832:	ee08 0a10 	vmov	s16, r0
 8009836:	2d00      	cmp	r5, #0
 8009838:	f000 8084 	beq.w	8009944 <_dtoa_r+0x204>
 800983c:	ee19 3a90 	vmov	r3, s19
 8009840:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009844:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009848:	4656      	mov	r6, sl
 800984a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800984e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009852:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009856:	4b74      	ldr	r3, [pc, #464]	; (8009a28 <_dtoa_r+0x2e8>)
 8009858:	2200      	movs	r2, #0
 800985a:	4630      	mov	r0, r6
 800985c:	4639      	mov	r1, r7
 800985e:	f7f6 fd13 	bl	8000288 <__aeabi_dsub>
 8009862:	a365      	add	r3, pc, #404	; (adr r3, 80099f8 <_dtoa_r+0x2b8>)
 8009864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009868:	f7f6 fec6 	bl	80005f8 <__aeabi_dmul>
 800986c:	a364      	add	r3, pc, #400	; (adr r3, 8009a00 <_dtoa_r+0x2c0>)
 800986e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009872:	f7f6 fd0b 	bl	800028c <__adddf3>
 8009876:	4606      	mov	r6, r0
 8009878:	4628      	mov	r0, r5
 800987a:	460f      	mov	r7, r1
 800987c:	f7f6 fe52 	bl	8000524 <__aeabi_i2d>
 8009880:	a361      	add	r3, pc, #388	; (adr r3, 8009a08 <_dtoa_r+0x2c8>)
 8009882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009886:	f7f6 feb7 	bl	80005f8 <__aeabi_dmul>
 800988a:	4602      	mov	r2, r0
 800988c:	460b      	mov	r3, r1
 800988e:	4630      	mov	r0, r6
 8009890:	4639      	mov	r1, r7
 8009892:	f7f6 fcfb 	bl	800028c <__adddf3>
 8009896:	4606      	mov	r6, r0
 8009898:	460f      	mov	r7, r1
 800989a:	f7f7 f95d 	bl	8000b58 <__aeabi_d2iz>
 800989e:	2200      	movs	r2, #0
 80098a0:	9000      	str	r0, [sp, #0]
 80098a2:	2300      	movs	r3, #0
 80098a4:	4630      	mov	r0, r6
 80098a6:	4639      	mov	r1, r7
 80098a8:	f7f7 f918 	bl	8000adc <__aeabi_dcmplt>
 80098ac:	b150      	cbz	r0, 80098c4 <_dtoa_r+0x184>
 80098ae:	9800      	ldr	r0, [sp, #0]
 80098b0:	f7f6 fe38 	bl	8000524 <__aeabi_i2d>
 80098b4:	4632      	mov	r2, r6
 80098b6:	463b      	mov	r3, r7
 80098b8:	f7f7 f906 	bl	8000ac8 <__aeabi_dcmpeq>
 80098bc:	b910      	cbnz	r0, 80098c4 <_dtoa_r+0x184>
 80098be:	9b00      	ldr	r3, [sp, #0]
 80098c0:	3b01      	subs	r3, #1
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	9b00      	ldr	r3, [sp, #0]
 80098c6:	2b16      	cmp	r3, #22
 80098c8:	d85a      	bhi.n	8009980 <_dtoa_r+0x240>
 80098ca:	9a00      	ldr	r2, [sp, #0]
 80098cc:	4b57      	ldr	r3, [pc, #348]	; (8009a2c <_dtoa_r+0x2ec>)
 80098ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d6:	ec51 0b19 	vmov	r0, r1, d9
 80098da:	f7f7 f8ff 	bl	8000adc <__aeabi_dcmplt>
 80098de:	2800      	cmp	r0, #0
 80098e0:	d050      	beq.n	8009984 <_dtoa_r+0x244>
 80098e2:	9b00      	ldr	r3, [sp, #0]
 80098e4:	3b01      	subs	r3, #1
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	2300      	movs	r3, #0
 80098ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80098ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098ee:	1b5d      	subs	r5, r3, r5
 80098f0:	1e6b      	subs	r3, r5, #1
 80098f2:	9305      	str	r3, [sp, #20]
 80098f4:	bf45      	ittet	mi
 80098f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80098fa:	9304      	strmi	r3, [sp, #16]
 80098fc:	2300      	movpl	r3, #0
 80098fe:	2300      	movmi	r3, #0
 8009900:	bf4c      	ite	mi
 8009902:	9305      	strmi	r3, [sp, #20]
 8009904:	9304      	strpl	r3, [sp, #16]
 8009906:	9b00      	ldr	r3, [sp, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	db3d      	blt.n	8009988 <_dtoa_r+0x248>
 800990c:	9b05      	ldr	r3, [sp, #20]
 800990e:	9a00      	ldr	r2, [sp, #0]
 8009910:	920a      	str	r2, [sp, #40]	; 0x28
 8009912:	4413      	add	r3, r2
 8009914:	9305      	str	r3, [sp, #20]
 8009916:	2300      	movs	r3, #0
 8009918:	9307      	str	r3, [sp, #28]
 800991a:	9b06      	ldr	r3, [sp, #24]
 800991c:	2b09      	cmp	r3, #9
 800991e:	f200 8089 	bhi.w	8009a34 <_dtoa_r+0x2f4>
 8009922:	2b05      	cmp	r3, #5
 8009924:	bfc4      	itt	gt
 8009926:	3b04      	subgt	r3, #4
 8009928:	9306      	strgt	r3, [sp, #24]
 800992a:	9b06      	ldr	r3, [sp, #24]
 800992c:	f1a3 0302 	sub.w	r3, r3, #2
 8009930:	bfcc      	ite	gt
 8009932:	2500      	movgt	r5, #0
 8009934:	2501      	movle	r5, #1
 8009936:	2b03      	cmp	r3, #3
 8009938:	f200 8087 	bhi.w	8009a4a <_dtoa_r+0x30a>
 800993c:	e8df f003 	tbb	[pc, r3]
 8009940:	59383a2d 	.word	0x59383a2d
 8009944:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009948:	441d      	add	r5, r3
 800994a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800994e:	2b20      	cmp	r3, #32
 8009950:	bfc1      	itttt	gt
 8009952:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009956:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800995a:	fa0b f303 	lslgt.w	r3, fp, r3
 800995e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009962:	bfda      	itte	le
 8009964:	f1c3 0320 	rsble	r3, r3, #32
 8009968:	fa06 f003 	lslle.w	r0, r6, r3
 800996c:	4318      	orrgt	r0, r3
 800996e:	f7f6 fdc9 	bl	8000504 <__aeabi_ui2d>
 8009972:	2301      	movs	r3, #1
 8009974:	4606      	mov	r6, r0
 8009976:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800997a:	3d01      	subs	r5, #1
 800997c:	930e      	str	r3, [sp, #56]	; 0x38
 800997e:	e76a      	b.n	8009856 <_dtoa_r+0x116>
 8009980:	2301      	movs	r3, #1
 8009982:	e7b2      	b.n	80098ea <_dtoa_r+0x1aa>
 8009984:	900b      	str	r0, [sp, #44]	; 0x2c
 8009986:	e7b1      	b.n	80098ec <_dtoa_r+0x1ac>
 8009988:	9b04      	ldr	r3, [sp, #16]
 800998a:	9a00      	ldr	r2, [sp, #0]
 800998c:	1a9b      	subs	r3, r3, r2
 800998e:	9304      	str	r3, [sp, #16]
 8009990:	4253      	negs	r3, r2
 8009992:	9307      	str	r3, [sp, #28]
 8009994:	2300      	movs	r3, #0
 8009996:	930a      	str	r3, [sp, #40]	; 0x28
 8009998:	e7bf      	b.n	800991a <_dtoa_r+0x1da>
 800999a:	2300      	movs	r3, #0
 800999c:	9308      	str	r3, [sp, #32]
 800999e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	dc55      	bgt.n	8009a50 <_dtoa_r+0x310>
 80099a4:	2301      	movs	r3, #1
 80099a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80099aa:	461a      	mov	r2, r3
 80099ac:	9209      	str	r2, [sp, #36]	; 0x24
 80099ae:	e00c      	b.n	80099ca <_dtoa_r+0x28a>
 80099b0:	2301      	movs	r3, #1
 80099b2:	e7f3      	b.n	800999c <_dtoa_r+0x25c>
 80099b4:	2300      	movs	r3, #0
 80099b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099b8:	9308      	str	r3, [sp, #32]
 80099ba:	9b00      	ldr	r3, [sp, #0]
 80099bc:	4413      	add	r3, r2
 80099be:	9302      	str	r3, [sp, #8]
 80099c0:	3301      	adds	r3, #1
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	9303      	str	r3, [sp, #12]
 80099c6:	bfb8      	it	lt
 80099c8:	2301      	movlt	r3, #1
 80099ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80099cc:	2200      	movs	r2, #0
 80099ce:	6042      	str	r2, [r0, #4]
 80099d0:	2204      	movs	r2, #4
 80099d2:	f102 0614 	add.w	r6, r2, #20
 80099d6:	429e      	cmp	r6, r3
 80099d8:	6841      	ldr	r1, [r0, #4]
 80099da:	d93d      	bls.n	8009a58 <_dtoa_r+0x318>
 80099dc:	4620      	mov	r0, r4
 80099de:	f001 f943 	bl	800ac68 <_Balloc>
 80099e2:	9001      	str	r0, [sp, #4]
 80099e4:	2800      	cmp	r0, #0
 80099e6:	d13b      	bne.n	8009a60 <_dtoa_r+0x320>
 80099e8:	4b11      	ldr	r3, [pc, #68]	; (8009a30 <_dtoa_r+0x2f0>)
 80099ea:	4602      	mov	r2, r0
 80099ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80099f0:	e6c0      	b.n	8009774 <_dtoa_r+0x34>
 80099f2:	2301      	movs	r3, #1
 80099f4:	e7df      	b.n	80099b6 <_dtoa_r+0x276>
 80099f6:	bf00      	nop
 80099f8:	636f4361 	.word	0x636f4361
 80099fc:	3fd287a7 	.word	0x3fd287a7
 8009a00:	8b60c8b3 	.word	0x8b60c8b3
 8009a04:	3fc68a28 	.word	0x3fc68a28
 8009a08:	509f79fb 	.word	0x509f79fb
 8009a0c:	3fd34413 	.word	0x3fd34413
 8009a10:	0800ef5b 	.word	0x0800ef5b
 8009a14:	0800ef72 	.word	0x0800ef72
 8009a18:	7ff00000 	.word	0x7ff00000
 8009a1c:	0800ef57 	.word	0x0800ef57
 8009a20:	0800ef4e 	.word	0x0800ef4e
 8009a24:	0800f22a 	.word	0x0800f22a
 8009a28:	3ff80000 	.word	0x3ff80000
 8009a2c:	0800f140 	.word	0x0800f140
 8009a30:	0800efcd 	.word	0x0800efcd
 8009a34:	2501      	movs	r5, #1
 8009a36:	2300      	movs	r3, #0
 8009a38:	9306      	str	r3, [sp, #24]
 8009a3a:	9508      	str	r5, [sp, #32]
 8009a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a44:	2200      	movs	r2, #0
 8009a46:	2312      	movs	r3, #18
 8009a48:	e7b0      	b.n	80099ac <_dtoa_r+0x26c>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	9308      	str	r3, [sp, #32]
 8009a4e:	e7f5      	b.n	8009a3c <_dtoa_r+0x2fc>
 8009a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a56:	e7b8      	b.n	80099ca <_dtoa_r+0x28a>
 8009a58:	3101      	adds	r1, #1
 8009a5a:	6041      	str	r1, [r0, #4]
 8009a5c:	0052      	lsls	r2, r2, #1
 8009a5e:	e7b8      	b.n	80099d2 <_dtoa_r+0x292>
 8009a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a62:	9a01      	ldr	r2, [sp, #4]
 8009a64:	601a      	str	r2, [r3, #0]
 8009a66:	9b03      	ldr	r3, [sp, #12]
 8009a68:	2b0e      	cmp	r3, #14
 8009a6a:	f200 809d 	bhi.w	8009ba8 <_dtoa_r+0x468>
 8009a6e:	2d00      	cmp	r5, #0
 8009a70:	f000 809a 	beq.w	8009ba8 <_dtoa_r+0x468>
 8009a74:	9b00      	ldr	r3, [sp, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	dd32      	ble.n	8009ae0 <_dtoa_r+0x3a0>
 8009a7a:	4ab7      	ldr	r2, [pc, #732]	; (8009d58 <_dtoa_r+0x618>)
 8009a7c:	f003 030f 	and.w	r3, r3, #15
 8009a80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a88:	9b00      	ldr	r3, [sp, #0]
 8009a8a:	05d8      	lsls	r0, r3, #23
 8009a8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009a90:	d516      	bpl.n	8009ac0 <_dtoa_r+0x380>
 8009a92:	4bb2      	ldr	r3, [pc, #712]	; (8009d5c <_dtoa_r+0x61c>)
 8009a94:	ec51 0b19 	vmov	r0, r1, d9
 8009a98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a9c:	f7f6 fed6 	bl	800084c <__aeabi_ddiv>
 8009aa0:	f007 070f 	and.w	r7, r7, #15
 8009aa4:	4682      	mov	sl, r0
 8009aa6:	468b      	mov	fp, r1
 8009aa8:	2503      	movs	r5, #3
 8009aaa:	4eac      	ldr	r6, [pc, #688]	; (8009d5c <_dtoa_r+0x61c>)
 8009aac:	b957      	cbnz	r7, 8009ac4 <_dtoa_r+0x384>
 8009aae:	4642      	mov	r2, r8
 8009ab0:	464b      	mov	r3, r9
 8009ab2:	4650      	mov	r0, sl
 8009ab4:	4659      	mov	r1, fp
 8009ab6:	f7f6 fec9 	bl	800084c <__aeabi_ddiv>
 8009aba:	4682      	mov	sl, r0
 8009abc:	468b      	mov	fp, r1
 8009abe:	e028      	b.n	8009b12 <_dtoa_r+0x3d2>
 8009ac0:	2502      	movs	r5, #2
 8009ac2:	e7f2      	b.n	8009aaa <_dtoa_r+0x36a>
 8009ac4:	07f9      	lsls	r1, r7, #31
 8009ac6:	d508      	bpl.n	8009ada <_dtoa_r+0x39a>
 8009ac8:	4640      	mov	r0, r8
 8009aca:	4649      	mov	r1, r9
 8009acc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ad0:	f7f6 fd92 	bl	80005f8 <__aeabi_dmul>
 8009ad4:	3501      	adds	r5, #1
 8009ad6:	4680      	mov	r8, r0
 8009ad8:	4689      	mov	r9, r1
 8009ada:	107f      	asrs	r7, r7, #1
 8009adc:	3608      	adds	r6, #8
 8009ade:	e7e5      	b.n	8009aac <_dtoa_r+0x36c>
 8009ae0:	f000 809b 	beq.w	8009c1a <_dtoa_r+0x4da>
 8009ae4:	9b00      	ldr	r3, [sp, #0]
 8009ae6:	4f9d      	ldr	r7, [pc, #628]	; (8009d5c <_dtoa_r+0x61c>)
 8009ae8:	425e      	negs	r6, r3
 8009aea:	4b9b      	ldr	r3, [pc, #620]	; (8009d58 <_dtoa_r+0x618>)
 8009aec:	f006 020f 	and.w	r2, r6, #15
 8009af0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	ec51 0b19 	vmov	r0, r1, d9
 8009afc:	f7f6 fd7c 	bl	80005f8 <__aeabi_dmul>
 8009b00:	1136      	asrs	r6, r6, #4
 8009b02:	4682      	mov	sl, r0
 8009b04:	468b      	mov	fp, r1
 8009b06:	2300      	movs	r3, #0
 8009b08:	2502      	movs	r5, #2
 8009b0a:	2e00      	cmp	r6, #0
 8009b0c:	d17a      	bne.n	8009c04 <_dtoa_r+0x4c4>
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1d3      	bne.n	8009aba <_dtoa_r+0x37a>
 8009b12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 8082 	beq.w	8009c1e <_dtoa_r+0x4de>
 8009b1a:	4b91      	ldr	r3, [pc, #580]	; (8009d60 <_dtoa_r+0x620>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	4650      	mov	r0, sl
 8009b20:	4659      	mov	r1, fp
 8009b22:	f7f6 ffdb 	bl	8000adc <__aeabi_dcmplt>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d079      	beq.n	8009c1e <_dtoa_r+0x4de>
 8009b2a:	9b03      	ldr	r3, [sp, #12]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d076      	beq.n	8009c1e <_dtoa_r+0x4de>
 8009b30:	9b02      	ldr	r3, [sp, #8]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	dd36      	ble.n	8009ba4 <_dtoa_r+0x464>
 8009b36:	9b00      	ldr	r3, [sp, #0]
 8009b38:	4650      	mov	r0, sl
 8009b3a:	4659      	mov	r1, fp
 8009b3c:	1e5f      	subs	r7, r3, #1
 8009b3e:	2200      	movs	r2, #0
 8009b40:	4b88      	ldr	r3, [pc, #544]	; (8009d64 <_dtoa_r+0x624>)
 8009b42:	f7f6 fd59 	bl	80005f8 <__aeabi_dmul>
 8009b46:	9e02      	ldr	r6, [sp, #8]
 8009b48:	4682      	mov	sl, r0
 8009b4a:	468b      	mov	fp, r1
 8009b4c:	3501      	adds	r5, #1
 8009b4e:	4628      	mov	r0, r5
 8009b50:	f7f6 fce8 	bl	8000524 <__aeabi_i2d>
 8009b54:	4652      	mov	r2, sl
 8009b56:	465b      	mov	r3, fp
 8009b58:	f7f6 fd4e 	bl	80005f8 <__aeabi_dmul>
 8009b5c:	4b82      	ldr	r3, [pc, #520]	; (8009d68 <_dtoa_r+0x628>)
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f7f6 fb94 	bl	800028c <__adddf3>
 8009b64:	46d0      	mov	r8, sl
 8009b66:	46d9      	mov	r9, fp
 8009b68:	4682      	mov	sl, r0
 8009b6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009b6e:	2e00      	cmp	r6, #0
 8009b70:	d158      	bne.n	8009c24 <_dtoa_r+0x4e4>
 8009b72:	4b7e      	ldr	r3, [pc, #504]	; (8009d6c <_dtoa_r+0x62c>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	4640      	mov	r0, r8
 8009b78:	4649      	mov	r1, r9
 8009b7a:	f7f6 fb85 	bl	8000288 <__aeabi_dsub>
 8009b7e:	4652      	mov	r2, sl
 8009b80:	465b      	mov	r3, fp
 8009b82:	4680      	mov	r8, r0
 8009b84:	4689      	mov	r9, r1
 8009b86:	f7f6 ffc7 	bl	8000b18 <__aeabi_dcmpgt>
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	f040 8295 	bne.w	800a0ba <_dtoa_r+0x97a>
 8009b90:	4652      	mov	r2, sl
 8009b92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009b96:	4640      	mov	r0, r8
 8009b98:	4649      	mov	r1, r9
 8009b9a:	f7f6 ff9f 	bl	8000adc <__aeabi_dcmplt>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	f040 8289 	bne.w	800a0b6 <_dtoa_r+0x976>
 8009ba4:	ec5b ab19 	vmov	sl, fp, d9
 8009ba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f2c0 8148 	blt.w	8009e40 <_dtoa_r+0x700>
 8009bb0:	9a00      	ldr	r2, [sp, #0]
 8009bb2:	2a0e      	cmp	r2, #14
 8009bb4:	f300 8144 	bgt.w	8009e40 <_dtoa_r+0x700>
 8009bb8:	4b67      	ldr	r3, [pc, #412]	; (8009d58 <_dtoa_r+0x618>)
 8009bba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f280 80d5 	bge.w	8009d74 <_dtoa_r+0x634>
 8009bca:	9b03      	ldr	r3, [sp, #12]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f300 80d1 	bgt.w	8009d74 <_dtoa_r+0x634>
 8009bd2:	f040 826f 	bne.w	800a0b4 <_dtoa_r+0x974>
 8009bd6:	4b65      	ldr	r3, [pc, #404]	; (8009d6c <_dtoa_r+0x62c>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	4640      	mov	r0, r8
 8009bdc:	4649      	mov	r1, r9
 8009bde:	f7f6 fd0b 	bl	80005f8 <__aeabi_dmul>
 8009be2:	4652      	mov	r2, sl
 8009be4:	465b      	mov	r3, fp
 8009be6:	f7f6 ff8d 	bl	8000b04 <__aeabi_dcmpge>
 8009bea:	9e03      	ldr	r6, [sp, #12]
 8009bec:	4637      	mov	r7, r6
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	f040 8245 	bne.w	800a07e <_dtoa_r+0x93e>
 8009bf4:	9d01      	ldr	r5, [sp, #4]
 8009bf6:	2331      	movs	r3, #49	; 0x31
 8009bf8:	f805 3b01 	strb.w	r3, [r5], #1
 8009bfc:	9b00      	ldr	r3, [sp, #0]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	e240      	b.n	800a086 <_dtoa_r+0x946>
 8009c04:	07f2      	lsls	r2, r6, #31
 8009c06:	d505      	bpl.n	8009c14 <_dtoa_r+0x4d4>
 8009c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c0c:	f7f6 fcf4 	bl	80005f8 <__aeabi_dmul>
 8009c10:	3501      	adds	r5, #1
 8009c12:	2301      	movs	r3, #1
 8009c14:	1076      	asrs	r6, r6, #1
 8009c16:	3708      	adds	r7, #8
 8009c18:	e777      	b.n	8009b0a <_dtoa_r+0x3ca>
 8009c1a:	2502      	movs	r5, #2
 8009c1c:	e779      	b.n	8009b12 <_dtoa_r+0x3d2>
 8009c1e:	9f00      	ldr	r7, [sp, #0]
 8009c20:	9e03      	ldr	r6, [sp, #12]
 8009c22:	e794      	b.n	8009b4e <_dtoa_r+0x40e>
 8009c24:	9901      	ldr	r1, [sp, #4]
 8009c26:	4b4c      	ldr	r3, [pc, #304]	; (8009d58 <_dtoa_r+0x618>)
 8009c28:	4431      	add	r1, r6
 8009c2a:	910d      	str	r1, [sp, #52]	; 0x34
 8009c2c:	9908      	ldr	r1, [sp, #32]
 8009c2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009c32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c36:	2900      	cmp	r1, #0
 8009c38:	d043      	beq.n	8009cc2 <_dtoa_r+0x582>
 8009c3a:	494d      	ldr	r1, [pc, #308]	; (8009d70 <_dtoa_r+0x630>)
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	f7f6 fe05 	bl	800084c <__aeabi_ddiv>
 8009c42:	4652      	mov	r2, sl
 8009c44:	465b      	mov	r3, fp
 8009c46:	f7f6 fb1f 	bl	8000288 <__aeabi_dsub>
 8009c4a:	9d01      	ldr	r5, [sp, #4]
 8009c4c:	4682      	mov	sl, r0
 8009c4e:	468b      	mov	fp, r1
 8009c50:	4649      	mov	r1, r9
 8009c52:	4640      	mov	r0, r8
 8009c54:	f7f6 ff80 	bl	8000b58 <__aeabi_d2iz>
 8009c58:	4606      	mov	r6, r0
 8009c5a:	f7f6 fc63 	bl	8000524 <__aeabi_i2d>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	4640      	mov	r0, r8
 8009c64:	4649      	mov	r1, r9
 8009c66:	f7f6 fb0f 	bl	8000288 <__aeabi_dsub>
 8009c6a:	3630      	adds	r6, #48	; 0x30
 8009c6c:	f805 6b01 	strb.w	r6, [r5], #1
 8009c70:	4652      	mov	r2, sl
 8009c72:	465b      	mov	r3, fp
 8009c74:	4680      	mov	r8, r0
 8009c76:	4689      	mov	r9, r1
 8009c78:	f7f6 ff30 	bl	8000adc <__aeabi_dcmplt>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d163      	bne.n	8009d48 <_dtoa_r+0x608>
 8009c80:	4642      	mov	r2, r8
 8009c82:	464b      	mov	r3, r9
 8009c84:	4936      	ldr	r1, [pc, #216]	; (8009d60 <_dtoa_r+0x620>)
 8009c86:	2000      	movs	r0, #0
 8009c88:	f7f6 fafe 	bl	8000288 <__aeabi_dsub>
 8009c8c:	4652      	mov	r2, sl
 8009c8e:	465b      	mov	r3, fp
 8009c90:	f7f6 ff24 	bl	8000adc <__aeabi_dcmplt>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	f040 80b5 	bne.w	8009e04 <_dtoa_r+0x6c4>
 8009c9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c9c:	429d      	cmp	r5, r3
 8009c9e:	d081      	beq.n	8009ba4 <_dtoa_r+0x464>
 8009ca0:	4b30      	ldr	r3, [pc, #192]	; (8009d64 <_dtoa_r+0x624>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	4650      	mov	r0, sl
 8009ca6:	4659      	mov	r1, fp
 8009ca8:	f7f6 fca6 	bl	80005f8 <__aeabi_dmul>
 8009cac:	4b2d      	ldr	r3, [pc, #180]	; (8009d64 <_dtoa_r+0x624>)
 8009cae:	4682      	mov	sl, r0
 8009cb0:	468b      	mov	fp, r1
 8009cb2:	4640      	mov	r0, r8
 8009cb4:	4649      	mov	r1, r9
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f7f6 fc9e 	bl	80005f8 <__aeabi_dmul>
 8009cbc:	4680      	mov	r8, r0
 8009cbe:	4689      	mov	r9, r1
 8009cc0:	e7c6      	b.n	8009c50 <_dtoa_r+0x510>
 8009cc2:	4650      	mov	r0, sl
 8009cc4:	4659      	mov	r1, fp
 8009cc6:	f7f6 fc97 	bl	80005f8 <__aeabi_dmul>
 8009cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ccc:	9d01      	ldr	r5, [sp, #4]
 8009cce:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cd0:	4682      	mov	sl, r0
 8009cd2:	468b      	mov	fp, r1
 8009cd4:	4649      	mov	r1, r9
 8009cd6:	4640      	mov	r0, r8
 8009cd8:	f7f6 ff3e 	bl	8000b58 <__aeabi_d2iz>
 8009cdc:	4606      	mov	r6, r0
 8009cde:	f7f6 fc21 	bl	8000524 <__aeabi_i2d>
 8009ce2:	3630      	adds	r6, #48	; 0x30
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	4640      	mov	r0, r8
 8009cea:	4649      	mov	r1, r9
 8009cec:	f7f6 facc 	bl	8000288 <__aeabi_dsub>
 8009cf0:	f805 6b01 	strb.w	r6, [r5], #1
 8009cf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cf6:	429d      	cmp	r5, r3
 8009cf8:	4680      	mov	r8, r0
 8009cfa:	4689      	mov	r9, r1
 8009cfc:	f04f 0200 	mov.w	r2, #0
 8009d00:	d124      	bne.n	8009d4c <_dtoa_r+0x60c>
 8009d02:	4b1b      	ldr	r3, [pc, #108]	; (8009d70 <_dtoa_r+0x630>)
 8009d04:	4650      	mov	r0, sl
 8009d06:	4659      	mov	r1, fp
 8009d08:	f7f6 fac0 	bl	800028c <__adddf3>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	460b      	mov	r3, r1
 8009d10:	4640      	mov	r0, r8
 8009d12:	4649      	mov	r1, r9
 8009d14:	f7f6 ff00 	bl	8000b18 <__aeabi_dcmpgt>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	d173      	bne.n	8009e04 <_dtoa_r+0x6c4>
 8009d1c:	4652      	mov	r2, sl
 8009d1e:	465b      	mov	r3, fp
 8009d20:	4913      	ldr	r1, [pc, #76]	; (8009d70 <_dtoa_r+0x630>)
 8009d22:	2000      	movs	r0, #0
 8009d24:	f7f6 fab0 	bl	8000288 <__aeabi_dsub>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	4640      	mov	r0, r8
 8009d2e:	4649      	mov	r1, r9
 8009d30:	f7f6 fed4 	bl	8000adc <__aeabi_dcmplt>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	f43f af35 	beq.w	8009ba4 <_dtoa_r+0x464>
 8009d3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009d3c:	1e6b      	subs	r3, r5, #1
 8009d3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d44:	2b30      	cmp	r3, #48	; 0x30
 8009d46:	d0f8      	beq.n	8009d3a <_dtoa_r+0x5fa>
 8009d48:	9700      	str	r7, [sp, #0]
 8009d4a:	e049      	b.n	8009de0 <_dtoa_r+0x6a0>
 8009d4c:	4b05      	ldr	r3, [pc, #20]	; (8009d64 <_dtoa_r+0x624>)
 8009d4e:	f7f6 fc53 	bl	80005f8 <__aeabi_dmul>
 8009d52:	4680      	mov	r8, r0
 8009d54:	4689      	mov	r9, r1
 8009d56:	e7bd      	b.n	8009cd4 <_dtoa_r+0x594>
 8009d58:	0800f140 	.word	0x0800f140
 8009d5c:	0800f118 	.word	0x0800f118
 8009d60:	3ff00000 	.word	0x3ff00000
 8009d64:	40240000 	.word	0x40240000
 8009d68:	401c0000 	.word	0x401c0000
 8009d6c:	40140000 	.word	0x40140000
 8009d70:	3fe00000 	.word	0x3fe00000
 8009d74:	9d01      	ldr	r5, [sp, #4]
 8009d76:	4656      	mov	r6, sl
 8009d78:	465f      	mov	r7, fp
 8009d7a:	4642      	mov	r2, r8
 8009d7c:	464b      	mov	r3, r9
 8009d7e:	4630      	mov	r0, r6
 8009d80:	4639      	mov	r1, r7
 8009d82:	f7f6 fd63 	bl	800084c <__aeabi_ddiv>
 8009d86:	f7f6 fee7 	bl	8000b58 <__aeabi_d2iz>
 8009d8a:	4682      	mov	sl, r0
 8009d8c:	f7f6 fbca 	bl	8000524 <__aeabi_i2d>
 8009d90:	4642      	mov	r2, r8
 8009d92:	464b      	mov	r3, r9
 8009d94:	f7f6 fc30 	bl	80005f8 <__aeabi_dmul>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	4639      	mov	r1, r7
 8009da0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009da4:	f7f6 fa70 	bl	8000288 <__aeabi_dsub>
 8009da8:	f805 6b01 	strb.w	r6, [r5], #1
 8009dac:	9e01      	ldr	r6, [sp, #4]
 8009dae:	9f03      	ldr	r7, [sp, #12]
 8009db0:	1bae      	subs	r6, r5, r6
 8009db2:	42b7      	cmp	r7, r6
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	d135      	bne.n	8009e26 <_dtoa_r+0x6e6>
 8009dba:	f7f6 fa67 	bl	800028c <__adddf3>
 8009dbe:	4642      	mov	r2, r8
 8009dc0:	464b      	mov	r3, r9
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	460f      	mov	r7, r1
 8009dc6:	f7f6 fea7 	bl	8000b18 <__aeabi_dcmpgt>
 8009dca:	b9d0      	cbnz	r0, 8009e02 <_dtoa_r+0x6c2>
 8009dcc:	4642      	mov	r2, r8
 8009dce:	464b      	mov	r3, r9
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	f7f6 fe78 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dd8:	b110      	cbz	r0, 8009de0 <_dtoa_r+0x6a0>
 8009dda:	f01a 0f01 	tst.w	sl, #1
 8009dde:	d110      	bne.n	8009e02 <_dtoa_r+0x6c2>
 8009de0:	4620      	mov	r0, r4
 8009de2:	ee18 1a10 	vmov	r1, s16
 8009de6:	f000 ff7f 	bl	800ace8 <_Bfree>
 8009dea:	2300      	movs	r3, #0
 8009dec:	9800      	ldr	r0, [sp, #0]
 8009dee:	702b      	strb	r3, [r5, #0]
 8009df0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009df2:	3001      	adds	r0, #1
 8009df4:	6018      	str	r0, [r3, #0]
 8009df6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f43f acf1 	beq.w	80097e0 <_dtoa_r+0xa0>
 8009dfe:	601d      	str	r5, [r3, #0]
 8009e00:	e4ee      	b.n	80097e0 <_dtoa_r+0xa0>
 8009e02:	9f00      	ldr	r7, [sp, #0]
 8009e04:	462b      	mov	r3, r5
 8009e06:	461d      	mov	r5, r3
 8009e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e0c:	2a39      	cmp	r2, #57	; 0x39
 8009e0e:	d106      	bne.n	8009e1e <_dtoa_r+0x6de>
 8009e10:	9a01      	ldr	r2, [sp, #4]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d1f7      	bne.n	8009e06 <_dtoa_r+0x6c6>
 8009e16:	9901      	ldr	r1, [sp, #4]
 8009e18:	2230      	movs	r2, #48	; 0x30
 8009e1a:	3701      	adds	r7, #1
 8009e1c:	700a      	strb	r2, [r1, #0]
 8009e1e:	781a      	ldrb	r2, [r3, #0]
 8009e20:	3201      	adds	r2, #1
 8009e22:	701a      	strb	r2, [r3, #0]
 8009e24:	e790      	b.n	8009d48 <_dtoa_r+0x608>
 8009e26:	4ba6      	ldr	r3, [pc, #664]	; (800a0c0 <_dtoa_r+0x980>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f7f6 fbe5 	bl	80005f8 <__aeabi_dmul>
 8009e2e:	2200      	movs	r2, #0
 8009e30:	2300      	movs	r3, #0
 8009e32:	4606      	mov	r6, r0
 8009e34:	460f      	mov	r7, r1
 8009e36:	f7f6 fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d09d      	beq.n	8009d7a <_dtoa_r+0x63a>
 8009e3e:	e7cf      	b.n	8009de0 <_dtoa_r+0x6a0>
 8009e40:	9a08      	ldr	r2, [sp, #32]
 8009e42:	2a00      	cmp	r2, #0
 8009e44:	f000 80d7 	beq.w	8009ff6 <_dtoa_r+0x8b6>
 8009e48:	9a06      	ldr	r2, [sp, #24]
 8009e4a:	2a01      	cmp	r2, #1
 8009e4c:	f300 80ba 	bgt.w	8009fc4 <_dtoa_r+0x884>
 8009e50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e52:	2a00      	cmp	r2, #0
 8009e54:	f000 80b2 	beq.w	8009fbc <_dtoa_r+0x87c>
 8009e58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009e5c:	9e07      	ldr	r6, [sp, #28]
 8009e5e:	9d04      	ldr	r5, [sp, #16]
 8009e60:	9a04      	ldr	r2, [sp, #16]
 8009e62:	441a      	add	r2, r3
 8009e64:	9204      	str	r2, [sp, #16]
 8009e66:	9a05      	ldr	r2, [sp, #20]
 8009e68:	2101      	movs	r1, #1
 8009e6a:	441a      	add	r2, r3
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	9205      	str	r2, [sp, #20]
 8009e70:	f001 f83c 	bl	800aeec <__i2b>
 8009e74:	4607      	mov	r7, r0
 8009e76:	2d00      	cmp	r5, #0
 8009e78:	dd0c      	ble.n	8009e94 <_dtoa_r+0x754>
 8009e7a:	9b05      	ldr	r3, [sp, #20]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	dd09      	ble.n	8009e94 <_dtoa_r+0x754>
 8009e80:	42ab      	cmp	r3, r5
 8009e82:	9a04      	ldr	r2, [sp, #16]
 8009e84:	bfa8      	it	ge
 8009e86:	462b      	movge	r3, r5
 8009e88:	1ad2      	subs	r2, r2, r3
 8009e8a:	9204      	str	r2, [sp, #16]
 8009e8c:	9a05      	ldr	r2, [sp, #20]
 8009e8e:	1aed      	subs	r5, r5, r3
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	9305      	str	r3, [sp, #20]
 8009e94:	9b07      	ldr	r3, [sp, #28]
 8009e96:	b31b      	cbz	r3, 8009ee0 <_dtoa_r+0x7a0>
 8009e98:	9b08      	ldr	r3, [sp, #32]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f000 80af 	beq.w	8009ffe <_dtoa_r+0x8be>
 8009ea0:	2e00      	cmp	r6, #0
 8009ea2:	dd13      	ble.n	8009ecc <_dtoa_r+0x78c>
 8009ea4:	4639      	mov	r1, r7
 8009ea6:	4632      	mov	r2, r6
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f001 f8df 	bl	800b06c <__pow5mult>
 8009eae:	ee18 2a10 	vmov	r2, s16
 8009eb2:	4601      	mov	r1, r0
 8009eb4:	4607      	mov	r7, r0
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f001 f82e 	bl	800af18 <__multiply>
 8009ebc:	ee18 1a10 	vmov	r1, s16
 8009ec0:	4680      	mov	r8, r0
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f000 ff10 	bl	800ace8 <_Bfree>
 8009ec8:	ee08 8a10 	vmov	s16, r8
 8009ecc:	9b07      	ldr	r3, [sp, #28]
 8009ece:	1b9a      	subs	r2, r3, r6
 8009ed0:	d006      	beq.n	8009ee0 <_dtoa_r+0x7a0>
 8009ed2:	ee18 1a10 	vmov	r1, s16
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f001 f8c8 	bl	800b06c <__pow5mult>
 8009edc:	ee08 0a10 	vmov	s16, r0
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f001 f802 	bl	800aeec <__i2b>
 8009ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	4606      	mov	r6, r0
 8009eee:	f340 8088 	ble.w	800a002 <_dtoa_r+0x8c2>
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	4601      	mov	r1, r0
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f001 f8b8 	bl	800b06c <__pow5mult>
 8009efc:	9b06      	ldr	r3, [sp, #24]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	4606      	mov	r6, r0
 8009f02:	f340 8081 	ble.w	800a008 <_dtoa_r+0x8c8>
 8009f06:	f04f 0800 	mov.w	r8, #0
 8009f0a:	6933      	ldr	r3, [r6, #16]
 8009f0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009f10:	6918      	ldr	r0, [r3, #16]
 8009f12:	f000 ff9b 	bl	800ae4c <__hi0bits>
 8009f16:	f1c0 0020 	rsb	r0, r0, #32
 8009f1a:	9b05      	ldr	r3, [sp, #20]
 8009f1c:	4418      	add	r0, r3
 8009f1e:	f010 001f 	ands.w	r0, r0, #31
 8009f22:	f000 8092 	beq.w	800a04a <_dtoa_r+0x90a>
 8009f26:	f1c0 0320 	rsb	r3, r0, #32
 8009f2a:	2b04      	cmp	r3, #4
 8009f2c:	f340 808a 	ble.w	800a044 <_dtoa_r+0x904>
 8009f30:	f1c0 001c 	rsb	r0, r0, #28
 8009f34:	9b04      	ldr	r3, [sp, #16]
 8009f36:	4403      	add	r3, r0
 8009f38:	9304      	str	r3, [sp, #16]
 8009f3a:	9b05      	ldr	r3, [sp, #20]
 8009f3c:	4403      	add	r3, r0
 8009f3e:	4405      	add	r5, r0
 8009f40:	9305      	str	r3, [sp, #20]
 8009f42:	9b04      	ldr	r3, [sp, #16]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	dd07      	ble.n	8009f58 <_dtoa_r+0x818>
 8009f48:	ee18 1a10 	vmov	r1, s16
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f001 f8e6 	bl	800b120 <__lshift>
 8009f54:	ee08 0a10 	vmov	s16, r0
 8009f58:	9b05      	ldr	r3, [sp, #20]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	dd05      	ble.n	8009f6a <_dtoa_r+0x82a>
 8009f5e:	4631      	mov	r1, r6
 8009f60:	461a      	mov	r2, r3
 8009f62:	4620      	mov	r0, r4
 8009f64:	f001 f8dc 	bl	800b120 <__lshift>
 8009f68:	4606      	mov	r6, r0
 8009f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d06e      	beq.n	800a04e <_dtoa_r+0x90e>
 8009f70:	ee18 0a10 	vmov	r0, s16
 8009f74:	4631      	mov	r1, r6
 8009f76:	f001 f943 	bl	800b200 <__mcmp>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	da67      	bge.n	800a04e <_dtoa_r+0x90e>
 8009f7e:	9b00      	ldr	r3, [sp, #0]
 8009f80:	3b01      	subs	r3, #1
 8009f82:	ee18 1a10 	vmov	r1, s16
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	220a      	movs	r2, #10
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	f000 fecd 	bl	800ad2c <__multadd>
 8009f92:	9b08      	ldr	r3, [sp, #32]
 8009f94:	ee08 0a10 	vmov	s16, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 81b1 	beq.w	800a300 <_dtoa_r+0xbc0>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	4639      	mov	r1, r7
 8009fa2:	220a      	movs	r2, #10
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f000 fec1 	bl	800ad2c <__multadd>
 8009faa:	9b02      	ldr	r3, [sp, #8]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	4607      	mov	r7, r0
 8009fb0:	f300 808e 	bgt.w	800a0d0 <_dtoa_r+0x990>
 8009fb4:	9b06      	ldr	r3, [sp, #24]
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	dc51      	bgt.n	800a05e <_dtoa_r+0x91e>
 8009fba:	e089      	b.n	800a0d0 <_dtoa_r+0x990>
 8009fbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009fbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009fc2:	e74b      	b.n	8009e5c <_dtoa_r+0x71c>
 8009fc4:	9b03      	ldr	r3, [sp, #12]
 8009fc6:	1e5e      	subs	r6, r3, #1
 8009fc8:	9b07      	ldr	r3, [sp, #28]
 8009fca:	42b3      	cmp	r3, r6
 8009fcc:	bfbf      	itttt	lt
 8009fce:	9b07      	ldrlt	r3, [sp, #28]
 8009fd0:	9607      	strlt	r6, [sp, #28]
 8009fd2:	1af2      	sublt	r2, r6, r3
 8009fd4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009fd6:	bfb6      	itet	lt
 8009fd8:	189b      	addlt	r3, r3, r2
 8009fda:	1b9e      	subge	r6, r3, r6
 8009fdc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009fde:	9b03      	ldr	r3, [sp, #12]
 8009fe0:	bfb8      	it	lt
 8009fe2:	2600      	movlt	r6, #0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	bfb7      	itett	lt
 8009fe8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009fec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009ff0:	1a9d      	sublt	r5, r3, r2
 8009ff2:	2300      	movlt	r3, #0
 8009ff4:	e734      	b.n	8009e60 <_dtoa_r+0x720>
 8009ff6:	9e07      	ldr	r6, [sp, #28]
 8009ff8:	9d04      	ldr	r5, [sp, #16]
 8009ffa:	9f08      	ldr	r7, [sp, #32]
 8009ffc:	e73b      	b.n	8009e76 <_dtoa_r+0x736>
 8009ffe:	9a07      	ldr	r2, [sp, #28]
 800a000:	e767      	b.n	8009ed2 <_dtoa_r+0x792>
 800a002:	9b06      	ldr	r3, [sp, #24]
 800a004:	2b01      	cmp	r3, #1
 800a006:	dc18      	bgt.n	800a03a <_dtoa_r+0x8fa>
 800a008:	f1ba 0f00 	cmp.w	sl, #0
 800a00c:	d115      	bne.n	800a03a <_dtoa_r+0x8fa>
 800a00e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a012:	b993      	cbnz	r3, 800a03a <_dtoa_r+0x8fa>
 800a014:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a018:	0d1b      	lsrs	r3, r3, #20
 800a01a:	051b      	lsls	r3, r3, #20
 800a01c:	b183      	cbz	r3, 800a040 <_dtoa_r+0x900>
 800a01e:	9b04      	ldr	r3, [sp, #16]
 800a020:	3301      	adds	r3, #1
 800a022:	9304      	str	r3, [sp, #16]
 800a024:	9b05      	ldr	r3, [sp, #20]
 800a026:	3301      	adds	r3, #1
 800a028:	9305      	str	r3, [sp, #20]
 800a02a:	f04f 0801 	mov.w	r8, #1
 800a02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a030:	2b00      	cmp	r3, #0
 800a032:	f47f af6a 	bne.w	8009f0a <_dtoa_r+0x7ca>
 800a036:	2001      	movs	r0, #1
 800a038:	e76f      	b.n	8009f1a <_dtoa_r+0x7da>
 800a03a:	f04f 0800 	mov.w	r8, #0
 800a03e:	e7f6      	b.n	800a02e <_dtoa_r+0x8ee>
 800a040:	4698      	mov	r8, r3
 800a042:	e7f4      	b.n	800a02e <_dtoa_r+0x8ee>
 800a044:	f43f af7d 	beq.w	8009f42 <_dtoa_r+0x802>
 800a048:	4618      	mov	r0, r3
 800a04a:	301c      	adds	r0, #28
 800a04c:	e772      	b.n	8009f34 <_dtoa_r+0x7f4>
 800a04e:	9b03      	ldr	r3, [sp, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	dc37      	bgt.n	800a0c4 <_dtoa_r+0x984>
 800a054:	9b06      	ldr	r3, [sp, #24]
 800a056:	2b02      	cmp	r3, #2
 800a058:	dd34      	ble.n	800a0c4 <_dtoa_r+0x984>
 800a05a:	9b03      	ldr	r3, [sp, #12]
 800a05c:	9302      	str	r3, [sp, #8]
 800a05e:	9b02      	ldr	r3, [sp, #8]
 800a060:	b96b      	cbnz	r3, 800a07e <_dtoa_r+0x93e>
 800a062:	4631      	mov	r1, r6
 800a064:	2205      	movs	r2, #5
 800a066:	4620      	mov	r0, r4
 800a068:	f000 fe60 	bl	800ad2c <__multadd>
 800a06c:	4601      	mov	r1, r0
 800a06e:	4606      	mov	r6, r0
 800a070:	ee18 0a10 	vmov	r0, s16
 800a074:	f001 f8c4 	bl	800b200 <__mcmp>
 800a078:	2800      	cmp	r0, #0
 800a07a:	f73f adbb 	bgt.w	8009bf4 <_dtoa_r+0x4b4>
 800a07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a080:	9d01      	ldr	r5, [sp, #4]
 800a082:	43db      	mvns	r3, r3
 800a084:	9300      	str	r3, [sp, #0]
 800a086:	f04f 0800 	mov.w	r8, #0
 800a08a:	4631      	mov	r1, r6
 800a08c:	4620      	mov	r0, r4
 800a08e:	f000 fe2b 	bl	800ace8 <_Bfree>
 800a092:	2f00      	cmp	r7, #0
 800a094:	f43f aea4 	beq.w	8009de0 <_dtoa_r+0x6a0>
 800a098:	f1b8 0f00 	cmp.w	r8, #0
 800a09c:	d005      	beq.n	800a0aa <_dtoa_r+0x96a>
 800a09e:	45b8      	cmp	r8, r7
 800a0a0:	d003      	beq.n	800a0aa <_dtoa_r+0x96a>
 800a0a2:	4641      	mov	r1, r8
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f000 fe1f 	bl	800ace8 <_Bfree>
 800a0aa:	4639      	mov	r1, r7
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f000 fe1b 	bl	800ace8 <_Bfree>
 800a0b2:	e695      	b.n	8009de0 <_dtoa_r+0x6a0>
 800a0b4:	2600      	movs	r6, #0
 800a0b6:	4637      	mov	r7, r6
 800a0b8:	e7e1      	b.n	800a07e <_dtoa_r+0x93e>
 800a0ba:	9700      	str	r7, [sp, #0]
 800a0bc:	4637      	mov	r7, r6
 800a0be:	e599      	b.n	8009bf4 <_dtoa_r+0x4b4>
 800a0c0:	40240000 	.word	0x40240000
 800a0c4:	9b08      	ldr	r3, [sp, #32]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f000 80ca 	beq.w	800a260 <_dtoa_r+0xb20>
 800a0cc:	9b03      	ldr	r3, [sp, #12]
 800a0ce:	9302      	str	r3, [sp, #8]
 800a0d0:	2d00      	cmp	r5, #0
 800a0d2:	dd05      	ble.n	800a0e0 <_dtoa_r+0x9a0>
 800a0d4:	4639      	mov	r1, r7
 800a0d6:	462a      	mov	r2, r5
 800a0d8:	4620      	mov	r0, r4
 800a0da:	f001 f821 	bl	800b120 <__lshift>
 800a0de:	4607      	mov	r7, r0
 800a0e0:	f1b8 0f00 	cmp.w	r8, #0
 800a0e4:	d05b      	beq.n	800a19e <_dtoa_r+0xa5e>
 800a0e6:	6879      	ldr	r1, [r7, #4]
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	f000 fdbd 	bl	800ac68 <_Balloc>
 800a0ee:	4605      	mov	r5, r0
 800a0f0:	b928      	cbnz	r0, 800a0fe <_dtoa_r+0x9be>
 800a0f2:	4b87      	ldr	r3, [pc, #540]	; (800a310 <_dtoa_r+0xbd0>)
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a0fa:	f7ff bb3b 	b.w	8009774 <_dtoa_r+0x34>
 800a0fe:	693a      	ldr	r2, [r7, #16]
 800a100:	3202      	adds	r2, #2
 800a102:	0092      	lsls	r2, r2, #2
 800a104:	f107 010c 	add.w	r1, r7, #12
 800a108:	300c      	adds	r0, #12
 800a10a:	f000 fd9f 	bl	800ac4c <memcpy>
 800a10e:	2201      	movs	r2, #1
 800a110:	4629      	mov	r1, r5
 800a112:	4620      	mov	r0, r4
 800a114:	f001 f804 	bl	800b120 <__lshift>
 800a118:	9b01      	ldr	r3, [sp, #4]
 800a11a:	f103 0901 	add.w	r9, r3, #1
 800a11e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a122:	4413      	add	r3, r2
 800a124:	9305      	str	r3, [sp, #20]
 800a126:	f00a 0301 	and.w	r3, sl, #1
 800a12a:	46b8      	mov	r8, r7
 800a12c:	9304      	str	r3, [sp, #16]
 800a12e:	4607      	mov	r7, r0
 800a130:	4631      	mov	r1, r6
 800a132:	ee18 0a10 	vmov	r0, s16
 800a136:	f7ff fa77 	bl	8009628 <quorem>
 800a13a:	4641      	mov	r1, r8
 800a13c:	9002      	str	r0, [sp, #8]
 800a13e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a142:	ee18 0a10 	vmov	r0, s16
 800a146:	f001 f85b 	bl	800b200 <__mcmp>
 800a14a:	463a      	mov	r2, r7
 800a14c:	9003      	str	r0, [sp, #12]
 800a14e:	4631      	mov	r1, r6
 800a150:	4620      	mov	r0, r4
 800a152:	f001 f871 	bl	800b238 <__mdiff>
 800a156:	68c2      	ldr	r2, [r0, #12]
 800a158:	f109 3bff 	add.w	fp, r9, #4294967295
 800a15c:	4605      	mov	r5, r0
 800a15e:	bb02      	cbnz	r2, 800a1a2 <_dtoa_r+0xa62>
 800a160:	4601      	mov	r1, r0
 800a162:	ee18 0a10 	vmov	r0, s16
 800a166:	f001 f84b 	bl	800b200 <__mcmp>
 800a16a:	4602      	mov	r2, r0
 800a16c:	4629      	mov	r1, r5
 800a16e:	4620      	mov	r0, r4
 800a170:	9207      	str	r2, [sp, #28]
 800a172:	f000 fdb9 	bl	800ace8 <_Bfree>
 800a176:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a17a:	ea43 0102 	orr.w	r1, r3, r2
 800a17e:	9b04      	ldr	r3, [sp, #16]
 800a180:	430b      	orrs	r3, r1
 800a182:	464d      	mov	r5, r9
 800a184:	d10f      	bne.n	800a1a6 <_dtoa_r+0xa66>
 800a186:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a18a:	d02a      	beq.n	800a1e2 <_dtoa_r+0xaa2>
 800a18c:	9b03      	ldr	r3, [sp, #12]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	dd02      	ble.n	800a198 <_dtoa_r+0xa58>
 800a192:	9b02      	ldr	r3, [sp, #8]
 800a194:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a198:	f88b a000 	strb.w	sl, [fp]
 800a19c:	e775      	b.n	800a08a <_dtoa_r+0x94a>
 800a19e:	4638      	mov	r0, r7
 800a1a0:	e7ba      	b.n	800a118 <_dtoa_r+0x9d8>
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	e7e2      	b.n	800a16c <_dtoa_r+0xa2c>
 800a1a6:	9b03      	ldr	r3, [sp, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	db04      	blt.n	800a1b6 <_dtoa_r+0xa76>
 800a1ac:	9906      	ldr	r1, [sp, #24]
 800a1ae:	430b      	orrs	r3, r1
 800a1b0:	9904      	ldr	r1, [sp, #16]
 800a1b2:	430b      	orrs	r3, r1
 800a1b4:	d122      	bne.n	800a1fc <_dtoa_r+0xabc>
 800a1b6:	2a00      	cmp	r2, #0
 800a1b8:	ddee      	ble.n	800a198 <_dtoa_r+0xa58>
 800a1ba:	ee18 1a10 	vmov	r1, s16
 800a1be:	2201      	movs	r2, #1
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f000 ffad 	bl	800b120 <__lshift>
 800a1c6:	4631      	mov	r1, r6
 800a1c8:	ee08 0a10 	vmov	s16, r0
 800a1cc:	f001 f818 	bl	800b200 <__mcmp>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	dc03      	bgt.n	800a1dc <_dtoa_r+0xa9c>
 800a1d4:	d1e0      	bne.n	800a198 <_dtoa_r+0xa58>
 800a1d6:	f01a 0f01 	tst.w	sl, #1
 800a1da:	d0dd      	beq.n	800a198 <_dtoa_r+0xa58>
 800a1dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a1e0:	d1d7      	bne.n	800a192 <_dtoa_r+0xa52>
 800a1e2:	2339      	movs	r3, #57	; 0x39
 800a1e4:	f88b 3000 	strb.w	r3, [fp]
 800a1e8:	462b      	mov	r3, r5
 800a1ea:	461d      	mov	r5, r3
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a1f2:	2a39      	cmp	r2, #57	; 0x39
 800a1f4:	d071      	beq.n	800a2da <_dtoa_r+0xb9a>
 800a1f6:	3201      	adds	r2, #1
 800a1f8:	701a      	strb	r2, [r3, #0]
 800a1fa:	e746      	b.n	800a08a <_dtoa_r+0x94a>
 800a1fc:	2a00      	cmp	r2, #0
 800a1fe:	dd07      	ble.n	800a210 <_dtoa_r+0xad0>
 800a200:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a204:	d0ed      	beq.n	800a1e2 <_dtoa_r+0xaa2>
 800a206:	f10a 0301 	add.w	r3, sl, #1
 800a20a:	f88b 3000 	strb.w	r3, [fp]
 800a20e:	e73c      	b.n	800a08a <_dtoa_r+0x94a>
 800a210:	9b05      	ldr	r3, [sp, #20]
 800a212:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a216:	4599      	cmp	r9, r3
 800a218:	d047      	beq.n	800a2aa <_dtoa_r+0xb6a>
 800a21a:	ee18 1a10 	vmov	r1, s16
 800a21e:	2300      	movs	r3, #0
 800a220:	220a      	movs	r2, #10
 800a222:	4620      	mov	r0, r4
 800a224:	f000 fd82 	bl	800ad2c <__multadd>
 800a228:	45b8      	cmp	r8, r7
 800a22a:	ee08 0a10 	vmov	s16, r0
 800a22e:	f04f 0300 	mov.w	r3, #0
 800a232:	f04f 020a 	mov.w	r2, #10
 800a236:	4641      	mov	r1, r8
 800a238:	4620      	mov	r0, r4
 800a23a:	d106      	bne.n	800a24a <_dtoa_r+0xb0a>
 800a23c:	f000 fd76 	bl	800ad2c <__multadd>
 800a240:	4680      	mov	r8, r0
 800a242:	4607      	mov	r7, r0
 800a244:	f109 0901 	add.w	r9, r9, #1
 800a248:	e772      	b.n	800a130 <_dtoa_r+0x9f0>
 800a24a:	f000 fd6f 	bl	800ad2c <__multadd>
 800a24e:	4639      	mov	r1, r7
 800a250:	4680      	mov	r8, r0
 800a252:	2300      	movs	r3, #0
 800a254:	220a      	movs	r2, #10
 800a256:	4620      	mov	r0, r4
 800a258:	f000 fd68 	bl	800ad2c <__multadd>
 800a25c:	4607      	mov	r7, r0
 800a25e:	e7f1      	b.n	800a244 <_dtoa_r+0xb04>
 800a260:	9b03      	ldr	r3, [sp, #12]
 800a262:	9302      	str	r3, [sp, #8]
 800a264:	9d01      	ldr	r5, [sp, #4]
 800a266:	ee18 0a10 	vmov	r0, s16
 800a26a:	4631      	mov	r1, r6
 800a26c:	f7ff f9dc 	bl	8009628 <quorem>
 800a270:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a274:	9b01      	ldr	r3, [sp, #4]
 800a276:	f805 ab01 	strb.w	sl, [r5], #1
 800a27a:	1aea      	subs	r2, r5, r3
 800a27c:	9b02      	ldr	r3, [sp, #8]
 800a27e:	4293      	cmp	r3, r2
 800a280:	dd09      	ble.n	800a296 <_dtoa_r+0xb56>
 800a282:	ee18 1a10 	vmov	r1, s16
 800a286:	2300      	movs	r3, #0
 800a288:	220a      	movs	r2, #10
 800a28a:	4620      	mov	r0, r4
 800a28c:	f000 fd4e 	bl	800ad2c <__multadd>
 800a290:	ee08 0a10 	vmov	s16, r0
 800a294:	e7e7      	b.n	800a266 <_dtoa_r+0xb26>
 800a296:	9b02      	ldr	r3, [sp, #8]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	bfc8      	it	gt
 800a29c:	461d      	movgt	r5, r3
 800a29e:	9b01      	ldr	r3, [sp, #4]
 800a2a0:	bfd8      	it	le
 800a2a2:	2501      	movle	r5, #1
 800a2a4:	441d      	add	r5, r3
 800a2a6:	f04f 0800 	mov.w	r8, #0
 800a2aa:	ee18 1a10 	vmov	r1, s16
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f000 ff35 	bl	800b120 <__lshift>
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	ee08 0a10 	vmov	s16, r0
 800a2bc:	f000 ffa0 	bl	800b200 <__mcmp>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	dc91      	bgt.n	800a1e8 <_dtoa_r+0xaa8>
 800a2c4:	d102      	bne.n	800a2cc <_dtoa_r+0xb8c>
 800a2c6:	f01a 0f01 	tst.w	sl, #1
 800a2ca:	d18d      	bne.n	800a1e8 <_dtoa_r+0xaa8>
 800a2cc:	462b      	mov	r3, r5
 800a2ce:	461d      	mov	r5, r3
 800a2d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2d4:	2a30      	cmp	r2, #48	; 0x30
 800a2d6:	d0fa      	beq.n	800a2ce <_dtoa_r+0xb8e>
 800a2d8:	e6d7      	b.n	800a08a <_dtoa_r+0x94a>
 800a2da:	9a01      	ldr	r2, [sp, #4]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d184      	bne.n	800a1ea <_dtoa_r+0xaaa>
 800a2e0:	9b00      	ldr	r3, [sp, #0]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	2331      	movs	r3, #49	; 0x31
 800a2e8:	7013      	strb	r3, [r2, #0]
 800a2ea:	e6ce      	b.n	800a08a <_dtoa_r+0x94a>
 800a2ec:	4b09      	ldr	r3, [pc, #36]	; (800a314 <_dtoa_r+0xbd4>)
 800a2ee:	f7ff ba95 	b.w	800981c <_dtoa_r+0xdc>
 800a2f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f47f aa6e 	bne.w	80097d6 <_dtoa_r+0x96>
 800a2fa:	4b07      	ldr	r3, [pc, #28]	; (800a318 <_dtoa_r+0xbd8>)
 800a2fc:	f7ff ba8e 	b.w	800981c <_dtoa_r+0xdc>
 800a300:	9b02      	ldr	r3, [sp, #8]
 800a302:	2b00      	cmp	r3, #0
 800a304:	dcae      	bgt.n	800a264 <_dtoa_r+0xb24>
 800a306:	9b06      	ldr	r3, [sp, #24]
 800a308:	2b02      	cmp	r3, #2
 800a30a:	f73f aea8 	bgt.w	800a05e <_dtoa_r+0x91e>
 800a30e:	e7a9      	b.n	800a264 <_dtoa_r+0xb24>
 800a310:	0800efcd 	.word	0x0800efcd
 800a314:	0800f229 	.word	0x0800f229
 800a318:	0800ef4e 	.word	0x0800ef4e

0800a31c <std>:
 800a31c:	2300      	movs	r3, #0
 800a31e:	b510      	push	{r4, lr}
 800a320:	4604      	mov	r4, r0
 800a322:	e9c0 3300 	strd	r3, r3, [r0]
 800a326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a32a:	6083      	str	r3, [r0, #8]
 800a32c:	8181      	strh	r1, [r0, #12]
 800a32e:	6643      	str	r3, [r0, #100]	; 0x64
 800a330:	81c2      	strh	r2, [r0, #14]
 800a332:	6183      	str	r3, [r0, #24]
 800a334:	4619      	mov	r1, r3
 800a336:	2208      	movs	r2, #8
 800a338:	305c      	adds	r0, #92	; 0x5c
 800a33a:	f7fd fb33 	bl	80079a4 <memset>
 800a33e:	4b05      	ldr	r3, [pc, #20]	; (800a354 <std+0x38>)
 800a340:	6263      	str	r3, [r4, #36]	; 0x24
 800a342:	4b05      	ldr	r3, [pc, #20]	; (800a358 <std+0x3c>)
 800a344:	62a3      	str	r3, [r4, #40]	; 0x28
 800a346:	4b05      	ldr	r3, [pc, #20]	; (800a35c <std+0x40>)
 800a348:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a34a:	4b05      	ldr	r3, [pc, #20]	; (800a360 <std+0x44>)
 800a34c:	6224      	str	r4, [r4, #32]
 800a34e:	6323      	str	r3, [r4, #48]	; 0x30
 800a350:	bd10      	pop	{r4, pc}
 800a352:	bf00      	nop
 800a354:	0800877d 	.word	0x0800877d
 800a358:	080087a3 	.word	0x080087a3
 800a35c:	080087db 	.word	0x080087db
 800a360:	080087ff 	.word	0x080087ff

0800a364 <_cleanup_r>:
 800a364:	4901      	ldr	r1, [pc, #4]	; (800a36c <_cleanup_r+0x8>)
 800a366:	f000 b8af 	b.w	800a4c8 <_fwalk_reent>
 800a36a:	bf00      	nop
 800a36c:	0800c8b9 	.word	0x0800c8b9

0800a370 <__sfmoreglue>:
 800a370:	b570      	push	{r4, r5, r6, lr}
 800a372:	2268      	movs	r2, #104	; 0x68
 800a374:	1e4d      	subs	r5, r1, #1
 800a376:	4355      	muls	r5, r2
 800a378:	460e      	mov	r6, r1
 800a37a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a37e:	f001 f9b7 	bl	800b6f0 <_malloc_r>
 800a382:	4604      	mov	r4, r0
 800a384:	b140      	cbz	r0, 800a398 <__sfmoreglue+0x28>
 800a386:	2100      	movs	r1, #0
 800a388:	e9c0 1600 	strd	r1, r6, [r0]
 800a38c:	300c      	adds	r0, #12
 800a38e:	60a0      	str	r0, [r4, #8]
 800a390:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a394:	f7fd fb06 	bl	80079a4 <memset>
 800a398:	4620      	mov	r0, r4
 800a39a:	bd70      	pop	{r4, r5, r6, pc}

0800a39c <__sfp_lock_acquire>:
 800a39c:	4801      	ldr	r0, [pc, #4]	; (800a3a4 <__sfp_lock_acquire+0x8>)
 800a39e:	f000 bc26 	b.w	800abee <__retarget_lock_acquire_recursive>
 800a3a2:	bf00      	nop
 800a3a4:	20000919 	.word	0x20000919

0800a3a8 <__sfp_lock_release>:
 800a3a8:	4801      	ldr	r0, [pc, #4]	; (800a3b0 <__sfp_lock_release+0x8>)
 800a3aa:	f000 bc21 	b.w	800abf0 <__retarget_lock_release_recursive>
 800a3ae:	bf00      	nop
 800a3b0:	20000919 	.word	0x20000919

0800a3b4 <__sinit_lock_acquire>:
 800a3b4:	4801      	ldr	r0, [pc, #4]	; (800a3bc <__sinit_lock_acquire+0x8>)
 800a3b6:	f000 bc1a 	b.w	800abee <__retarget_lock_acquire_recursive>
 800a3ba:	bf00      	nop
 800a3bc:	2000091a 	.word	0x2000091a

0800a3c0 <__sinit_lock_release>:
 800a3c0:	4801      	ldr	r0, [pc, #4]	; (800a3c8 <__sinit_lock_release+0x8>)
 800a3c2:	f000 bc15 	b.w	800abf0 <__retarget_lock_release_recursive>
 800a3c6:	bf00      	nop
 800a3c8:	2000091a 	.word	0x2000091a

0800a3cc <__sinit>:
 800a3cc:	b510      	push	{r4, lr}
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	f7ff fff0 	bl	800a3b4 <__sinit_lock_acquire>
 800a3d4:	69a3      	ldr	r3, [r4, #24]
 800a3d6:	b11b      	cbz	r3, 800a3e0 <__sinit+0x14>
 800a3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3dc:	f7ff bff0 	b.w	800a3c0 <__sinit_lock_release>
 800a3e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a3e4:	6523      	str	r3, [r4, #80]	; 0x50
 800a3e6:	4b13      	ldr	r3, [pc, #76]	; (800a434 <__sinit+0x68>)
 800a3e8:	4a13      	ldr	r2, [pc, #76]	; (800a438 <__sinit+0x6c>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800a3ee:	42a3      	cmp	r3, r4
 800a3f0:	bf04      	itt	eq
 800a3f2:	2301      	moveq	r3, #1
 800a3f4:	61a3      	streq	r3, [r4, #24]
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f000 f820 	bl	800a43c <__sfp>
 800a3fc:	6060      	str	r0, [r4, #4]
 800a3fe:	4620      	mov	r0, r4
 800a400:	f000 f81c 	bl	800a43c <__sfp>
 800a404:	60a0      	str	r0, [r4, #8]
 800a406:	4620      	mov	r0, r4
 800a408:	f000 f818 	bl	800a43c <__sfp>
 800a40c:	2200      	movs	r2, #0
 800a40e:	60e0      	str	r0, [r4, #12]
 800a410:	2104      	movs	r1, #4
 800a412:	6860      	ldr	r0, [r4, #4]
 800a414:	f7ff ff82 	bl	800a31c <std>
 800a418:	68a0      	ldr	r0, [r4, #8]
 800a41a:	2201      	movs	r2, #1
 800a41c:	2109      	movs	r1, #9
 800a41e:	f7ff ff7d 	bl	800a31c <std>
 800a422:	68e0      	ldr	r0, [r4, #12]
 800a424:	2202      	movs	r2, #2
 800a426:	2112      	movs	r1, #18
 800a428:	f7ff ff78 	bl	800a31c <std>
 800a42c:	2301      	movs	r3, #1
 800a42e:	61a3      	str	r3, [r4, #24]
 800a430:	e7d2      	b.n	800a3d8 <__sinit+0xc>
 800a432:	bf00      	nop
 800a434:	0800ed9c 	.word	0x0800ed9c
 800a438:	0800a365 	.word	0x0800a365

0800a43c <__sfp>:
 800a43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43e:	4607      	mov	r7, r0
 800a440:	f7ff ffac 	bl	800a39c <__sfp_lock_acquire>
 800a444:	4b1e      	ldr	r3, [pc, #120]	; (800a4c0 <__sfp+0x84>)
 800a446:	681e      	ldr	r6, [r3, #0]
 800a448:	69b3      	ldr	r3, [r6, #24]
 800a44a:	b913      	cbnz	r3, 800a452 <__sfp+0x16>
 800a44c:	4630      	mov	r0, r6
 800a44e:	f7ff ffbd 	bl	800a3cc <__sinit>
 800a452:	3648      	adds	r6, #72	; 0x48
 800a454:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a458:	3b01      	subs	r3, #1
 800a45a:	d503      	bpl.n	800a464 <__sfp+0x28>
 800a45c:	6833      	ldr	r3, [r6, #0]
 800a45e:	b30b      	cbz	r3, 800a4a4 <__sfp+0x68>
 800a460:	6836      	ldr	r6, [r6, #0]
 800a462:	e7f7      	b.n	800a454 <__sfp+0x18>
 800a464:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a468:	b9d5      	cbnz	r5, 800a4a0 <__sfp+0x64>
 800a46a:	4b16      	ldr	r3, [pc, #88]	; (800a4c4 <__sfp+0x88>)
 800a46c:	60e3      	str	r3, [r4, #12]
 800a46e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a472:	6665      	str	r5, [r4, #100]	; 0x64
 800a474:	f000 fbba 	bl	800abec <__retarget_lock_init_recursive>
 800a478:	f7ff ff96 	bl	800a3a8 <__sfp_lock_release>
 800a47c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a480:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a484:	6025      	str	r5, [r4, #0]
 800a486:	61a5      	str	r5, [r4, #24]
 800a488:	2208      	movs	r2, #8
 800a48a:	4629      	mov	r1, r5
 800a48c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a490:	f7fd fa88 	bl	80079a4 <memset>
 800a494:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a498:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a49c:	4620      	mov	r0, r4
 800a49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a0:	3468      	adds	r4, #104	; 0x68
 800a4a2:	e7d9      	b.n	800a458 <__sfp+0x1c>
 800a4a4:	2104      	movs	r1, #4
 800a4a6:	4638      	mov	r0, r7
 800a4a8:	f7ff ff62 	bl	800a370 <__sfmoreglue>
 800a4ac:	4604      	mov	r4, r0
 800a4ae:	6030      	str	r0, [r6, #0]
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	d1d5      	bne.n	800a460 <__sfp+0x24>
 800a4b4:	f7ff ff78 	bl	800a3a8 <__sfp_lock_release>
 800a4b8:	230c      	movs	r3, #12
 800a4ba:	603b      	str	r3, [r7, #0]
 800a4bc:	e7ee      	b.n	800a49c <__sfp+0x60>
 800a4be:	bf00      	nop
 800a4c0:	0800ed9c 	.word	0x0800ed9c
 800a4c4:	ffff0001 	.word	0xffff0001

0800a4c8 <_fwalk_reent>:
 800a4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4cc:	4606      	mov	r6, r0
 800a4ce:	4688      	mov	r8, r1
 800a4d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a4d4:	2700      	movs	r7, #0
 800a4d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4da:	f1b9 0901 	subs.w	r9, r9, #1
 800a4de:	d505      	bpl.n	800a4ec <_fwalk_reent+0x24>
 800a4e0:	6824      	ldr	r4, [r4, #0]
 800a4e2:	2c00      	cmp	r4, #0
 800a4e4:	d1f7      	bne.n	800a4d6 <_fwalk_reent+0xe>
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ec:	89ab      	ldrh	r3, [r5, #12]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d907      	bls.n	800a502 <_fwalk_reent+0x3a>
 800a4f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	d003      	beq.n	800a502 <_fwalk_reent+0x3a>
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	47c0      	blx	r8
 800a500:	4307      	orrs	r7, r0
 800a502:	3568      	adds	r5, #104	; 0x68
 800a504:	e7e9      	b.n	800a4da <_fwalk_reent+0x12>

0800a506 <rshift>:
 800a506:	6903      	ldr	r3, [r0, #16]
 800a508:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a50c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a510:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a514:	f100 0414 	add.w	r4, r0, #20
 800a518:	dd45      	ble.n	800a5a6 <rshift+0xa0>
 800a51a:	f011 011f 	ands.w	r1, r1, #31
 800a51e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a522:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a526:	d10c      	bne.n	800a542 <rshift+0x3c>
 800a528:	f100 0710 	add.w	r7, r0, #16
 800a52c:	4629      	mov	r1, r5
 800a52e:	42b1      	cmp	r1, r6
 800a530:	d334      	bcc.n	800a59c <rshift+0x96>
 800a532:	1a9b      	subs	r3, r3, r2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	1eea      	subs	r2, r5, #3
 800a538:	4296      	cmp	r6, r2
 800a53a:	bf38      	it	cc
 800a53c:	2300      	movcc	r3, #0
 800a53e:	4423      	add	r3, r4
 800a540:	e015      	b.n	800a56e <rshift+0x68>
 800a542:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a546:	f1c1 0820 	rsb	r8, r1, #32
 800a54a:	40cf      	lsrs	r7, r1
 800a54c:	f105 0e04 	add.w	lr, r5, #4
 800a550:	46a1      	mov	r9, r4
 800a552:	4576      	cmp	r6, lr
 800a554:	46f4      	mov	ip, lr
 800a556:	d815      	bhi.n	800a584 <rshift+0x7e>
 800a558:	1a9a      	subs	r2, r3, r2
 800a55a:	0092      	lsls	r2, r2, #2
 800a55c:	3a04      	subs	r2, #4
 800a55e:	3501      	adds	r5, #1
 800a560:	42ae      	cmp	r6, r5
 800a562:	bf38      	it	cc
 800a564:	2200      	movcc	r2, #0
 800a566:	18a3      	adds	r3, r4, r2
 800a568:	50a7      	str	r7, [r4, r2]
 800a56a:	b107      	cbz	r7, 800a56e <rshift+0x68>
 800a56c:	3304      	adds	r3, #4
 800a56e:	1b1a      	subs	r2, r3, r4
 800a570:	42a3      	cmp	r3, r4
 800a572:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a576:	bf08      	it	eq
 800a578:	2300      	moveq	r3, #0
 800a57a:	6102      	str	r2, [r0, #16]
 800a57c:	bf08      	it	eq
 800a57e:	6143      	streq	r3, [r0, #20]
 800a580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a584:	f8dc c000 	ldr.w	ip, [ip]
 800a588:	fa0c fc08 	lsl.w	ip, ip, r8
 800a58c:	ea4c 0707 	orr.w	r7, ip, r7
 800a590:	f849 7b04 	str.w	r7, [r9], #4
 800a594:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a598:	40cf      	lsrs	r7, r1
 800a59a:	e7da      	b.n	800a552 <rshift+0x4c>
 800a59c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a5a0:	f847 cf04 	str.w	ip, [r7, #4]!
 800a5a4:	e7c3      	b.n	800a52e <rshift+0x28>
 800a5a6:	4623      	mov	r3, r4
 800a5a8:	e7e1      	b.n	800a56e <rshift+0x68>

0800a5aa <__hexdig_fun>:
 800a5aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a5ae:	2b09      	cmp	r3, #9
 800a5b0:	d802      	bhi.n	800a5b8 <__hexdig_fun+0xe>
 800a5b2:	3820      	subs	r0, #32
 800a5b4:	b2c0      	uxtb	r0, r0
 800a5b6:	4770      	bx	lr
 800a5b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a5bc:	2b05      	cmp	r3, #5
 800a5be:	d801      	bhi.n	800a5c4 <__hexdig_fun+0x1a>
 800a5c0:	3847      	subs	r0, #71	; 0x47
 800a5c2:	e7f7      	b.n	800a5b4 <__hexdig_fun+0xa>
 800a5c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a5c8:	2b05      	cmp	r3, #5
 800a5ca:	d801      	bhi.n	800a5d0 <__hexdig_fun+0x26>
 800a5cc:	3827      	subs	r0, #39	; 0x27
 800a5ce:	e7f1      	b.n	800a5b4 <__hexdig_fun+0xa>
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	4770      	bx	lr

0800a5d4 <__gethex>:
 800a5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d8:	ed2d 8b02 	vpush	{d8}
 800a5dc:	b089      	sub	sp, #36	; 0x24
 800a5de:	ee08 0a10 	vmov	s16, r0
 800a5e2:	9304      	str	r3, [sp, #16]
 800a5e4:	4bb4      	ldr	r3, [pc, #720]	; (800a8b8 <__gethex+0x2e4>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	468b      	mov	fp, r1
 800a5ee:	4690      	mov	r8, r2
 800a5f0:	f7f5 fdee 	bl	80001d0 <strlen>
 800a5f4:	9b01      	ldr	r3, [sp, #4]
 800a5f6:	f8db 2000 	ldr.w	r2, [fp]
 800a5fa:	4403      	add	r3, r0
 800a5fc:	4682      	mov	sl, r0
 800a5fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a602:	9305      	str	r3, [sp, #20]
 800a604:	1c93      	adds	r3, r2, #2
 800a606:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a60a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a60e:	32fe      	adds	r2, #254	; 0xfe
 800a610:	18d1      	adds	r1, r2, r3
 800a612:	461f      	mov	r7, r3
 800a614:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a618:	9100      	str	r1, [sp, #0]
 800a61a:	2830      	cmp	r0, #48	; 0x30
 800a61c:	d0f8      	beq.n	800a610 <__gethex+0x3c>
 800a61e:	f7ff ffc4 	bl	800a5aa <__hexdig_fun>
 800a622:	4604      	mov	r4, r0
 800a624:	2800      	cmp	r0, #0
 800a626:	d13a      	bne.n	800a69e <__gethex+0xca>
 800a628:	9901      	ldr	r1, [sp, #4]
 800a62a:	4652      	mov	r2, sl
 800a62c:	4638      	mov	r0, r7
 800a62e:	f001 ff0f 	bl	800c450 <strncmp>
 800a632:	4605      	mov	r5, r0
 800a634:	2800      	cmp	r0, #0
 800a636:	d168      	bne.n	800a70a <__gethex+0x136>
 800a638:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a63c:	eb07 060a 	add.w	r6, r7, sl
 800a640:	f7ff ffb3 	bl	800a5aa <__hexdig_fun>
 800a644:	2800      	cmp	r0, #0
 800a646:	d062      	beq.n	800a70e <__gethex+0x13a>
 800a648:	4633      	mov	r3, r6
 800a64a:	7818      	ldrb	r0, [r3, #0]
 800a64c:	2830      	cmp	r0, #48	; 0x30
 800a64e:	461f      	mov	r7, r3
 800a650:	f103 0301 	add.w	r3, r3, #1
 800a654:	d0f9      	beq.n	800a64a <__gethex+0x76>
 800a656:	f7ff ffa8 	bl	800a5aa <__hexdig_fun>
 800a65a:	2301      	movs	r3, #1
 800a65c:	fab0 f480 	clz	r4, r0
 800a660:	0964      	lsrs	r4, r4, #5
 800a662:	4635      	mov	r5, r6
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	463a      	mov	r2, r7
 800a668:	4616      	mov	r6, r2
 800a66a:	3201      	adds	r2, #1
 800a66c:	7830      	ldrb	r0, [r6, #0]
 800a66e:	f7ff ff9c 	bl	800a5aa <__hexdig_fun>
 800a672:	2800      	cmp	r0, #0
 800a674:	d1f8      	bne.n	800a668 <__gethex+0x94>
 800a676:	9901      	ldr	r1, [sp, #4]
 800a678:	4652      	mov	r2, sl
 800a67a:	4630      	mov	r0, r6
 800a67c:	f001 fee8 	bl	800c450 <strncmp>
 800a680:	b980      	cbnz	r0, 800a6a4 <__gethex+0xd0>
 800a682:	b94d      	cbnz	r5, 800a698 <__gethex+0xc4>
 800a684:	eb06 050a 	add.w	r5, r6, sl
 800a688:	462a      	mov	r2, r5
 800a68a:	4616      	mov	r6, r2
 800a68c:	3201      	adds	r2, #1
 800a68e:	7830      	ldrb	r0, [r6, #0]
 800a690:	f7ff ff8b 	bl	800a5aa <__hexdig_fun>
 800a694:	2800      	cmp	r0, #0
 800a696:	d1f8      	bne.n	800a68a <__gethex+0xb6>
 800a698:	1bad      	subs	r5, r5, r6
 800a69a:	00ad      	lsls	r5, r5, #2
 800a69c:	e004      	b.n	800a6a8 <__gethex+0xd4>
 800a69e:	2400      	movs	r4, #0
 800a6a0:	4625      	mov	r5, r4
 800a6a2:	e7e0      	b.n	800a666 <__gethex+0x92>
 800a6a4:	2d00      	cmp	r5, #0
 800a6a6:	d1f7      	bne.n	800a698 <__gethex+0xc4>
 800a6a8:	7833      	ldrb	r3, [r6, #0]
 800a6aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6ae:	2b50      	cmp	r3, #80	; 0x50
 800a6b0:	d13b      	bne.n	800a72a <__gethex+0x156>
 800a6b2:	7873      	ldrb	r3, [r6, #1]
 800a6b4:	2b2b      	cmp	r3, #43	; 0x2b
 800a6b6:	d02c      	beq.n	800a712 <__gethex+0x13e>
 800a6b8:	2b2d      	cmp	r3, #45	; 0x2d
 800a6ba:	d02e      	beq.n	800a71a <__gethex+0x146>
 800a6bc:	1c71      	adds	r1, r6, #1
 800a6be:	f04f 0900 	mov.w	r9, #0
 800a6c2:	7808      	ldrb	r0, [r1, #0]
 800a6c4:	f7ff ff71 	bl	800a5aa <__hexdig_fun>
 800a6c8:	1e43      	subs	r3, r0, #1
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	2b18      	cmp	r3, #24
 800a6ce:	d82c      	bhi.n	800a72a <__gethex+0x156>
 800a6d0:	f1a0 0210 	sub.w	r2, r0, #16
 800a6d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a6d8:	f7ff ff67 	bl	800a5aa <__hexdig_fun>
 800a6dc:	1e43      	subs	r3, r0, #1
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	2b18      	cmp	r3, #24
 800a6e2:	d91d      	bls.n	800a720 <__gethex+0x14c>
 800a6e4:	f1b9 0f00 	cmp.w	r9, #0
 800a6e8:	d000      	beq.n	800a6ec <__gethex+0x118>
 800a6ea:	4252      	negs	r2, r2
 800a6ec:	4415      	add	r5, r2
 800a6ee:	f8cb 1000 	str.w	r1, [fp]
 800a6f2:	b1e4      	cbz	r4, 800a72e <__gethex+0x15a>
 800a6f4:	9b00      	ldr	r3, [sp, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	bf14      	ite	ne
 800a6fa:	2700      	movne	r7, #0
 800a6fc:	2706      	moveq	r7, #6
 800a6fe:	4638      	mov	r0, r7
 800a700:	b009      	add	sp, #36	; 0x24
 800a702:	ecbd 8b02 	vpop	{d8}
 800a706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a70a:	463e      	mov	r6, r7
 800a70c:	4625      	mov	r5, r4
 800a70e:	2401      	movs	r4, #1
 800a710:	e7ca      	b.n	800a6a8 <__gethex+0xd4>
 800a712:	f04f 0900 	mov.w	r9, #0
 800a716:	1cb1      	adds	r1, r6, #2
 800a718:	e7d3      	b.n	800a6c2 <__gethex+0xee>
 800a71a:	f04f 0901 	mov.w	r9, #1
 800a71e:	e7fa      	b.n	800a716 <__gethex+0x142>
 800a720:	230a      	movs	r3, #10
 800a722:	fb03 0202 	mla	r2, r3, r2, r0
 800a726:	3a10      	subs	r2, #16
 800a728:	e7d4      	b.n	800a6d4 <__gethex+0x100>
 800a72a:	4631      	mov	r1, r6
 800a72c:	e7df      	b.n	800a6ee <__gethex+0x11a>
 800a72e:	1bf3      	subs	r3, r6, r7
 800a730:	3b01      	subs	r3, #1
 800a732:	4621      	mov	r1, r4
 800a734:	2b07      	cmp	r3, #7
 800a736:	dc0b      	bgt.n	800a750 <__gethex+0x17c>
 800a738:	ee18 0a10 	vmov	r0, s16
 800a73c:	f000 fa94 	bl	800ac68 <_Balloc>
 800a740:	4604      	mov	r4, r0
 800a742:	b940      	cbnz	r0, 800a756 <__gethex+0x182>
 800a744:	4b5d      	ldr	r3, [pc, #372]	; (800a8bc <__gethex+0x2e8>)
 800a746:	4602      	mov	r2, r0
 800a748:	21de      	movs	r1, #222	; 0xde
 800a74a:	485d      	ldr	r0, [pc, #372]	; (800a8c0 <__gethex+0x2ec>)
 800a74c:	f002 f810 	bl	800c770 <__assert_func>
 800a750:	3101      	adds	r1, #1
 800a752:	105b      	asrs	r3, r3, #1
 800a754:	e7ee      	b.n	800a734 <__gethex+0x160>
 800a756:	f100 0914 	add.w	r9, r0, #20
 800a75a:	f04f 0b00 	mov.w	fp, #0
 800a75e:	f1ca 0301 	rsb	r3, sl, #1
 800a762:	f8cd 9008 	str.w	r9, [sp, #8]
 800a766:	f8cd b000 	str.w	fp, [sp]
 800a76a:	9306      	str	r3, [sp, #24]
 800a76c:	42b7      	cmp	r7, r6
 800a76e:	d340      	bcc.n	800a7f2 <__gethex+0x21e>
 800a770:	9802      	ldr	r0, [sp, #8]
 800a772:	9b00      	ldr	r3, [sp, #0]
 800a774:	f840 3b04 	str.w	r3, [r0], #4
 800a778:	eba0 0009 	sub.w	r0, r0, r9
 800a77c:	1080      	asrs	r0, r0, #2
 800a77e:	0146      	lsls	r6, r0, #5
 800a780:	6120      	str	r0, [r4, #16]
 800a782:	4618      	mov	r0, r3
 800a784:	f000 fb62 	bl	800ae4c <__hi0bits>
 800a788:	1a30      	subs	r0, r6, r0
 800a78a:	f8d8 6000 	ldr.w	r6, [r8]
 800a78e:	42b0      	cmp	r0, r6
 800a790:	dd63      	ble.n	800a85a <__gethex+0x286>
 800a792:	1b87      	subs	r7, r0, r6
 800a794:	4639      	mov	r1, r7
 800a796:	4620      	mov	r0, r4
 800a798:	f000 ff06 	bl	800b5a8 <__any_on>
 800a79c:	4682      	mov	sl, r0
 800a79e:	b1a8      	cbz	r0, 800a7cc <__gethex+0x1f8>
 800a7a0:	1e7b      	subs	r3, r7, #1
 800a7a2:	1159      	asrs	r1, r3, #5
 800a7a4:	f003 021f 	and.w	r2, r3, #31
 800a7a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a7ac:	f04f 0a01 	mov.w	sl, #1
 800a7b0:	fa0a f202 	lsl.w	r2, sl, r2
 800a7b4:	420a      	tst	r2, r1
 800a7b6:	d009      	beq.n	800a7cc <__gethex+0x1f8>
 800a7b8:	4553      	cmp	r3, sl
 800a7ba:	dd05      	ble.n	800a7c8 <__gethex+0x1f4>
 800a7bc:	1eb9      	subs	r1, r7, #2
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f000 fef2 	bl	800b5a8 <__any_on>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d145      	bne.n	800a854 <__gethex+0x280>
 800a7c8:	f04f 0a02 	mov.w	sl, #2
 800a7cc:	4639      	mov	r1, r7
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f7ff fe99 	bl	800a506 <rshift>
 800a7d4:	443d      	add	r5, r7
 800a7d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7da:	42ab      	cmp	r3, r5
 800a7dc:	da4c      	bge.n	800a878 <__gethex+0x2a4>
 800a7de:	ee18 0a10 	vmov	r0, s16
 800a7e2:	4621      	mov	r1, r4
 800a7e4:	f000 fa80 	bl	800ace8 <_Bfree>
 800a7e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	6013      	str	r3, [r2, #0]
 800a7ee:	27a3      	movs	r7, #163	; 0xa3
 800a7f0:	e785      	b.n	800a6fe <__gethex+0x12a>
 800a7f2:	1e73      	subs	r3, r6, #1
 800a7f4:	9a05      	ldr	r2, [sp, #20]
 800a7f6:	9303      	str	r3, [sp, #12]
 800a7f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d019      	beq.n	800a834 <__gethex+0x260>
 800a800:	f1bb 0f20 	cmp.w	fp, #32
 800a804:	d107      	bne.n	800a816 <__gethex+0x242>
 800a806:	9b02      	ldr	r3, [sp, #8]
 800a808:	9a00      	ldr	r2, [sp, #0]
 800a80a:	f843 2b04 	str.w	r2, [r3], #4
 800a80e:	9302      	str	r3, [sp, #8]
 800a810:	2300      	movs	r3, #0
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	469b      	mov	fp, r3
 800a816:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a81a:	f7ff fec6 	bl	800a5aa <__hexdig_fun>
 800a81e:	9b00      	ldr	r3, [sp, #0]
 800a820:	f000 000f 	and.w	r0, r0, #15
 800a824:	fa00 f00b 	lsl.w	r0, r0, fp
 800a828:	4303      	orrs	r3, r0
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	f10b 0b04 	add.w	fp, fp, #4
 800a830:	9b03      	ldr	r3, [sp, #12]
 800a832:	e00d      	b.n	800a850 <__gethex+0x27c>
 800a834:	9b03      	ldr	r3, [sp, #12]
 800a836:	9a06      	ldr	r2, [sp, #24]
 800a838:	4413      	add	r3, r2
 800a83a:	42bb      	cmp	r3, r7
 800a83c:	d3e0      	bcc.n	800a800 <__gethex+0x22c>
 800a83e:	4618      	mov	r0, r3
 800a840:	9901      	ldr	r1, [sp, #4]
 800a842:	9307      	str	r3, [sp, #28]
 800a844:	4652      	mov	r2, sl
 800a846:	f001 fe03 	bl	800c450 <strncmp>
 800a84a:	9b07      	ldr	r3, [sp, #28]
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d1d7      	bne.n	800a800 <__gethex+0x22c>
 800a850:	461e      	mov	r6, r3
 800a852:	e78b      	b.n	800a76c <__gethex+0x198>
 800a854:	f04f 0a03 	mov.w	sl, #3
 800a858:	e7b8      	b.n	800a7cc <__gethex+0x1f8>
 800a85a:	da0a      	bge.n	800a872 <__gethex+0x29e>
 800a85c:	1a37      	subs	r7, r6, r0
 800a85e:	4621      	mov	r1, r4
 800a860:	ee18 0a10 	vmov	r0, s16
 800a864:	463a      	mov	r2, r7
 800a866:	f000 fc5b 	bl	800b120 <__lshift>
 800a86a:	1bed      	subs	r5, r5, r7
 800a86c:	4604      	mov	r4, r0
 800a86e:	f100 0914 	add.w	r9, r0, #20
 800a872:	f04f 0a00 	mov.w	sl, #0
 800a876:	e7ae      	b.n	800a7d6 <__gethex+0x202>
 800a878:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a87c:	42a8      	cmp	r0, r5
 800a87e:	dd72      	ble.n	800a966 <__gethex+0x392>
 800a880:	1b45      	subs	r5, r0, r5
 800a882:	42ae      	cmp	r6, r5
 800a884:	dc36      	bgt.n	800a8f4 <__gethex+0x320>
 800a886:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d02a      	beq.n	800a8e4 <__gethex+0x310>
 800a88e:	2b03      	cmp	r3, #3
 800a890:	d02c      	beq.n	800a8ec <__gethex+0x318>
 800a892:	2b01      	cmp	r3, #1
 800a894:	d11c      	bne.n	800a8d0 <__gethex+0x2fc>
 800a896:	42ae      	cmp	r6, r5
 800a898:	d11a      	bne.n	800a8d0 <__gethex+0x2fc>
 800a89a:	2e01      	cmp	r6, #1
 800a89c:	d112      	bne.n	800a8c4 <__gethex+0x2f0>
 800a89e:	9a04      	ldr	r2, [sp, #16]
 800a8a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a8a4:	6013      	str	r3, [r2, #0]
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	6123      	str	r3, [r4, #16]
 800a8aa:	f8c9 3000 	str.w	r3, [r9]
 800a8ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8b0:	2762      	movs	r7, #98	; 0x62
 800a8b2:	601c      	str	r4, [r3, #0]
 800a8b4:	e723      	b.n	800a6fe <__gethex+0x12a>
 800a8b6:	bf00      	nop
 800a8b8:	0800f0a8 	.word	0x0800f0a8
 800a8bc:	0800efcd 	.word	0x0800efcd
 800a8c0:	0800f040 	.word	0x0800f040
 800a8c4:	1e71      	subs	r1, r6, #1
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f000 fe6e 	bl	800b5a8 <__any_on>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d1e6      	bne.n	800a89e <__gethex+0x2ca>
 800a8d0:	ee18 0a10 	vmov	r0, s16
 800a8d4:	4621      	mov	r1, r4
 800a8d6:	f000 fa07 	bl	800ace8 <_Bfree>
 800a8da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a8dc:	2300      	movs	r3, #0
 800a8de:	6013      	str	r3, [r2, #0]
 800a8e0:	2750      	movs	r7, #80	; 0x50
 800a8e2:	e70c      	b.n	800a6fe <__gethex+0x12a>
 800a8e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1f2      	bne.n	800a8d0 <__gethex+0x2fc>
 800a8ea:	e7d8      	b.n	800a89e <__gethex+0x2ca>
 800a8ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1d5      	bne.n	800a89e <__gethex+0x2ca>
 800a8f2:	e7ed      	b.n	800a8d0 <__gethex+0x2fc>
 800a8f4:	1e6f      	subs	r7, r5, #1
 800a8f6:	f1ba 0f00 	cmp.w	sl, #0
 800a8fa:	d131      	bne.n	800a960 <__gethex+0x38c>
 800a8fc:	b127      	cbz	r7, 800a908 <__gethex+0x334>
 800a8fe:	4639      	mov	r1, r7
 800a900:	4620      	mov	r0, r4
 800a902:	f000 fe51 	bl	800b5a8 <__any_on>
 800a906:	4682      	mov	sl, r0
 800a908:	117b      	asrs	r3, r7, #5
 800a90a:	2101      	movs	r1, #1
 800a90c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a910:	f007 071f 	and.w	r7, r7, #31
 800a914:	fa01 f707 	lsl.w	r7, r1, r7
 800a918:	421f      	tst	r7, r3
 800a91a:	4629      	mov	r1, r5
 800a91c:	4620      	mov	r0, r4
 800a91e:	bf18      	it	ne
 800a920:	f04a 0a02 	orrne.w	sl, sl, #2
 800a924:	1b76      	subs	r6, r6, r5
 800a926:	f7ff fdee 	bl	800a506 <rshift>
 800a92a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a92e:	2702      	movs	r7, #2
 800a930:	f1ba 0f00 	cmp.w	sl, #0
 800a934:	d048      	beq.n	800a9c8 <__gethex+0x3f4>
 800a936:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a93a:	2b02      	cmp	r3, #2
 800a93c:	d015      	beq.n	800a96a <__gethex+0x396>
 800a93e:	2b03      	cmp	r3, #3
 800a940:	d017      	beq.n	800a972 <__gethex+0x39e>
 800a942:	2b01      	cmp	r3, #1
 800a944:	d109      	bne.n	800a95a <__gethex+0x386>
 800a946:	f01a 0f02 	tst.w	sl, #2
 800a94a:	d006      	beq.n	800a95a <__gethex+0x386>
 800a94c:	f8d9 0000 	ldr.w	r0, [r9]
 800a950:	ea4a 0a00 	orr.w	sl, sl, r0
 800a954:	f01a 0f01 	tst.w	sl, #1
 800a958:	d10e      	bne.n	800a978 <__gethex+0x3a4>
 800a95a:	f047 0710 	orr.w	r7, r7, #16
 800a95e:	e033      	b.n	800a9c8 <__gethex+0x3f4>
 800a960:	f04f 0a01 	mov.w	sl, #1
 800a964:	e7d0      	b.n	800a908 <__gethex+0x334>
 800a966:	2701      	movs	r7, #1
 800a968:	e7e2      	b.n	800a930 <__gethex+0x35c>
 800a96a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a96c:	f1c3 0301 	rsb	r3, r3, #1
 800a970:	9315      	str	r3, [sp, #84]	; 0x54
 800a972:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a974:	2b00      	cmp	r3, #0
 800a976:	d0f0      	beq.n	800a95a <__gethex+0x386>
 800a978:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a97c:	f104 0314 	add.w	r3, r4, #20
 800a980:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a984:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a988:	f04f 0c00 	mov.w	ip, #0
 800a98c:	4618      	mov	r0, r3
 800a98e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a992:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a996:	d01c      	beq.n	800a9d2 <__gethex+0x3fe>
 800a998:	3201      	adds	r2, #1
 800a99a:	6002      	str	r2, [r0, #0]
 800a99c:	2f02      	cmp	r7, #2
 800a99e:	f104 0314 	add.w	r3, r4, #20
 800a9a2:	d13f      	bne.n	800aa24 <__gethex+0x450>
 800a9a4:	f8d8 2000 	ldr.w	r2, [r8]
 800a9a8:	3a01      	subs	r2, #1
 800a9aa:	42b2      	cmp	r2, r6
 800a9ac:	d10a      	bne.n	800a9c4 <__gethex+0x3f0>
 800a9ae:	1171      	asrs	r1, r6, #5
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9b6:	f006 061f 	and.w	r6, r6, #31
 800a9ba:	fa02 f606 	lsl.w	r6, r2, r6
 800a9be:	421e      	tst	r6, r3
 800a9c0:	bf18      	it	ne
 800a9c2:	4617      	movne	r7, r2
 800a9c4:	f047 0720 	orr.w	r7, r7, #32
 800a9c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9ca:	601c      	str	r4, [r3, #0]
 800a9cc:	9b04      	ldr	r3, [sp, #16]
 800a9ce:	601d      	str	r5, [r3, #0]
 800a9d0:	e695      	b.n	800a6fe <__gethex+0x12a>
 800a9d2:	4299      	cmp	r1, r3
 800a9d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a9d8:	d8d8      	bhi.n	800a98c <__gethex+0x3b8>
 800a9da:	68a3      	ldr	r3, [r4, #8]
 800a9dc:	459b      	cmp	fp, r3
 800a9de:	db19      	blt.n	800aa14 <__gethex+0x440>
 800a9e0:	6861      	ldr	r1, [r4, #4]
 800a9e2:	ee18 0a10 	vmov	r0, s16
 800a9e6:	3101      	adds	r1, #1
 800a9e8:	f000 f93e 	bl	800ac68 <_Balloc>
 800a9ec:	4681      	mov	r9, r0
 800a9ee:	b918      	cbnz	r0, 800a9f8 <__gethex+0x424>
 800a9f0:	4b1a      	ldr	r3, [pc, #104]	; (800aa5c <__gethex+0x488>)
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	2184      	movs	r1, #132	; 0x84
 800a9f6:	e6a8      	b.n	800a74a <__gethex+0x176>
 800a9f8:	6922      	ldr	r2, [r4, #16]
 800a9fa:	3202      	adds	r2, #2
 800a9fc:	f104 010c 	add.w	r1, r4, #12
 800aa00:	0092      	lsls	r2, r2, #2
 800aa02:	300c      	adds	r0, #12
 800aa04:	f000 f922 	bl	800ac4c <memcpy>
 800aa08:	4621      	mov	r1, r4
 800aa0a:	ee18 0a10 	vmov	r0, s16
 800aa0e:	f000 f96b 	bl	800ace8 <_Bfree>
 800aa12:	464c      	mov	r4, r9
 800aa14:	6923      	ldr	r3, [r4, #16]
 800aa16:	1c5a      	adds	r2, r3, #1
 800aa18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa1c:	6122      	str	r2, [r4, #16]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	615a      	str	r2, [r3, #20]
 800aa22:	e7bb      	b.n	800a99c <__gethex+0x3c8>
 800aa24:	6922      	ldr	r2, [r4, #16]
 800aa26:	455a      	cmp	r2, fp
 800aa28:	dd0b      	ble.n	800aa42 <__gethex+0x46e>
 800aa2a:	2101      	movs	r1, #1
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f7ff fd6a 	bl	800a506 <rshift>
 800aa32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa36:	3501      	adds	r5, #1
 800aa38:	42ab      	cmp	r3, r5
 800aa3a:	f6ff aed0 	blt.w	800a7de <__gethex+0x20a>
 800aa3e:	2701      	movs	r7, #1
 800aa40:	e7c0      	b.n	800a9c4 <__gethex+0x3f0>
 800aa42:	f016 061f 	ands.w	r6, r6, #31
 800aa46:	d0fa      	beq.n	800aa3e <__gethex+0x46a>
 800aa48:	4453      	add	r3, sl
 800aa4a:	f1c6 0620 	rsb	r6, r6, #32
 800aa4e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aa52:	f000 f9fb 	bl	800ae4c <__hi0bits>
 800aa56:	42b0      	cmp	r0, r6
 800aa58:	dbe7      	blt.n	800aa2a <__gethex+0x456>
 800aa5a:	e7f0      	b.n	800aa3e <__gethex+0x46a>
 800aa5c:	0800efcd 	.word	0x0800efcd

0800aa60 <L_shift>:
 800aa60:	f1c2 0208 	rsb	r2, r2, #8
 800aa64:	0092      	lsls	r2, r2, #2
 800aa66:	b570      	push	{r4, r5, r6, lr}
 800aa68:	f1c2 0620 	rsb	r6, r2, #32
 800aa6c:	6843      	ldr	r3, [r0, #4]
 800aa6e:	6804      	ldr	r4, [r0, #0]
 800aa70:	fa03 f506 	lsl.w	r5, r3, r6
 800aa74:	432c      	orrs	r4, r5
 800aa76:	40d3      	lsrs	r3, r2
 800aa78:	6004      	str	r4, [r0, #0]
 800aa7a:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa7e:	4288      	cmp	r0, r1
 800aa80:	d3f4      	bcc.n	800aa6c <L_shift+0xc>
 800aa82:	bd70      	pop	{r4, r5, r6, pc}

0800aa84 <__match>:
 800aa84:	b530      	push	{r4, r5, lr}
 800aa86:	6803      	ldr	r3, [r0, #0]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa8e:	b914      	cbnz	r4, 800aa96 <__match+0x12>
 800aa90:	6003      	str	r3, [r0, #0]
 800aa92:	2001      	movs	r0, #1
 800aa94:	bd30      	pop	{r4, r5, pc}
 800aa96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aa9e:	2d19      	cmp	r5, #25
 800aaa0:	bf98      	it	ls
 800aaa2:	3220      	addls	r2, #32
 800aaa4:	42a2      	cmp	r2, r4
 800aaa6:	d0f0      	beq.n	800aa8a <__match+0x6>
 800aaa8:	2000      	movs	r0, #0
 800aaaa:	e7f3      	b.n	800aa94 <__match+0x10>

0800aaac <__hexnan>:
 800aaac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab0:	680b      	ldr	r3, [r1, #0]
 800aab2:	115e      	asrs	r6, r3, #5
 800aab4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aab8:	f013 031f 	ands.w	r3, r3, #31
 800aabc:	b087      	sub	sp, #28
 800aabe:	bf18      	it	ne
 800aac0:	3604      	addne	r6, #4
 800aac2:	2500      	movs	r5, #0
 800aac4:	1f37      	subs	r7, r6, #4
 800aac6:	4690      	mov	r8, r2
 800aac8:	6802      	ldr	r2, [r0, #0]
 800aaca:	9301      	str	r3, [sp, #4]
 800aacc:	4682      	mov	sl, r0
 800aace:	f846 5c04 	str.w	r5, [r6, #-4]
 800aad2:	46b9      	mov	r9, r7
 800aad4:	463c      	mov	r4, r7
 800aad6:	9502      	str	r5, [sp, #8]
 800aad8:	46ab      	mov	fp, r5
 800aada:	7851      	ldrb	r1, [r2, #1]
 800aadc:	1c53      	adds	r3, r2, #1
 800aade:	9303      	str	r3, [sp, #12]
 800aae0:	b341      	cbz	r1, 800ab34 <__hexnan+0x88>
 800aae2:	4608      	mov	r0, r1
 800aae4:	9205      	str	r2, [sp, #20]
 800aae6:	9104      	str	r1, [sp, #16]
 800aae8:	f7ff fd5f 	bl	800a5aa <__hexdig_fun>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	d14f      	bne.n	800ab90 <__hexnan+0xe4>
 800aaf0:	9904      	ldr	r1, [sp, #16]
 800aaf2:	9a05      	ldr	r2, [sp, #20]
 800aaf4:	2920      	cmp	r1, #32
 800aaf6:	d818      	bhi.n	800ab2a <__hexnan+0x7e>
 800aaf8:	9b02      	ldr	r3, [sp, #8]
 800aafa:	459b      	cmp	fp, r3
 800aafc:	dd13      	ble.n	800ab26 <__hexnan+0x7a>
 800aafe:	454c      	cmp	r4, r9
 800ab00:	d206      	bcs.n	800ab10 <__hexnan+0x64>
 800ab02:	2d07      	cmp	r5, #7
 800ab04:	dc04      	bgt.n	800ab10 <__hexnan+0x64>
 800ab06:	462a      	mov	r2, r5
 800ab08:	4649      	mov	r1, r9
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f7ff ffa8 	bl	800aa60 <L_shift>
 800ab10:	4544      	cmp	r4, r8
 800ab12:	d950      	bls.n	800abb6 <__hexnan+0x10a>
 800ab14:	2300      	movs	r3, #0
 800ab16:	f1a4 0904 	sub.w	r9, r4, #4
 800ab1a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab1e:	f8cd b008 	str.w	fp, [sp, #8]
 800ab22:	464c      	mov	r4, r9
 800ab24:	461d      	mov	r5, r3
 800ab26:	9a03      	ldr	r2, [sp, #12]
 800ab28:	e7d7      	b.n	800aada <__hexnan+0x2e>
 800ab2a:	2929      	cmp	r1, #41	; 0x29
 800ab2c:	d156      	bne.n	800abdc <__hexnan+0x130>
 800ab2e:	3202      	adds	r2, #2
 800ab30:	f8ca 2000 	str.w	r2, [sl]
 800ab34:	f1bb 0f00 	cmp.w	fp, #0
 800ab38:	d050      	beq.n	800abdc <__hexnan+0x130>
 800ab3a:	454c      	cmp	r4, r9
 800ab3c:	d206      	bcs.n	800ab4c <__hexnan+0xa0>
 800ab3e:	2d07      	cmp	r5, #7
 800ab40:	dc04      	bgt.n	800ab4c <__hexnan+0xa0>
 800ab42:	462a      	mov	r2, r5
 800ab44:	4649      	mov	r1, r9
 800ab46:	4620      	mov	r0, r4
 800ab48:	f7ff ff8a 	bl	800aa60 <L_shift>
 800ab4c:	4544      	cmp	r4, r8
 800ab4e:	d934      	bls.n	800abba <__hexnan+0x10e>
 800ab50:	f1a8 0204 	sub.w	r2, r8, #4
 800ab54:	4623      	mov	r3, r4
 800ab56:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab5a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab5e:	429f      	cmp	r7, r3
 800ab60:	d2f9      	bcs.n	800ab56 <__hexnan+0xaa>
 800ab62:	1b3b      	subs	r3, r7, r4
 800ab64:	f023 0303 	bic.w	r3, r3, #3
 800ab68:	3304      	adds	r3, #4
 800ab6a:	3401      	adds	r4, #1
 800ab6c:	3e03      	subs	r6, #3
 800ab6e:	42b4      	cmp	r4, r6
 800ab70:	bf88      	it	hi
 800ab72:	2304      	movhi	r3, #4
 800ab74:	4443      	add	r3, r8
 800ab76:	2200      	movs	r2, #0
 800ab78:	f843 2b04 	str.w	r2, [r3], #4
 800ab7c:	429f      	cmp	r7, r3
 800ab7e:	d2fb      	bcs.n	800ab78 <__hexnan+0xcc>
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	b91b      	cbnz	r3, 800ab8c <__hexnan+0xe0>
 800ab84:	4547      	cmp	r7, r8
 800ab86:	d127      	bne.n	800abd8 <__hexnan+0x12c>
 800ab88:	2301      	movs	r3, #1
 800ab8a:	603b      	str	r3, [r7, #0]
 800ab8c:	2005      	movs	r0, #5
 800ab8e:	e026      	b.n	800abde <__hexnan+0x132>
 800ab90:	3501      	adds	r5, #1
 800ab92:	2d08      	cmp	r5, #8
 800ab94:	f10b 0b01 	add.w	fp, fp, #1
 800ab98:	dd06      	ble.n	800aba8 <__hexnan+0xfc>
 800ab9a:	4544      	cmp	r4, r8
 800ab9c:	d9c3      	bls.n	800ab26 <__hexnan+0x7a>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f844 3c04 	str.w	r3, [r4, #-4]
 800aba4:	2501      	movs	r5, #1
 800aba6:	3c04      	subs	r4, #4
 800aba8:	6822      	ldr	r2, [r4, #0]
 800abaa:	f000 000f 	and.w	r0, r0, #15
 800abae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800abb2:	6022      	str	r2, [r4, #0]
 800abb4:	e7b7      	b.n	800ab26 <__hexnan+0x7a>
 800abb6:	2508      	movs	r5, #8
 800abb8:	e7b5      	b.n	800ab26 <__hexnan+0x7a>
 800abba:	9b01      	ldr	r3, [sp, #4]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d0df      	beq.n	800ab80 <__hexnan+0xd4>
 800abc0:	f04f 32ff 	mov.w	r2, #4294967295
 800abc4:	f1c3 0320 	rsb	r3, r3, #32
 800abc8:	fa22 f303 	lsr.w	r3, r2, r3
 800abcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800abd0:	401a      	ands	r2, r3
 800abd2:	f846 2c04 	str.w	r2, [r6, #-4]
 800abd6:	e7d3      	b.n	800ab80 <__hexnan+0xd4>
 800abd8:	3f04      	subs	r7, #4
 800abda:	e7d1      	b.n	800ab80 <__hexnan+0xd4>
 800abdc:	2004      	movs	r0, #4
 800abde:	b007      	add	sp, #28
 800abe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abe4 <_localeconv_r>:
 800abe4:	4800      	ldr	r0, [pc, #0]	; (800abe8 <_localeconv_r+0x4>)
 800abe6:	4770      	bx	lr
 800abe8:	20000180 	.word	0x20000180

0800abec <__retarget_lock_init_recursive>:
 800abec:	4770      	bx	lr

0800abee <__retarget_lock_acquire_recursive>:
 800abee:	4770      	bx	lr

0800abf0 <__retarget_lock_release_recursive>:
 800abf0:	4770      	bx	lr
	...

0800abf4 <_lseek_r>:
 800abf4:	b538      	push	{r3, r4, r5, lr}
 800abf6:	4d07      	ldr	r5, [pc, #28]	; (800ac14 <_lseek_r+0x20>)
 800abf8:	4604      	mov	r4, r0
 800abfa:	4608      	mov	r0, r1
 800abfc:	4611      	mov	r1, r2
 800abfe:	2200      	movs	r2, #0
 800ac00:	602a      	str	r2, [r5, #0]
 800ac02:	461a      	mov	r2, r3
 800ac04:	f7f7 faf2 	bl	80021ec <_lseek>
 800ac08:	1c43      	adds	r3, r0, #1
 800ac0a:	d102      	bne.n	800ac12 <_lseek_r+0x1e>
 800ac0c:	682b      	ldr	r3, [r5, #0]
 800ac0e:	b103      	cbz	r3, 800ac12 <_lseek_r+0x1e>
 800ac10:	6023      	str	r3, [r4, #0]
 800ac12:	bd38      	pop	{r3, r4, r5, pc}
 800ac14:	20000924 	.word	0x20000924

0800ac18 <malloc>:
 800ac18:	4b02      	ldr	r3, [pc, #8]	; (800ac24 <malloc+0xc>)
 800ac1a:	4601      	mov	r1, r0
 800ac1c:	6818      	ldr	r0, [r3, #0]
 800ac1e:	f000 bd67 	b.w	800b6f0 <_malloc_r>
 800ac22:	bf00      	nop
 800ac24:	20000028 	.word	0x20000028

0800ac28 <__ascii_mbtowc>:
 800ac28:	b082      	sub	sp, #8
 800ac2a:	b901      	cbnz	r1, 800ac2e <__ascii_mbtowc+0x6>
 800ac2c:	a901      	add	r1, sp, #4
 800ac2e:	b142      	cbz	r2, 800ac42 <__ascii_mbtowc+0x1a>
 800ac30:	b14b      	cbz	r3, 800ac46 <__ascii_mbtowc+0x1e>
 800ac32:	7813      	ldrb	r3, [r2, #0]
 800ac34:	600b      	str	r3, [r1, #0]
 800ac36:	7812      	ldrb	r2, [r2, #0]
 800ac38:	1e10      	subs	r0, r2, #0
 800ac3a:	bf18      	it	ne
 800ac3c:	2001      	movne	r0, #1
 800ac3e:	b002      	add	sp, #8
 800ac40:	4770      	bx	lr
 800ac42:	4610      	mov	r0, r2
 800ac44:	e7fb      	b.n	800ac3e <__ascii_mbtowc+0x16>
 800ac46:	f06f 0001 	mvn.w	r0, #1
 800ac4a:	e7f8      	b.n	800ac3e <__ascii_mbtowc+0x16>

0800ac4c <memcpy>:
 800ac4c:	440a      	add	r2, r1
 800ac4e:	4291      	cmp	r1, r2
 800ac50:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac54:	d100      	bne.n	800ac58 <memcpy+0xc>
 800ac56:	4770      	bx	lr
 800ac58:	b510      	push	{r4, lr}
 800ac5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac62:	4291      	cmp	r1, r2
 800ac64:	d1f9      	bne.n	800ac5a <memcpy+0xe>
 800ac66:	bd10      	pop	{r4, pc}

0800ac68 <_Balloc>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	460d      	mov	r5, r1
 800ac70:	b976      	cbnz	r6, 800ac90 <_Balloc+0x28>
 800ac72:	2010      	movs	r0, #16
 800ac74:	f7ff ffd0 	bl	800ac18 <malloc>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	6260      	str	r0, [r4, #36]	; 0x24
 800ac7c:	b920      	cbnz	r0, 800ac88 <_Balloc+0x20>
 800ac7e:	4b18      	ldr	r3, [pc, #96]	; (800ace0 <_Balloc+0x78>)
 800ac80:	4818      	ldr	r0, [pc, #96]	; (800ace4 <_Balloc+0x7c>)
 800ac82:	2166      	movs	r1, #102	; 0x66
 800ac84:	f001 fd74 	bl	800c770 <__assert_func>
 800ac88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac8c:	6006      	str	r6, [r0, #0]
 800ac8e:	60c6      	str	r6, [r0, #12]
 800ac90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac92:	68f3      	ldr	r3, [r6, #12]
 800ac94:	b183      	cbz	r3, 800acb8 <_Balloc+0x50>
 800ac96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac9e:	b9b8      	cbnz	r0, 800acd0 <_Balloc+0x68>
 800aca0:	2101      	movs	r1, #1
 800aca2:	fa01 f605 	lsl.w	r6, r1, r5
 800aca6:	1d72      	adds	r2, r6, #5
 800aca8:	0092      	lsls	r2, r2, #2
 800acaa:	4620      	mov	r0, r4
 800acac:	f000 fc9d 	bl	800b5ea <_calloc_r>
 800acb0:	b160      	cbz	r0, 800accc <_Balloc+0x64>
 800acb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acb6:	e00e      	b.n	800acd6 <_Balloc+0x6e>
 800acb8:	2221      	movs	r2, #33	; 0x21
 800acba:	2104      	movs	r1, #4
 800acbc:	4620      	mov	r0, r4
 800acbe:	f000 fc94 	bl	800b5ea <_calloc_r>
 800acc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acc4:	60f0      	str	r0, [r6, #12]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d1e4      	bne.n	800ac96 <_Balloc+0x2e>
 800accc:	2000      	movs	r0, #0
 800acce:	bd70      	pop	{r4, r5, r6, pc}
 800acd0:	6802      	ldr	r2, [r0, #0]
 800acd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acd6:	2300      	movs	r3, #0
 800acd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acdc:	e7f7      	b.n	800acce <_Balloc+0x66>
 800acde:	bf00      	nop
 800ace0:	0800ef5b 	.word	0x0800ef5b
 800ace4:	0800f0bc 	.word	0x0800f0bc

0800ace8 <_Bfree>:
 800ace8:	b570      	push	{r4, r5, r6, lr}
 800acea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800acec:	4605      	mov	r5, r0
 800acee:	460c      	mov	r4, r1
 800acf0:	b976      	cbnz	r6, 800ad10 <_Bfree+0x28>
 800acf2:	2010      	movs	r0, #16
 800acf4:	f7ff ff90 	bl	800ac18 <malloc>
 800acf8:	4602      	mov	r2, r0
 800acfa:	6268      	str	r0, [r5, #36]	; 0x24
 800acfc:	b920      	cbnz	r0, 800ad08 <_Bfree+0x20>
 800acfe:	4b09      	ldr	r3, [pc, #36]	; (800ad24 <_Bfree+0x3c>)
 800ad00:	4809      	ldr	r0, [pc, #36]	; (800ad28 <_Bfree+0x40>)
 800ad02:	218a      	movs	r1, #138	; 0x8a
 800ad04:	f001 fd34 	bl	800c770 <__assert_func>
 800ad08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad0c:	6006      	str	r6, [r0, #0]
 800ad0e:	60c6      	str	r6, [r0, #12]
 800ad10:	b13c      	cbz	r4, 800ad22 <_Bfree+0x3a>
 800ad12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad14:	6862      	ldr	r2, [r4, #4]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad1c:	6021      	str	r1, [r4, #0]
 800ad1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad22:	bd70      	pop	{r4, r5, r6, pc}
 800ad24:	0800ef5b 	.word	0x0800ef5b
 800ad28:	0800f0bc 	.word	0x0800f0bc

0800ad2c <__multadd>:
 800ad2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad30:	690d      	ldr	r5, [r1, #16]
 800ad32:	4607      	mov	r7, r0
 800ad34:	460c      	mov	r4, r1
 800ad36:	461e      	mov	r6, r3
 800ad38:	f101 0c14 	add.w	ip, r1, #20
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	f8dc 3000 	ldr.w	r3, [ip]
 800ad42:	b299      	uxth	r1, r3
 800ad44:	fb02 6101 	mla	r1, r2, r1, r6
 800ad48:	0c1e      	lsrs	r6, r3, #16
 800ad4a:	0c0b      	lsrs	r3, r1, #16
 800ad4c:	fb02 3306 	mla	r3, r2, r6, r3
 800ad50:	b289      	uxth	r1, r1
 800ad52:	3001      	adds	r0, #1
 800ad54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad58:	4285      	cmp	r5, r0
 800ad5a:	f84c 1b04 	str.w	r1, [ip], #4
 800ad5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad62:	dcec      	bgt.n	800ad3e <__multadd+0x12>
 800ad64:	b30e      	cbz	r6, 800adaa <__multadd+0x7e>
 800ad66:	68a3      	ldr	r3, [r4, #8]
 800ad68:	42ab      	cmp	r3, r5
 800ad6a:	dc19      	bgt.n	800ada0 <__multadd+0x74>
 800ad6c:	6861      	ldr	r1, [r4, #4]
 800ad6e:	4638      	mov	r0, r7
 800ad70:	3101      	adds	r1, #1
 800ad72:	f7ff ff79 	bl	800ac68 <_Balloc>
 800ad76:	4680      	mov	r8, r0
 800ad78:	b928      	cbnz	r0, 800ad86 <__multadd+0x5a>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	4b0c      	ldr	r3, [pc, #48]	; (800adb0 <__multadd+0x84>)
 800ad7e:	480d      	ldr	r0, [pc, #52]	; (800adb4 <__multadd+0x88>)
 800ad80:	21b5      	movs	r1, #181	; 0xb5
 800ad82:	f001 fcf5 	bl	800c770 <__assert_func>
 800ad86:	6922      	ldr	r2, [r4, #16]
 800ad88:	3202      	adds	r2, #2
 800ad8a:	f104 010c 	add.w	r1, r4, #12
 800ad8e:	0092      	lsls	r2, r2, #2
 800ad90:	300c      	adds	r0, #12
 800ad92:	f7ff ff5b 	bl	800ac4c <memcpy>
 800ad96:	4621      	mov	r1, r4
 800ad98:	4638      	mov	r0, r7
 800ad9a:	f7ff ffa5 	bl	800ace8 <_Bfree>
 800ad9e:	4644      	mov	r4, r8
 800ada0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ada4:	3501      	adds	r5, #1
 800ada6:	615e      	str	r6, [r3, #20]
 800ada8:	6125      	str	r5, [r4, #16]
 800adaa:	4620      	mov	r0, r4
 800adac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb0:	0800efcd 	.word	0x0800efcd
 800adb4:	0800f0bc 	.word	0x0800f0bc

0800adb8 <__s2b>:
 800adb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adbc:	460c      	mov	r4, r1
 800adbe:	4615      	mov	r5, r2
 800adc0:	461f      	mov	r7, r3
 800adc2:	2209      	movs	r2, #9
 800adc4:	3308      	adds	r3, #8
 800adc6:	4606      	mov	r6, r0
 800adc8:	fb93 f3f2 	sdiv	r3, r3, r2
 800adcc:	2100      	movs	r1, #0
 800adce:	2201      	movs	r2, #1
 800add0:	429a      	cmp	r2, r3
 800add2:	db09      	blt.n	800ade8 <__s2b+0x30>
 800add4:	4630      	mov	r0, r6
 800add6:	f7ff ff47 	bl	800ac68 <_Balloc>
 800adda:	b940      	cbnz	r0, 800adee <__s2b+0x36>
 800addc:	4602      	mov	r2, r0
 800adde:	4b19      	ldr	r3, [pc, #100]	; (800ae44 <__s2b+0x8c>)
 800ade0:	4819      	ldr	r0, [pc, #100]	; (800ae48 <__s2b+0x90>)
 800ade2:	21ce      	movs	r1, #206	; 0xce
 800ade4:	f001 fcc4 	bl	800c770 <__assert_func>
 800ade8:	0052      	lsls	r2, r2, #1
 800adea:	3101      	adds	r1, #1
 800adec:	e7f0      	b.n	800add0 <__s2b+0x18>
 800adee:	9b08      	ldr	r3, [sp, #32]
 800adf0:	6143      	str	r3, [r0, #20]
 800adf2:	2d09      	cmp	r5, #9
 800adf4:	f04f 0301 	mov.w	r3, #1
 800adf8:	6103      	str	r3, [r0, #16]
 800adfa:	dd16      	ble.n	800ae2a <__s2b+0x72>
 800adfc:	f104 0909 	add.w	r9, r4, #9
 800ae00:	46c8      	mov	r8, r9
 800ae02:	442c      	add	r4, r5
 800ae04:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ae08:	4601      	mov	r1, r0
 800ae0a:	3b30      	subs	r3, #48	; 0x30
 800ae0c:	220a      	movs	r2, #10
 800ae0e:	4630      	mov	r0, r6
 800ae10:	f7ff ff8c 	bl	800ad2c <__multadd>
 800ae14:	45a0      	cmp	r8, r4
 800ae16:	d1f5      	bne.n	800ae04 <__s2b+0x4c>
 800ae18:	f1a5 0408 	sub.w	r4, r5, #8
 800ae1c:	444c      	add	r4, r9
 800ae1e:	1b2d      	subs	r5, r5, r4
 800ae20:	1963      	adds	r3, r4, r5
 800ae22:	42bb      	cmp	r3, r7
 800ae24:	db04      	blt.n	800ae30 <__s2b+0x78>
 800ae26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae2a:	340a      	adds	r4, #10
 800ae2c:	2509      	movs	r5, #9
 800ae2e:	e7f6      	b.n	800ae1e <__s2b+0x66>
 800ae30:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae34:	4601      	mov	r1, r0
 800ae36:	3b30      	subs	r3, #48	; 0x30
 800ae38:	220a      	movs	r2, #10
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	f7ff ff76 	bl	800ad2c <__multadd>
 800ae40:	e7ee      	b.n	800ae20 <__s2b+0x68>
 800ae42:	bf00      	nop
 800ae44:	0800efcd 	.word	0x0800efcd
 800ae48:	0800f0bc 	.word	0x0800f0bc

0800ae4c <__hi0bits>:
 800ae4c:	0c03      	lsrs	r3, r0, #16
 800ae4e:	041b      	lsls	r3, r3, #16
 800ae50:	b9d3      	cbnz	r3, 800ae88 <__hi0bits+0x3c>
 800ae52:	0400      	lsls	r0, r0, #16
 800ae54:	2310      	movs	r3, #16
 800ae56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae5a:	bf04      	itt	eq
 800ae5c:	0200      	lsleq	r0, r0, #8
 800ae5e:	3308      	addeq	r3, #8
 800ae60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ae64:	bf04      	itt	eq
 800ae66:	0100      	lsleq	r0, r0, #4
 800ae68:	3304      	addeq	r3, #4
 800ae6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ae6e:	bf04      	itt	eq
 800ae70:	0080      	lsleq	r0, r0, #2
 800ae72:	3302      	addeq	r3, #2
 800ae74:	2800      	cmp	r0, #0
 800ae76:	db05      	blt.n	800ae84 <__hi0bits+0x38>
 800ae78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ae7c:	f103 0301 	add.w	r3, r3, #1
 800ae80:	bf08      	it	eq
 800ae82:	2320      	moveq	r3, #32
 800ae84:	4618      	mov	r0, r3
 800ae86:	4770      	bx	lr
 800ae88:	2300      	movs	r3, #0
 800ae8a:	e7e4      	b.n	800ae56 <__hi0bits+0xa>

0800ae8c <__lo0bits>:
 800ae8c:	6803      	ldr	r3, [r0, #0]
 800ae8e:	f013 0207 	ands.w	r2, r3, #7
 800ae92:	4601      	mov	r1, r0
 800ae94:	d00b      	beq.n	800aeae <__lo0bits+0x22>
 800ae96:	07da      	lsls	r2, r3, #31
 800ae98:	d423      	bmi.n	800aee2 <__lo0bits+0x56>
 800ae9a:	0798      	lsls	r0, r3, #30
 800ae9c:	bf49      	itett	mi
 800ae9e:	085b      	lsrmi	r3, r3, #1
 800aea0:	089b      	lsrpl	r3, r3, #2
 800aea2:	2001      	movmi	r0, #1
 800aea4:	600b      	strmi	r3, [r1, #0]
 800aea6:	bf5c      	itt	pl
 800aea8:	600b      	strpl	r3, [r1, #0]
 800aeaa:	2002      	movpl	r0, #2
 800aeac:	4770      	bx	lr
 800aeae:	b298      	uxth	r0, r3
 800aeb0:	b9a8      	cbnz	r0, 800aede <__lo0bits+0x52>
 800aeb2:	0c1b      	lsrs	r3, r3, #16
 800aeb4:	2010      	movs	r0, #16
 800aeb6:	b2da      	uxtb	r2, r3
 800aeb8:	b90a      	cbnz	r2, 800aebe <__lo0bits+0x32>
 800aeba:	3008      	adds	r0, #8
 800aebc:	0a1b      	lsrs	r3, r3, #8
 800aebe:	071a      	lsls	r2, r3, #28
 800aec0:	bf04      	itt	eq
 800aec2:	091b      	lsreq	r3, r3, #4
 800aec4:	3004      	addeq	r0, #4
 800aec6:	079a      	lsls	r2, r3, #30
 800aec8:	bf04      	itt	eq
 800aeca:	089b      	lsreq	r3, r3, #2
 800aecc:	3002      	addeq	r0, #2
 800aece:	07da      	lsls	r2, r3, #31
 800aed0:	d403      	bmi.n	800aeda <__lo0bits+0x4e>
 800aed2:	085b      	lsrs	r3, r3, #1
 800aed4:	f100 0001 	add.w	r0, r0, #1
 800aed8:	d005      	beq.n	800aee6 <__lo0bits+0x5a>
 800aeda:	600b      	str	r3, [r1, #0]
 800aedc:	4770      	bx	lr
 800aede:	4610      	mov	r0, r2
 800aee0:	e7e9      	b.n	800aeb6 <__lo0bits+0x2a>
 800aee2:	2000      	movs	r0, #0
 800aee4:	4770      	bx	lr
 800aee6:	2020      	movs	r0, #32
 800aee8:	4770      	bx	lr
	...

0800aeec <__i2b>:
 800aeec:	b510      	push	{r4, lr}
 800aeee:	460c      	mov	r4, r1
 800aef0:	2101      	movs	r1, #1
 800aef2:	f7ff feb9 	bl	800ac68 <_Balloc>
 800aef6:	4602      	mov	r2, r0
 800aef8:	b928      	cbnz	r0, 800af06 <__i2b+0x1a>
 800aefa:	4b05      	ldr	r3, [pc, #20]	; (800af10 <__i2b+0x24>)
 800aefc:	4805      	ldr	r0, [pc, #20]	; (800af14 <__i2b+0x28>)
 800aefe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800af02:	f001 fc35 	bl	800c770 <__assert_func>
 800af06:	2301      	movs	r3, #1
 800af08:	6144      	str	r4, [r0, #20]
 800af0a:	6103      	str	r3, [r0, #16]
 800af0c:	bd10      	pop	{r4, pc}
 800af0e:	bf00      	nop
 800af10:	0800efcd 	.word	0x0800efcd
 800af14:	0800f0bc 	.word	0x0800f0bc

0800af18 <__multiply>:
 800af18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1c:	4691      	mov	r9, r2
 800af1e:	690a      	ldr	r2, [r1, #16]
 800af20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af24:	429a      	cmp	r2, r3
 800af26:	bfb8      	it	lt
 800af28:	460b      	movlt	r3, r1
 800af2a:	460c      	mov	r4, r1
 800af2c:	bfbc      	itt	lt
 800af2e:	464c      	movlt	r4, r9
 800af30:	4699      	movlt	r9, r3
 800af32:	6927      	ldr	r7, [r4, #16]
 800af34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af38:	68a3      	ldr	r3, [r4, #8]
 800af3a:	6861      	ldr	r1, [r4, #4]
 800af3c:	eb07 060a 	add.w	r6, r7, sl
 800af40:	42b3      	cmp	r3, r6
 800af42:	b085      	sub	sp, #20
 800af44:	bfb8      	it	lt
 800af46:	3101      	addlt	r1, #1
 800af48:	f7ff fe8e 	bl	800ac68 <_Balloc>
 800af4c:	b930      	cbnz	r0, 800af5c <__multiply+0x44>
 800af4e:	4602      	mov	r2, r0
 800af50:	4b44      	ldr	r3, [pc, #272]	; (800b064 <__multiply+0x14c>)
 800af52:	4845      	ldr	r0, [pc, #276]	; (800b068 <__multiply+0x150>)
 800af54:	f240 115d 	movw	r1, #349	; 0x15d
 800af58:	f001 fc0a 	bl	800c770 <__assert_func>
 800af5c:	f100 0514 	add.w	r5, r0, #20
 800af60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af64:	462b      	mov	r3, r5
 800af66:	2200      	movs	r2, #0
 800af68:	4543      	cmp	r3, r8
 800af6a:	d321      	bcc.n	800afb0 <__multiply+0x98>
 800af6c:	f104 0314 	add.w	r3, r4, #20
 800af70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800af74:	f109 0314 	add.w	r3, r9, #20
 800af78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800af7c:	9202      	str	r2, [sp, #8]
 800af7e:	1b3a      	subs	r2, r7, r4
 800af80:	3a15      	subs	r2, #21
 800af82:	f022 0203 	bic.w	r2, r2, #3
 800af86:	3204      	adds	r2, #4
 800af88:	f104 0115 	add.w	r1, r4, #21
 800af8c:	428f      	cmp	r7, r1
 800af8e:	bf38      	it	cc
 800af90:	2204      	movcc	r2, #4
 800af92:	9201      	str	r2, [sp, #4]
 800af94:	9a02      	ldr	r2, [sp, #8]
 800af96:	9303      	str	r3, [sp, #12]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d80c      	bhi.n	800afb6 <__multiply+0x9e>
 800af9c:	2e00      	cmp	r6, #0
 800af9e:	dd03      	ble.n	800afa8 <__multiply+0x90>
 800afa0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d05a      	beq.n	800b05e <__multiply+0x146>
 800afa8:	6106      	str	r6, [r0, #16]
 800afaa:	b005      	add	sp, #20
 800afac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb0:	f843 2b04 	str.w	r2, [r3], #4
 800afb4:	e7d8      	b.n	800af68 <__multiply+0x50>
 800afb6:	f8b3 a000 	ldrh.w	sl, [r3]
 800afba:	f1ba 0f00 	cmp.w	sl, #0
 800afbe:	d024      	beq.n	800b00a <__multiply+0xf2>
 800afc0:	f104 0e14 	add.w	lr, r4, #20
 800afc4:	46a9      	mov	r9, r5
 800afc6:	f04f 0c00 	mov.w	ip, #0
 800afca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800afce:	f8d9 1000 	ldr.w	r1, [r9]
 800afd2:	fa1f fb82 	uxth.w	fp, r2
 800afd6:	b289      	uxth	r1, r1
 800afd8:	fb0a 110b 	mla	r1, sl, fp, r1
 800afdc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800afe0:	f8d9 2000 	ldr.w	r2, [r9]
 800afe4:	4461      	add	r1, ip
 800afe6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800afea:	fb0a c20b 	mla	r2, sl, fp, ip
 800afee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aff2:	b289      	uxth	r1, r1
 800aff4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aff8:	4577      	cmp	r7, lr
 800affa:	f849 1b04 	str.w	r1, [r9], #4
 800affe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b002:	d8e2      	bhi.n	800afca <__multiply+0xb2>
 800b004:	9a01      	ldr	r2, [sp, #4]
 800b006:	f845 c002 	str.w	ip, [r5, r2]
 800b00a:	9a03      	ldr	r2, [sp, #12]
 800b00c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b010:	3304      	adds	r3, #4
 800b012:	f1b9 0f00 	cmp.w	r9, #0
 800b016:	d020      	beq.n	800b05a <__multiply+0x142>
 800b018:	6829      	ldr	r1, [r5, #0]
 800b01a:	f104 0c14 	add.w	ip, r4, #20
 800b01e:	46ae      	mov	lr, r5
 800b020:	f04f 0a00 	mov.w	sl, #0
 800b024:	f8bc b000 	ldrh.w	fp, [ip]
 800b028:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b02c:	fb09 220b 	mla	r2, r9, fp, r2
 800b030:	4492      	add	sl, r2
 800b032:	b289      	uxth	r1, r1
 800b034:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b038:	f84e 1b04 	str.w	r1, [lr], #4
 800b03c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b040:	f8be 1000 	ldrh.w	r1, [lr]
 800b044:	0c12      	lsrs	r2, r2, #16
 800b046:	fb09 1102 	mla	r1, r9, r2, r1
 800b04a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b04e:	4567      	cmp	r7, ip
 800b050:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b054:	d8e6      	bhi.n	800b024 <__multiply+0x10c>
 800b056:	9a01      	ldr	r2, [sp, #4]
 800b058:	50a9      	str	r1, [r5, r2]
 800b05a:	3504      	adds	r5, #4
 800b05c:	e79a      	b.n	800af94 <__multiply+0x7c>
 800b05e:	3e01      	subs	r6, #1
 800b060:	e79c      	b.n	800af9c <__multiply+0x84>
 800b062:	bf00      	nop
 800b064:	0800efcd 	.word	0x0800efcd
 800b068:	0800f0bc 	.word	0x0800f0bc

0800b06c <__pow5mult>:
 800b06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b070:	4615      	mov	r5, r2
 800b072:	f012 0203 	ands.w	r2, r2, #3
 800b076:	4606      	mov	r6, r0
 800b078:	460f      	mov	r7, r1
 800b07a:	d007      	beq.n	800b08c <__pow5mult+0x20>
 800b07c:	4c25      	ldr	r4, [pc, #148]	; (800b114 <__pow5mult+0xa8>)
 800b07e:	3a01      	subs	r2, #1
 800b080:	2300      	movs	r3, #0
 800b082:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b086:	f7ff fe51 	bl	800ad2c <__multadd>
 800b08a:	4607      	mov	r7, r0
 800b08c:	10ad      	asrs	r5, r5, #2
 800b08e:	d03d      	beq.n	800b10c <__pow5mult+0xa0>
 800b090:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b092:	b97c      	cbnz	r4, 800b0b4 <__pow5mult+0x48>
 800b094:	2010      	movs	r0, #16
 800b096:	f7ff fdbf 	bl	800ac18 <malloc>
 800b09a:	4602      	mov	r2, r0
 800b09c:	6270      	str	r0, [r6, #36]	; 0x24
 800b09e:	b928      	cbnz	r0, 800b0ac <__pow5mult+0x40>
 800b0a0:	4b1d      	ldr	r3, [pc, #116]	; (800b118 <__pow5mult+0xac>)
 800b0a2:	481e      	ldr	r0, [pc, #120]	; (800b11c <__pow5mult+0xb0>)
 800b0a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b0a8:	f001 fb62 	bl	800c770 <__assert_func>
 800b0ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0b0:	6004      	str	r4, [r0, #0]
 800b0b2:	60c4      	str	r4, [r0, #12]
 800b0b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b0b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0bc:	b94c      	cbnz	r4, 800b0d2 <__pow5mult+0x66>
 800b0be:	f240 2171 	movw	r1, #625	; 0x271
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	f7ff ff12 	bl	800aeec <__i2b>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	6003      	str	r3, [r0, #0]
 800b0d2:	f04f 0900 	mov.w	r9, #0
 800b0d6:	07eb      	lsls	r3, r5, #31
 800b0d8:	d50a      	bpl.n	800b0f0 <__pow5mult+0x84>
 800b0da:	4639      	mov	r1, r7
 800b0dc:	4622      	mov	r2, r4
 800b0de:	4630      	mov	r0, r6
 800b0e0:	f7ff ff1a 	bl	800af18 <__multiply>
 800b0e4:	4639      	mov	r1, r7
 800b0e6:	4680      	mov	r8, r0
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	f7ff fdfd 	bl	800ace8 <_Bfree>
 800b0ee:	4647      	mov	r7, r8
 800b0f0:	106d      	asrs	r5, r5, #1
 800b0f2:	d00b      	beq.n	800b10c <__pow5mult+0xa0>
 800b0f4:	6820      	ldr	r0, [r4, #0]
 800b0f6:	b938      	cbnz	r0, 800b108 <__pow5mult+0x9c>
 800b0f8:	4622      	mov	r2, r4
 800b0fa:	4621      	mov	r1, r4
 800b0fc:	4630      	mov	r0, r6
 800b0fe:	f7ff ff0b 	bl	800af18 <__multiply>
 800b102:	6020      	str	r0, [r4, #0]
 800b104:	f8c0 9000 	str.w	r9, [r0]
 800b108:	4604      	mov	r4, r0
 800b10a:	e7e4      	b.n	800b0d6 <__pow5mult+0x6a>
 800b10c:	4638      	mov	r0, r7
 800b10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b112:	bf00      	nop
 800b114:	0800f208 	.word	0x0800f208
 800b118:	0800ef5b 	.word	0x0800ef5b
 800b11c:	0800f0bc 	.word	0x0800f0bc

0800b120 <__lshift>:
 800b120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b124:	460c      	mov	r4, r1
 800b126:	6849      	ldr	r1, [r1, #4]
 800b128:	6923      	ldr	r3, [r4, #16]
 800b12a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b12e:	68a3      	ldr	r3, [r4, #8]
 800b130:	4607      	mov	r7, r0
 800b132:	4691      	mov	r9, r2
 800b134:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b138:	f108 0601 	add.w	r6, r8, #1
 800b13c:	42b3      	cmp	r3, r6
 800b13e:	db0b      	blt.n	800b158 <__lshift+0x38>
 800b140:	4638      	mov	r0, r7
 800b142:	f7ff fd91 	bl	800ac68 <_Balloc>
 800b146:	4605      	mov	r5, r0
 800b148:	b948      	cbnz	r0, 800b15e <__lshift+0x3e>
 800b14a:	4602      	mov	r2, r0
 800b14c:	4b2a      	ldr	r3, [pc, #168]	; (800b1f8 <__lshift+0xd8>)
 800b14e:	482b      	ldr	r0, [pc, #172]	; (800b1fc <__lshift+0xdc>)
 800b150:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b154:	f001 fb0c 	bl	800c770 <__assert_func>
 800b158:	3101      	adds	r1, #1
 800b15a:	005b      	lsls	r3, r3, #1
 800b15c:	e7ee      	b.n	800b13c <__lshift+0x1c>
 800b15e:	2300      	movs	r3, #0
 800b160:	f100 0114 	add.w	r1, r0, #20
 800b164:	f100 0210 	add.w	r2, r0, #16
 800b168:	4618      	mov	r0, r3
 800b16a:	4553      	cmp	r3, sl
 800b16c:	db37      	blt.n	800b1de <__lshift+0xbe>
 800b16e:	6920      	ldr	r0, [r4, #16]
 800b170:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b174:	f104 0314 	add.w	r3, r4, #20
 800b178:	f019 091f 	ands.w	r9, r9, #31
 800b17c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b180:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b184:	d02f      	beq.n	800b1e6 <__lshift+0xc6>
 800b186:	f1c9 0e20 	rsb	lr, r9, #32
 800b18a:	468a      	mov	sl, r1
 800b18c:	f04f 0c00 	mov.w	ip, #0
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	fa02 f209 	lsl.w	r2, r2, r9
 800b196:	ea42 020c 	orr.w	r2, r2, ip
 800b19a:	f84a 2b04 	str.w	r2, [sl], #4
 800b19e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1a2:	4298      	cmp	r0, r3
 800b1a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b1a8:	d8f2      	bhi.n	800b190 <__lshift+0x70>
 800b1aa:	1b03      	subs	r3, r0, r4
 800b1ac:	3b15      	subs	r3, #21
 800b1ae:	f023 0303 	bic.w	r3, r3, #3
 800b1b2:	3304      	adds	r3, #4
 800b1b4:	f104 0215 	add.w	r2, r4, #21
 800b1b8:	4290      	cmp	r0, r2
 800b1ba:	bf38      	it	cc
 800b1bc:	2304      	movcc	r3, #4
 800b1be:	f841 c003 	str.w	ip, [r1, r3]
 800b1c2:	f1bc 0f00 	cmp.w	ip, #0
 800b1c6:	d001      	beq.n	800b1cc <__lshift+0xac>
 800b1c8:	f108 0602 	add.w	r6, r8, #2
 800b1cc:	3e01      	subs	r6, #1
 800b1ce:	4638      	mov	r0, r7
 800b1d0:	612e      	str	r6, [r5, #16]
 800b1d2:	4621      	mov	r1, r4
 800b1d4:	f7ff fd88 	bl	800ace8 <_Bfree>
 800b1d8:	4628      	mov	r0, r5
 800b1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1de:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	e7c1      	b.n	800b16a <__lshift+0x4a>
 800b1e6:	3904      	subs	r1, #4
 800b1e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1f0:	4298      	cmp	r0, r3
 800b1f2:	d8f9      	bhi.n	800b1e8 <__lshift+0xc8>
 800b1f4:	e7ea      	b.n	800b1cc <__lshift+0xac>
 800b1f6:	bf00      	nop
 800b1f8:	0800efcd 	.word	0x0800efcd
 800b1fc:	0800f0bc 	.word	0x0800f0bc

0800b200 <__mcmp>:
 800b200:	b530      	push	{r4, r5, lr}
 800b202:	6902      	ldr	r2, [r0, #16]
 800b204:	690c      	ldr	r4, [r1, #16]
 800b206:	1b12      	subs	r2, r2, r4
 800b208:	d10e      	bne.n	800b228 <__mcmp+0x28>
 800b20a:	f100 0314 	add.w	r3, r0, #20
 800b20e:	3114      	adds	r1, #20
 800b210:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b214:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b218:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b21c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b220:	42a5      	cmp	r5, r4
 800b222:	d003      	beq.n	800b22c <__mcmp+0x2c>
 800b224:	d305      	bcc.n	800b232 <__mcmp+0x32>
 800b226:	2201      	movs	r2, #1
 800b228:	4610      	mov	r0, r2
 800b22a:	bd30      	pop	{r4, r5, pc}
 800b22c:	4283      	cmp	r3, r0
 800b22e:	d3f3      	bcc.n	800b218 <__mcmp+0x18>
 800b230:	e7fa      	b.n	800b228 <__mcmp+0x28>
 800b232:	f04f 32ff 	mov.w	r2, #4294967295
 800b236:	e7f7      	b.n	800b228 <__mcmp+0x28>

0800b238 <__mdiff>:
 800b238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23c:	460c      	mov	r4, r1
 800b23e:	4606      	mov	r6, r0
 800b240:	4611      	mov	r1, r2
 800b242:	4620      	mov	r0, r4
 800b244:	4690      	mov	r8, r2
 800b246:	f7ff ffdb 	bl	800b200 <__mcmp>
 800b24a:	1e05      	subs	r5, r0, #0
 800b24c:	d110      	bne.n	800b270 <__mdiff+0x38>
 800b24e:	4629      	mov	r1, r5
 800b250:	4630      	mov	r0, r6
 800b252:	f7ff fd09 	bl	800ac68 <_Balloc>
 800b256:	b930      	cbnz	r0, 800b266 <__mdiff+0x2e>
 800b258:	4b3a      	ldr	r3, [pc, #232]	; (800b344 <__mdiff+0x10c>)
 800b25a:	4602      	mov	r2, r0
 800b25c:	f240 2132 	movw	r1, #562	; 0x232
 800b260:	4839      	ldr	r0, [pc, #228]	; (800b348 <__mdiff+0x110>)
 800b262:	f001 fa85 	bl	800c770 <__assert_func>
 800b266:	2301      	movs	r3, #1
 800b268:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b26c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b270:	bfa4      	itt	ge
 800b272:	4643      	movge	r3, r8
 800b274:	46a0      	movge	r8, r4
 800b276:	4630      	mov	r0, r6
 800b278:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b27c:	bfa6      	itte	ge
 800b27e:	461c      	movge	r4, r3
 800b280:	2500      	movge	r5, #0
 800b282:	2501      	movlt	r5, #1
 800b284:	f7ff fcf0 	bl	800ac68 <_Balloc>
 800b288:	b920      	cbnz	r0, 800b294 <__mdiff+0x5c>
 800b28a:	4b2e      	ldr	r3, [pc, #184]	; (800b344 <__mdiff+0x10c>)
 800b28c:	4602      	mov	r2, r0
 800b28e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b292:	e7e5      	b.n	800b260 <__mdiff+0x28>
 800b294:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b298:	6926      	ldr	r6, [r4, #16]
 800b29a:	60c5      	str	r5, [r0, #12]
 800b29c:	f104 0914 	add.w	r9, r4, #20
 800b2a0:	f108 0514 	add.w	r5, r8, #20
 800b2a4:	f100 0e14 	add.w	lr, r0, #20
 800b2a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b2ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b2b0:	f108 0210 	add.w	r2, r8, #16
 800b2b4:	46f2      	mov	sl, lr
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b2bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b2c0:	fa1f f883 	uxth.w	r8, r3
 800b2c4:	fa11 f18b 	uxtah	r1, r1, fp
 800b2c8:	0c1b      	lsrs	r3, r3, #16
 800b2ca:	eba1 0808 	sub.w	r8, r1, r8
 800b2ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b2d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b2d6:	fa1f f888 	uxth.w	r8, r8
 800b2da:	1419      	asrs	r1, r3, #16
 800b2dc:	454e      	cmp	r6, r9
 800b2de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b2e2:	f84a 3b04 	str.w	r3, [sl], #4
 800b2e6:	d8e7      	bhi.n	800b2b8 <__mdiff+0x80>
 800b2e8:	1b33      	subs	r3, r6, r4
 800b2ea:	3b15      	subs	r3, #21
 800b2ec:	f023 0303 	bic.w	r3, r3, #3
 800b2f0:	3304      	adds	r3, #4
 800b2f2:	3415      	adds	r4, #21
 800b2f4:	42a6      	cmp	r6, r4
 800b2f6:	bf38      	it	cc
 800b2f8:	2304      	movcc	r3, #4
 800b2fa:	441d      	add	r5, r3
 800b2fc:	4473      	add	r3, lr
 800b2fe:	469e      	mov	lr, r3
 800b300:	462e      	mov	r6, r5
 800b302:	4566      	cmp	r6, ip
 800b304:	d30e      	bcc.n	800b324 <__mdiff+0xec>
 800b306:	f10c 0203 	add.w	r2, ip, #3
 800b30a:	1b52      	subs	r2, r2, r5
 800b30c:	f022 0203 	bic.w	r2, r2, #3
 800b310:	3d03      	subs	r5, #3
 800b312:	45ac      	cmp	ip, r5
 800b314:	bf38      	it	cc
 800b316:	2200      	movcc	r2, #0
 800b318:	441a      	add	r2, r3
 800b31a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b31e:	b17b      	cbz	r3, 800b340 <__mdiff+0x108>
 800b320:	6107      	str	r7, [r0, #16]
 800b322:	e7a3      	b.n	800b26c <__mdiff+0x34>
 800b324:	f856 8b04 	ldr.w	r8, [r6], #4
 800b328:	fa11 f288 	uxtah	r2, r1, r8
 800b32c:	1414      	asrs	r4, r2, #16
 800b32e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b332:	b292      	uxth	r2, r2
 800b334:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b338:	f84e 2b04 	str.w	r2, [lr], #4
 800b33c:	1421      	asrs	r1, r4, #16
 800b33e:	e7e0      	b.n	800b302 <__mdiff+0xca>
 800b340:	3f01      	subs	r7, #1
 800b342:	e7ea      	b.n	800b31a <__mdiff+0xe2>
 800b344:	0800efcd 	.word	0x0800efcd
 800b348:	0800f0bc 	.word	0x0800f0bc

0800b34c <__ulp>:
 800b34c:	b082      	sub	sp, #8
 800b34e:	ed8d 0b00 	vstr	d0, [sp]
 800b352:	9b01      	ldr	r3, [sp, #4]
 800b354:	4912      	ldr	r1, [pc, #72]	; (800b3a0 <__ulp+0x54>)
 800b356:	4019      	ands	r1, r3
 800b358:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b35c:	2900      	cmp	r1, #0
 800b35e:	dd05      	ble.n	800b36c <__ulp+0x20>
 800b360:	2200      	movs	r2, #0
 800b362:	460b      	mov	r3, r1
 800b364:	ec43 2b10 	vmov	d0, r2, r3
 800b368:	b002      	add	sp, #8
 800b36a:	4770      	bx	lr
 800b36c:	4249      	negs	r1, r1
 800b36e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b372:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b376:	f04f 0200 	mov.w	r2, #0
 800b37a:	f04f 0300 	mov.w	r3, #0
 800b37e:	da04      	bge.n	800b38a <__ulp+0x3e>
 800b380:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b384:	fa41 f300 	asr.w	r3, r1, r0
 800b388:	e7ec      	b.n	800b364 <__ulp+0x18>
 800b38a:	f1a0 0114 	sub.w	r1, r0, #20
 800b38e:	291e      	cmp	r1, #30
 800b390:	bfda      	itte	le
 800b392:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b396:	fa20 f101 	lsrle.w	r1, r0, r1
 800b39a:	2101      	movgt	r1, #1
 800b39c:	460a      	mov	r2, r1
 800b39e:	e7e1      	b.n	800b364 <__ulp+0x18>
 800b3a0:	7ff00000 	.word	0x7ff00000

0800b3a4 <__b2d>:
 800b3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a6:	6905      	ldr	r5, [r0, #16]
 800b3a8:	f100 0714 	add.w	r7, r0, #20
 800b3ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b3b0:	1f2e      	subs	r6, r5, #4
 800b3b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f7ff fd48 	bl	800ae4c <__hi0bits>
 800b3bc:	f1c0 0320 	rsb	r3, r0, #32
 800b3c0:	280a      	cmp	r0, #10
 800b3c2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b440 <__b2d+0x9c>
 800b3c6:	600b      	str	r3, [r1, #0]
 800b3c8:	dc14      	bgt.n	800b3f4 <__b2d+0x50>
 800b3ca:	f1c0 0e0b 	rsb	lr, r0, #11
 800b3ce:	fa24 f10e 	lsr.w	r1, r4, lr
 800b3d2:	42b7      	cmp	r7, r6
 800b3d4:	ea41 030c 	orr.w	r3, r1, ip
 800b3d8:	bf34      	ite	cc
 800b3da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b3de:	2100      	movcs	r1, #0
 800b3e0:	3015      	adds	r0, #21
 800b3e2:	fa04 f000 	lsl.w	r0, r4, r0
 800b3e6:	fa21 f10e 	lsr.w	r1, r1, lr
 800b3ea:	ea40 0201 	orr.w	r2, r0, r1
 800b3ee:	ec43 2b10 	vmov	d0, r2, r3
 800b3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3f4:	42b7      	cmp	r7, r6
 800b3f6:	bf3a      	itte	cc
 800b3f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b3fc:	f1a5 0608 	subcc.w	r6, r5, #8
 800b400:	2100      	movcs	r1, #0
 800b402:	380b      	subs	r0, #11
 800b404:	d017      	beq.n	800b436 <__b2d+0x92>
 800b406:	f1c0 0c20 	rsb	ip, r0, #32
 800b40a:	fa04 f500 	lsl.w	r5, r4, r0
 800b40e:	42be      	cmp	r6, r7
 800b410:	fa21 f40c 	lsr.w	r4, r1, ip
 800b414:	ea45 0504 	orr.w	r5, r5, r4
 800b418:	bf8c      	ite	hi
 800b41a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b41e:	2400      	movls	r4, #0
 800b420:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b424:	fa01 f000 	lsl.w	r0, r1, r0
 800b428:	fa24 f40c 	lsr.w	r4, r4, ip
 800b42c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b430:	ea40 0204 	orr.w	r2, r0, r4
 800b434:	e7db      	b.n	800b3ee <__b2d+0x4a>
 800b436:	ea44 030c 	orr.w	r3, r4, ip
 800b43a:	460a      	mov	r2, r1
 800b43c:	e7d7      	b.n	800b3ee <__b2d+0x4a>
 800b43e:	bf00      	nop
 800b440:	3ff00000 	.word	0x3ff00000

0800b444 <__d2b>:
 800b444:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b448:	4689      	mov	r9, r1
 800b44a:	2101      	movs	r1, #1
 800b44c:	ec57 6b10 	vmov	r6, r7, d0
 800b450:	4690      	mov	r8, r2
 800b452:	f7ff fc09 	bl	800ac68 <_Balloc>
 800b456:	4604      	mov	r4, r0
 800b458:	b930      	cbnz	r0, 800b468 <__d2b+0x24>
 800b45a:	4602      	mov	r2, r0
 800b45c:	4b25      	ldr	r3, [pc, #148]	; (800b4f4 <__d2b+0xb0>)
 800b45e:	4826      	ldr	r0, [pc, #152]	; (800b4f8 <__d2b+0xb4>)
 800b460:	f240 310a 	movw	r1, #778	; 0x30a
 800b464:	f001 f984 	bl	800c770 <__assert_func>
 800b468:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b46c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b470:	bb35      	cbnz	r5, 800b4c0 <__d2b+0x7c>
 800b472:	2e00      	cmp	r6, #0
 800b474:	9301      	str	r3, [sp, #4]
 800b476:	d028      	beq.n	800b4ca <__d2b+0x86>
 800b478:	4668      	mov	r0, sp
 800b47a:	9600      	str	r6, [sp, #0]
 800b47c:	f7ff fd06 	bl	800ae8c <__lo0bits>
 800b480:	9900      	ldr	r1, [sp, #0]
 800b482:	b300      	cbz	r0, 800b4c6 <__d2b+0x82>
 800b484:	9a01      	ldr	r2, [sp, #4]
 800b486:	f1c0 0320 	rsb	r3, r0, #32
 800b48a:	fa02 f303 	lsl.w	r3, r2, r3
 800b48e:	430b      	orrs	r3, r1
 800b490:	40c2      	lsrs	r2, r0
 800b492:	6163      	str	r3, [r4, #20]
 800b494:	9201      	str	r2, [sp, #4]
 800b496:	9b01      	ldr	r3, [sp, #4]
 800b498:	61a3      	str	r3, [r4, #24]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	bf14      	ite	ne
 800b49e:	2202      	movne	r2, #2
 800b4a0:	2201      	moveq	r2, #1
 800b4a2:	6122      	str	r2, [r4, #16]
 800b4a4:	b1d5      	cbz	r5, 800b4dc <__d2b+0x98>
 800b4a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4aa:	4405      	add	r5, r0
 800b4ac:	f8c9 5000 	str.w	r5, [r9]
 800b4b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4b4:	f8c8 0000 	str.w	r0, [r8]
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	b003      	add	sp, #12
 800b4bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4c4:	e7d5      	b.n	800b472 <__d2b+0x2e>
 800b4c6:	6161      	str	r1, [r4, #20]
 800b4c8:	e7e5      	b.n	800b496 <__d2b+0x52>
 800b4ca:	a801      	add	r0, sp, #4
 800b4cc:	f7ff fcde 	bl	800ae8c <__lo0bits>
 800b4d0:	9b01      	ldr	r3, [sp, #4]
 800b4d2:	6163      	str	r3, [r4, #20]
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	6122      	str	r2, [r4, #16]
 800b4d8:	3020      	adds	r0, #32
 800b4da:	e7e3      	b.n	800b4a4 <__d2b+0x60>
 800b4dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b4e4:	f8c9 0000 	str.w	r0, [r9]
 800b4e8:	6918      	ldr	r0, [r3, #16]
 800b4ea:	f7ff fcaf 	bl	800ae4c <__hi0bits>
 800b4ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4f2:	e7df      	b.n	800b4b4 <__d2b+0x70>
 800b4f4:	0800efcd 	.word	0x0800efcd
 800b4f8:	0800f0bc 	.word	0x0800f0bc

0800b4fc <__ratio>:
 800b4fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b500:	4688      	mov	r8, r1
 800b502:	4669      	mov	r1, sp
 800b504:	4681      	mov	r9, r0
 800b506:	f7ff ff4d 	bl	800b3a4 <__b2d>
 800b50a:	a901      	add	r1, sp, #4
 800b50c:	4640      	mov	r0, r8
 800b50e:	ec55 4b10 	vmov	r4, r5, d0
 800b512:	f7ff ff47 	bl	800b3a4 <__b2d>
 800b516:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b51a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b51e:	eba3 0c02 	sub.w	ip, r3, r2
 800b522:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b526:	1a9b      	subs	r3, r3, r2
 800b528:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b52c:	ec51 0b10 	vmov	r0, r1, d0
 800b530:	2b00      	cmp	r3, #0
 800b532:	bfd6      	itet	le
 800b534:	460a      	movle	r2, r1
 800b536:	462a      	movgt	r2, r5
 800b538:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b53c:	468b      	mov	fp, r1
 800b53e:	462f      	mov	r7, r5
 800b540:	bfd4      	ite	le
 800b542:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b546:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b54a:	4620      	mov	r0, r4
 800b54c:	ee10 2a10 	vmov	r2, s0
 800b550:	465b      	mov	r3, fp
 800b552:	4639      	mov	r1, r7
 800b554:	f7f5 f97a 	bl	800084c <__aeabi_ddiv>
 800b558:	ec41 0b10 	vmov	d0, r0, r1
 800b55c:	b003      	add	sp, #12
 800b55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b562 <__copybits>:
 800b562:	3901      	subs	r1, #1
 800b564:	b570      	push	{r4, r5, r6, lr}
 800b566:	1149      	asrs	r1, r1, #5
 800b568:	6914      	ldr	r4, [r2, #16]
 800b56a:	3101      	adds	r1, #1
 800b56c:	f102 0314 	add.w	r3, r2, #20
 800b570:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b574:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b578:	1f05      	subs	r5, r0, #4
 800b57a:	42a3      	cmp	r3, r4
 800b57c:	d30c      	bcc.n	800b598 <__copybits+0x36>
 800b57e:	1aa3      	subs	r3, r4, r2
 800b580:	3b11      	subs	r3, #17
 800b582:	f023 0303 	bic.w	r3, r3, #3
 800b586:	3211      	adds	r2, #17
 800b588:	42a2      	cmp	r2, r4
 800b58a:	bf88      	it	hi
 800b58c:	2300      	movhi	r3, #0
 800b58e:	4418      	add	r0, r3
 800b590:	2300      	movs	r3, #0
 800b592:	4288      	cmp	r0, r1
 800b594:	d305      	bcc.n	800b5a2 <__copybits+0x40>
 800b596:	bd70      	pop	{r4, r5, r6, pc}
 800b598:	f853 6b04 	ldr.w	r6, [r3], #4
 800b59c:	f845 6f04 	str.w	r6, [r5, #4]!
 800b5a0:	e7eb      	b.n	800b57a <__copybits+0x18>
 800b5a2:	f840 3b04 	str.w	r3, [r0], #4
 800b5a6:	e7f4      	b.n	800b592 <__copybits+0x30>

0800b5a8 <__any_on>:
 800b5a8:	f100 0214 	add.w	r2, r0, #20
 800b5ac:	6900      	ldr	r0, [r0, #16]
 800b5ae:	114b      	asrs	r3, r1, #5
 800b5b0:	4298      	cmp	r0, r3
 800b5b2:	b510      	push	{r4, lr}
 800b5b4:	db11      	blt.n	800b5da <__any_on+0x32>
 800b5b6:	dd0a      	ble.n	800b5ce <__any_on+0x26>
 800b5b8:	f011 011f 	ands.w	r1, r1, #31
 800b5bc:	d007      	beq.n	800b5ce <__any_on+0x26>
 800b5be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b5c2:	fa24 f001 	lsr.w	r0, r4, r1
 800b5c6:	fa00 f101 	lsl.w	r1, r0, r1
 800b5ca:	428c      	cmp	r4, r1
 800b5cc:	d10b      	bne.n	800b5e6 <__any_on+0x3e>
 800b5ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d803      	bhi.n	800b5de <__any_on+0x36>
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	bd10      	pop	{r4, pc}
 800b5da:	4603      	mov	r3, r0
 800b5dc:	e7f7      	b.n	800b5ce <__any_on+0x26>
 800b5de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5e2:	2900      	cmp	r1, #0
 800b5e4:	d0f5      	beq.n	800b5d2 <__any_on+0x2a>
 800b5e6:	2001      	movs	r0, #1
 800b5e8:	e7f6      	b.n	800b5d8 <__any_on+0x30>

0800b5ea <_calloc_r>:
 800b5ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5ec:	fba1 2402 	umull	r2, r4, r1, r2
 800b5f0:	b94c      	cbnz	r4, 800b606 <_calloc_r+0x1c>
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	9201      	str	r2, [sp, #4]
 800b5f6:	f000 f87b 	bl	800b6f0 <_malloc_r>
 800b5fa:	9a01      	ldr	r2, [sp, #4]
 800b5fc:	4605      	mov	r5, r0
 800b5fe:	b930      	cbnz	r0, 800b60e <_calloc_r+0x24>
 800b600:	4628      	mov	r0, r5
 800b602:	b003      	add	sp, #12
 800b604:	bd30      	pop	{r4, r5, pc}
 800b606:	220c      	movs	r2, #12
 800b608:	6002      	str	r2, [r0, #0]
 800b60a:	2500      	movs	r5, #0
 800b60c:	e7f8      	b.n	800b600 <_calloc_r+0x16>
 800b60e:	4621      	mov	r1, r4
 800b610:	f7fc f9c8 	bl	80079a4 <memset>
 800b614:	e7f4      	b.n	800b600 <_calloc_r+0x16>
	...

0800b618 <_free_r>:
 800b618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b61a:	2900      	cmp	r1, #0
 800b61c:	d044      	beq.n	800b6a8 <_free_r+0x90>
 800b61e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b622:	9001      	str	r0, [sp, #4]
 800b624:	2b00      	cmp	r3, #0
 800b626:	f1a1 0404 	sub.w	r4, r1, #4
 800b62a:	bfb8      	it	lt
 800b62c:	18e4      	addlt	r4, r4, r3
 800b62e:	f001 fa11 	bl	800ca54 <__malloc_lock>
 800b632:	4a1e      	ldr	r2, [pc, #120]	; (800b6ac <_free_r+0x94>)
 800b634:	9801      	ldr	r0, [sp, #4]
 800b636:	6813      	ldr	r3, [r2, #0]
 800b638:	b933      	cbnz	r3, 800b648 <_free_r+0x30>
 800b63a:	6063      	str	r3, [r4, #4]
 800b63c:	6014      	str	r4, [r2, #0]
 800b63e:	b003      	add	sp, #12
 800b640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b644:	f001 ba0c 	b.w	800ca60 <__malloc_unlock>
 800b648:	42a3      	cmp	r3, r4
 800b64a:	d908      	bls.n	800b65e <_free_r+0x46>
 800b64c:	6825      	ldr	r5, [r4, #0]
 800b64e:	1961      	adds	r1, r4, r5
 800b650:	428b      	cmp	r3, r1
 800b652:	bf01      	itttt	eq
 800b654:	6819      	ldreq	r1, [r3, #0]
 800b656:	685b      	ldreq	r3, [r3, #4]
 800b658:	1949      	addeq	r1, r1, r5
 800b65a:	6021      	streq	r1, [r4, #0]
 800b65c:	e7ed      	b.n	800b63a <_free_r+0x22>
 800b65e:	461a      	mov	r2, r3
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	b10b      	cbz	r3, 800b668 <_free_r+0x50>
 800b664:	42a3      	cmp	r3, r4
 800b666:	d9fa      	bls.n	800b65e <_free_r+0x46>
 800b668:	6811      	ldr	r1, [r2, #0]
 800b66a:	1855      	adds	r5, r2, r1
 800b66c:	42a5      	cmp	r5, r4
 800b66e:	d10b      	bne.n	800b688 <_free_r+0x70>
 800b670:	6824      	ldr	r4, [r4, #0]
 800b672:	4421      	add	r1, r4
 800b674:	1854      	adds	r4, r2, r1
 800b676:	42a3      	cmp	r3, r4
 800b678:	6011      	str	r1, [r2, #0]
 800b67a:	d1e0      	bne.n	800b63e <_free_r+0x26>
 800b67c:	681c      	ldr	r4, [r3, #0]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	6053      	str	r3, [r2, #4]
 800b682:	4421      	add	r1, r4
 800b684:	6011      	str	r1, [r2, #0]
 800b686:	e7da      	b.n	800b63e <_free_r+0x26>
 800b688:	d902      	bls.n	800b690 <_free_r+0x78>
 800b68a:	230c      	movs	r3, #12
 800b68c:	6003      	str	r3, [r0, #0]
 800b68e:	e7d6      	b.n	800b63e <_free_r+0x26>
 800b690:	6825      	ldr	r5, [r4, #0]
 800b692:	1961      	adds	r1, r4, r5
 800b694:	428b      	cmp	r3, r1
 800b696:	bf04      	itt	eq
 800b698:	6819      	ldreq	r1, [r3, #0]
 800b69a:	685b      	ldreq	r3, [r3, #4]
 800b69c:	6063      	str	r3, [r4, #4]
 800b69e:	bf04      	itt	eq
 800b6a0:	1949      	addeq	r1, r1, r5
 800b6a2:	6021      	streq	r1, [r4, #0]
 800b6a4:	6054      	str	r4, [r2, #4]
 800b6a6:	e7ca      	b.n	800b63e <_free_r+0x26>
 800b6a8:	b003      	add	sp, #12
 800b6aa:	bd30      	pop	{r4, r5, pc}
 800b6ac:	2000091c 	.word	0x2000091c

0800b6b0 <sbrk_aligned>:
 800b6b0:	b570      	push	{r4, r5, r6, lr}
 800b6b2:	4e0e      	ldr	r6, [pc, #56]	; (800b6ec <sbrk_aligned+0x3c>)
 800b6b4:	460c      	mov	r4, r1
 800b6b6:	6831      	ldr	r1, [r6, #0]
 800b6b8:	4605      	mov	r5, r0
 800b6ba:	b911      	cbnz	r1, 800b6c2 <sbrk_aligned+0x12>
 800b6bc:	f000 fe80 	bl	800c3c0 <_sbrk_r>
 800b6c0:	6030      	str	r0, [r6, #0]
 800b6c2:	4621      	mov	r1, r4
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	f000 fe7b 	bl	800c3c0 <_sbrk_r>
 800b6ca:	1c43      	adds	r3, r0, #1
 800b6cc:	d00a      	beq.n	800b6e4 <sbrk_aligned+0x34>
 800b6ce:	1cc4      	adds	r4, r0, #3
 800b6d0:	f024 0403 	bic.w	r4, r4, #3
 800b6d4:	42a0      	cmp	r0, r4
 800b6d6:	d007      	beq.n	800b6e8 <sbrk_aligned+0x38>
 800b6d8:	1a21      	subs	r1, r4, r0
 800b6da:	4628      	mov	r0, r5
 800b6dc:	f000 fe70 	bl	800c3c0 <_sbrk_r>
 800b6e0:	3001      	adds	r0, #1
 800b6e2:	d101      	bne.n	800b6e8 <sbrk_aligned+0x38>
 800b6e4:	f04f 34ff 	mov.w	r4, #4294967295
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	bd70      	pop	{r4, r5, r6, pc}
 800b6ec:	20000920 	.word	0x20000920

0800b6f0 <_malloc_r>:
 800b6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f4:	1ccd      	adds	r5, r1, #3
 800b6f6:	f025 0503 	bic.w	r5, r5, #3
 800b6fa:	3508      	adds	r5, #8
 800b6fc:	2d0c      	cmp	r5, #12
 800b6fe:	bf38      	it	cc
 800b700:	250c      	movcc	r5, #12
 800b702:	2d00      	cmp	r5, #0
 800b704:	4607      	mov	r7, r0
 800b706:	db01      	blt.n	800b70c <_malloc_r+0x1c>
 800b708:	42a9      	cmp	r1, r5
 800b70a:	d905      	bls.n	800b718 <_malloc_r+0x28>
 800b70c:	230c      	movs	r3, #12
 800b70e:	603b      	str	r3, [r7, #0]
 800b710:	2600      	movs	r6, #0
 800b712:	4630      	mov	r0, r6
 800b714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b718:	4e2e      	ldr	r6, [pc, #184]	; (800b7d4 <_malloc_r+0xe4>)
 800b71a:	f001 f99b 	bl	800ca54 <__malloc_lock>
 800b71e:	6833      	ldr	r3, [r6, #0]
 800b720:	461c      	mov	r4, r3
 800b722:	bb34      	cbnz	r4, 800b772 <_malloc_r+0x82>
 800b724:	4629      	mov	r1, r5
 800b726:	4638      	mov	r0, r7
 800b728:	f7ff ffc2 	bl	800b6b0 <sbrk_aligned>
 800b72c:	1c43      	adds	r3, r0, #1
 800b72e:	4604      	mov	r4, r0
 800b730:	d14d      	bne.n	800b7ce <_malloc_r+0xde>
 800b732:	6834      	ldr	r4, [r6, #0]
 800b734:	4626      	mov	r6, r4
 800b736:	2e00      	cmp	r6, #0
 800b738:	d140      	bne.n	800b7bc <_malloc_r+0xcc>
 800b73a:	6823      	ldr	r3, [r4, #0]
 800b73c:	4631      	mov	r1, r6
 800b73e:	4638      	mov	r0, r7
 800b740:	eb04 0803 	add.w	r8, r4, r3
 800b744:	f000 fe3c 	bl	800c3c0 <_sbrk_r>
 800b748:	4580      	cmp	r8, r0
 800b74a:	d13a      	bne.n	800b7c2 <_malloc_r+0xd2>
 800b74c:	6821      	ldr	r1, [r4, #0]
 800b74e:	3503      	adds	r5, #3
 800b750:	1a6d      	subs	r5, r5, r1
 800b752:	f025 0503 	bic.w	r5, r5, #3
 800b756:	3508      	adds	r5, #8
 800b758:	2d0c      	cmp	r5, #12
 800b75a:	bf38      	it	cc
 800b75c:	250c      	movcc	r5, #12
 800b75e:	4629      	mov	r1, r5
 800b760:	4638      	mov	r0, r7
 800b762:	f7ff ffa5 	bl	800b6b0 <sbrk_aligned>
 800b766:	3001      	adds	r0, #1
 800b768:	d02b      	beq.n	800b7c2 <_malloc_r+0xd2>
 800b76a:	6823      	ldr	r3, [r4, #0]
 800b76c:	442b      	add	r3, r5
 800b76e:	6023      	str	r3, [r4, #0]
 800b770:	e00e      	b.n	800b790 <_malloc_r+0xa0>
 800b772:	6822      	ldr	r2, [r4, #0]
 800b774:	1b52      	subs	r2, r2, r5
 800b776:	d41e      	bmi.n	800b7b6 <_malloc_r+0xc6>
 800b778:	2a0b      	cmp	r2, #11
 800b77a:	d916      	bls.n	800b7aa <_malloc_r+0xba>
 800b77c:	1961      	adds	r1, r4, r5
 800b77e:	42a3      	cmp	r3, r4
 800b780:	6025      	str	r5, [r4, #0]
 800b782:	bf18      	it	ne
 800b784:	6059      	strne	r1, [r3, #4]
 800b786:	6863      	ldr	r3, [r4, #4]
 800b788:	bf08      	it	eq
 800b78a:	6031      	streq	r1, [r6, #0]
 800b78c:	5162      	str	r2, [r4, r5]
 800b78e:	604b      	str	r3, [r1, #4]
 800b790:	4638      	mov	r0, r7
 800b792:	f104 060b 	add.w	r6, r4, #11
 800b796:	f001 f963 	bl	800ca60 <__malloc_unlock>
 800b79a:	f026 0607 	bic.w	r6, r6, #7
 800b79e:	1d23      	adds	r3, r4, #4
 800b7a0:	1af2      	subs	r2, r6, r3
 800b7a2:	d0b6      	beq.n	800b712 <_malloc_r+0x22>
 800b7a4:	1b9b      	subs	r3, r3, r6
 800b7a6:	50a3      	str	r3, [r4, r2]
 800b7a8:	e7b3      	b.n	800b712 <_malloc_r+0x22>
 800b7aa:	6862      	ldr	r2, [r4, #4]
 800b7ac:	42a3      	cmp	r3, r4
 800b7ae:	bf0c      	ite	eq
 800b7b0:	6032      	streq	r2, [r6, #0]
 800b7b2:	605a      	strne	r2, [r3, #4]
 800b7b4:	e7ec      	b.n	800b790 <_malloc_r+0xa0>
 800b7b6:	4623      	mov	r3, r4
 800b7b8:	6864      	ldr	r4, [r4, #4]
 800b7ba:	e7b2      	b.n	800b722 <_malloc_r+0x32>
 800b7bc:	4634      	mov	r4, r6
 800b7be:	6876      	ldr	r6, [r6, #4]
 800b7c0:	e7b9      	b.n	800b736 <_malloc_r+0x46>
 800b7c2:	230c      	movs	r3, #12
 800b7c4:	603b      	str	r3, [r7, #0]
 800b7c6:	4638      	mov	r0, r7
 800b7c8:	f001 f94a 	bl	800ca60 <__malloc_unlock>
 800b7cc:	e7a1      	b.n	800b712 <_malloc_r+0x22>
 800b7ce:	6025      	str	r5, [r4, #0]
 800b7d0:	e7de      	b.n	800b790 <_malloc_r+0xa0>
 800b7d2:	bf00      	nop
 800b7d4:	2000091c 	.word	0x2000091c

0800b7d8 <__ssputs_r>:
 800b7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7dc:	688e      	ldr	r6, [r1, #8]
 800b7de:	429e      	cmp	r6, r3
 800b7e0:	4682      	mov	sl, r0
 800b7e2:	460c      	mov	r4, r1
 800b7e4:	4690      	mov	r8, r2
 800b7e6:	461f      	mov	r7, r3
 800b7e8:	d838      	bhi.n	800b85c <__ssputs_r+0x84>
 800b7ea:	898a      	ldrh	r2, [r1, #12]
 800b7ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7f0:	d032      	beq.n	800b858 <__ssputs_r+0x80>
 800b7f2:	6825      	ldr	r5, [r4, #0]
 800b7f4:	6909      	ldr	r1, [r1, #16]
 800b7f6:	eba5 0901 	sub.w	r9, r5, r1
 800b7fa:	6965      	ldr	r5, [r4, #20]
 800b7fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b800:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b804:	3301      	adds	r3, #1
 800b806:	444b      	add	r3, r9
 800b808:	106d      	asrs	r5, r5, #1
 800b80a:	429d      	cmp	r5, r3
 800b80c:	bf38      	it	cc
 800b80e:	461d      	movcc	r5, r3
 800b810:	0553      	lsls	r3, r2, #21
 800b812:	d531      	bpl.n	800b878 <__ssputs_r+0xa0>
 800b814:	4629      	mov	r1, r5
 800b816:	f7ff ff6b 	bl	800b6f0 <_malloc_r>
 800b81a:	4606      	mov	r6, r0
 800b81c:	b950      	cbnz	r0, 800b834 <__ssputs_r+0x5c>
 800b81e:	230c      	movs	r3, #12
 800b820:	f8ca 3000 	str.w	r3, [sl]
 800b824:	89a3      	ldrh	r3, [r4, #12]
 800b826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b82a:	81a3      	strh	r3, [r4, #12]
 800b82c:	f04f 30ff 	mov.w	r0, #4294967295
 800b830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b834:	6921      	ldr	r1, [r4, #16]
 800b836:	464a      	mov	r2, r9
 800b838:	f7ff fa08 	bl	800ac4c <memcpy>
 800b83c:	89a3      	ldrh	r3, [r4, #12]
 800b83e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b846:	81a3      	strh	r3, [r4, #12]
 800b848:	6126      	str	r6, [r4, #16]
 800b84a:	6165      	str	r5, [r4, #20]
 800b84c:	444e      	add	r6, r9
 800b84e:	eba5 0509 	sub.w	r5, r5, r9
 800b852:	6026      	str	r6, [r4, #0]
 800b854:	60a5      	str	r5, [r4, #8]
 800b856:	463e      	mov	r6, r7
 800b858:	42be      	cmp	r6, r7
 800b85a:	d900      	bls.n	800b85e <__ssputs_r+0x86>
 800b85c:	463e      	mov	r6, r7
 800b85e:	6820      	ldr	r0, [r4, #0]
 800b860:	4632      	mov	r2, r6
 800b862:	4641      	mov	r1, r8
 800b864:	f001 f8dc 	bl	800ca20 <memmove>
 800b868:	68a3      	ldr	r3, [r4, #8]
 800b86a:	1b9b      	subs	r3, r3, r6
 800b86c:	60a3      	str	r3, [r4, #8]
 800b86e:	6823      	ldr	r3, [r4, #0]
 800b870:	4433      	add	r3, r6
 800b872:	6023      	str	r3, [r4, #0]
 800b874:	2000      	movs	r0, #0
 800b876:	e7db      	b.n	800b830 <__ssputs_r+0x58>
 800b878:	462a      	mov	r2, r5
 800b87a:	f001 f8f7 	bl	800ca6c <_realloc_r>
 800b87e:	4606      	mov	r6, r0
 800b880:	2800      	cmp	r0, #0
 800b882:	d1e1      	bne.n	800b848 <__ssputs_r+0x70>
 800b884:	6921      	ldr	r1, [r4, #16]
 800b886:	4650      	mov	r0, sl
 800b888:	f7ff fec6 	bl	800b618 <_free_r>
 800b88c:	e7c7      	b.n	800b81e <__ssputs_r+0x46>
	...

0800b890 <_svfiprintf_r>:
 800b890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b894:	4698      	mov	r8, r3
 800b896:	898b      	ldrh	r3, [r1, #12]
 800b898:	061b      	lsls	r3, r3, #24
 800b89a:	b09d      	sub	sp, #116	; 0x74
 800b89c:	4607      	mov	r7, r0
 800b89e:	460d      	mov	r5, r1
 800b8a0:	4614      	mov	r4, r2
 800b8a2:	d50e      	bpl.n	800b8c2 <_svfiprintf_r+0x32>
 800b8a4:	690b      	ldr	r3, [r1, #16]
 800b8a6:	b963      	cbnz	r3, 800b8c2 <_svfiprintf_r+0x32>
 800b8a8:	2140      	movs	r1, #64	; 0x40
 800b8aa:	f7ff ff21 	bl	800b6f0 <_malloc_r>
 800b8ae:	6028      	str	r0, [r5, #0]
 800b8b0:	6128      	str	r0, [r5, #16]
 800b8b2:	b920      	cbnz	r0, 800b8be <_svfiprintf_r+0x2e>
 800b8b4:	230c      	movs	r3, #12
 800b8b6:	603b      	str	r3, [r7, #0]
 800b8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8bc:	e0d1      	b.n	800ba62 <_svfiprintf_r+0x1d2>
 800b8be:	2340      	movs	r3, #64	; 0x40
 800b8c0:	616b      	str	r3, [r5, #20]
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8c6:	2320      	movs	r3, #32
 800b8c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8d0:	2330      	movs	r3, #48	; 0x30
 800b8d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba7c <_svfiprintf_r+0x1ec>
 800b8d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8da:	f04f 0901 	mov.w	r9, #1
 800b8de:	4623      	mov	r3, r4
 800b8e0:	469a      	mov	sl, r3
 800b8e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8e6:	b10a      	cbz	r2, 800b8ec <_svfiprintf_r+0x5c>
 800b8e8:	2a25      	cmp	r2, #37	; 0x25
 800b8ea:	d1f9      	bne.n	800b8e0 <_svfiprintf_r+0x50>
 800b8ec:	ebba 0b04 	subs.w	fp, sl, r4
 800b8f0:	d00b      	beq.n	800b90a <_svfiprintf_r+0x7a>
 800b8f2:	465b      	mov	r3, fp
 800b8f4:	4622      	mov	r2, r4
 800b8f6:	4629      	mov	r1, r5
 800b8f8:	4638      	mov	r0, r7
 800b8fa:	f7ff ff6d 	bl	800b7d8 <__ssputs_r>
 800b8fe:	3001      	adds	r0, #1
 800b900:	f000 80aa 	beq.w	800ba58 <_svfiprintf_r+0x1c8>
 800b904:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b906:	445a      	add	r2, fp
 800b908:	9209      	str	r2, [sp, #36]	; 0x24
 800b90a:	f89a 3000 	ldrb.w	r3, [sl]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	f000 80a2 	beq.w	800ba58 <_svfiprintf_r+0x1c8>
 800b914:	2300      	movs	r3, #0
 800b916:	f04f 32ff 	mov.w	r2, #4294967295
 800b91a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b91e:	f10a 0a01 	add.w	sl, sl, #1
 800b922:	9304      	str	r3, [sp, #16]
 800b924:	9307      	str	r3, [sp, #28]
 800b926:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b92a:	931a      	str	r3, [sp, #104]	; 0x68
 800b92c:	4654      	mov	r4, sl
 800b92e:	2205      	movs	r2, #5
 800b930:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b934:	4851      	ldr	r0, [pc, #324]	; (800ba7c <_svfiprintf_r+0x1ec>)
 800b936:	f7f4 fc53 	bl	80001e0 <memchr>
 800b93a:	9a04      	ldr	r2, [sp, #16]
 800b93c:	b9d8      	cbnz	r0, 800b976 <_svfiprintf_r+0xe6>
 800b93e:	06d0      	lsls	r0, r2, #27
 800b940:	bf44      	itt	mi
 800b942:	2320      	movmi	r3, #32
 800b944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b948:	0711      	lsls	r1, r2, #28
 800b94a:	bf44      	itt	mi
 800b94c:	232b      	movmi	r3, #43	; 0x2b
 800b94e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b952:	f89a 3000 	ldrb.w	r3, [sl]
 800b956:	2b2a      	cmp	r3, #42	; 0x2a
 800b958:	d015      	beq.n	800b986 <_svfiprintf_r+0xf6>
 800b95a:	9a07      	ldr	r2, [sp, #28]
 800b95c:	4654      	mov	r4, sl
 800b95e:	2000      	movs	r0, #0
 800b960:	f04f 0c0a 	mov.w	ip, #10
 800b964:	4621      	mov	r1, r4
 800b966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b96a:	3b30      	subs	r3, #48	; 0x30
 800b96c:	2b09      	cmp	r3, #9
 800b96e:	d94e      	bls.n	800ba0e <_svfiprintf_r+0x17e>
 800b970:	b1b0      	cbz	r0, 800b9a0 <_svfiprintf_r+0x110>
 800b972:	9207      	str	r2, [sp, #28]
 800b974:	e014      	b.n	800b9a0 <_svfiprintf_r+0x110>
 800b976:	eba0 0308 	sub.w	r3, r0, r8
 800b97a:	fa09 f303 	lsl.w	r3, r9, r3
 800b97e:	4313      	orrs	r3, r2
 800b980:	9304      	str	r3, [sp, #16]
 800b982:	46a2      	mov	sl, r4
 800b984:	e7d2      	b.n	800b92c <_svfiprintf_r+0x9c>
 800b986:	9b03      	ldr	r3, [sp, #12]
 800b988:	1d19      	adds	r1, r3, #4
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	9103      	str	r1, [sp, #12]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	bfbb      	ittet	lt
 800b992:	425b      	neglt	r3, r3
 800b994:	f042 0202 	orrlt.w	r2, r2, #2
 800b998:	9307      	strge	r3, [sp, #28]
 800b99a:	9307      	strlt	r3, [sp, #28]
 800b99c:	bfb8      	it	lt
 800b99e:	9204      	strlt	r2, [sp, #16]
 800b9a0:	7823      	ldrb	r3, [r4, #0]
 800b9a2:	2b2e      	cmp	r3, #46	; 0x2e
 800b9a4:	d10c      	bne.n	800b9c0 <_svfiprintf_r+0x130>
 800b9a6:	7863      	ldrb	r3, [r4, #1]
 800b9a8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9aa:	d135      	bne.n	800ba18 <_svfiprintf_r+0x188>
 800b9ac:	9b03      	ldr	r3, [sp, #12]
 800b9ae:	1d1a      	adds	r2, r3, #4
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	9203      	str	r2, [sp, #12]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	bfb8      	it	lt
 800b9b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9bc:	3402      	adds	r4, #2
 800b9be:	9305      	str	r3, [sp, #20]
 800b9c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba8c <_svfiprintf_r+0x1fc>
 800b9c4:	7821      	ldrb	r1, [r4, #0]
 800b9c6:	2203      	movs	r2, #3
 800b9c8:	4650      	mov	r0, sl
 800b9ca:	f7f4 fc09 	bl	80001e0 <memchr>
 800b9ce:	b140      	cbz	r0, 800b9e2 <_svfiprintf_r+0x152>
 800b9d0:	2340      	movs	r3, #64	; 0x40
 800b9d2:	eba0 000a 	sub.w	r0, r0, sl
 800b9d6:	fa03 f000 	lsl.w	r0, r3, r0
 800b9da:	9b04      	ldr	r3, [sp, #16]
 800b9dc:	4303      	orrs	r3, r0
 800b9de:	3401      	adds	r4, #1
 800b9e0:	9304      	str	r3, [sp, #16]
 800b9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9e6:	4826      	ldr	r0, [pc, #152]	; (800ba80 <_svfiprintf_r+0x1f0>)
 800b9e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9ec:	2206      	movs	r2, #6
 800b9ee:	f7f4 fbf7 	bl	80001e0 <memchr>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d038      	beq.n	800ba68 <_svfiprintf_r+0x1d8>
 800b9f6:	4b23      	ldr	r3, [pc, #140]	; (800ba84 <_svfiprintf_r+0x1f4>)
 800b9f8:	bb1b      	cbnz	r3, 800ba42 <_svfiprintf_r+0x1b2>
 800b9fa:	9b03      	ldr	r3, [sp, #12]
 800b9fc:	3307      	adds	r3, #7
 800b9fe:	f023 0307 	bic.w	r3, r3, #7
 800ba02:	3308      	adds	r3, #8
 800ba04:	9303      	str	r3, [sp, #12]
 800ba06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba08:	4433      	add	r3, r6
 800ba0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba0c:	e767      	b.n	800b8de <_svfiprintf_r+0x4e>
 800ba0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba12:	460c      	mov	r4, r1
 800ba14:	2001      	movs	r0, #1
 800ba16:	e7a5      	b.n	800b964 <_svfiprintf_r+0xd4>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	3401      	adds	r4, #1
 800ba1c:	9305      	str	r3, [sp, #20]
 800ba1e:	4619      	mov	r1, r3
 800ba20:	f04f 0c0a 	mov.w	ip, #10
 800ba24:	4620      	mov	r0, r4
 800ba26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba2a:	3a30      	subs	r2, #48	; 0x30
 800ba2c:	2a09      	cmp	r2, #9
 800ba2e:	d903      	bls.n	800ba38 <_svfiprintf_r+0x1a8>
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d0c5      	beq.n	800b9c0 <_svfiprintf_r+0x130>
 800ba34:	9105      	str	r1, [sp, #20]
 800ba36:	e7c3      	b.n	800b9c0 <_svfiprintf_r+0x130>
 800ba38:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba3c:	4604      	mov	r4, r0
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e7f0      	b.n	800ba24 <_svfiprintf_r+0x194>
 800ba42:	ab03      	add	r3, sp, #12
 800ba44:	9300      	str	r3, [sp, #0]
 800ba46:	462a      	mov	r2, r5
 800ba48:	4b0f      	ldr	r3, [pc, #60]	; (800ba88 <_svfiprintf_r+0x1f8>)
 800ba4a:	a904      	add	r1, sp, #16
 800ba4c:	4638      	mov	r0, r7
 800ba4e:	f7fc f851 	bl	8007af4 <_printf_float>
 800ba52:	1c42      	adds	r2, r0, #1
 800ba54:	4606      	mov	r6, r0
 800ba56:	d1d6      	bne.n	800ba06 <_svfiprintf_r+0x176>
 800ba58:	89ab      	ldrh	r3, [r5, #12]
 800ba5a:	065b      	lsls	r3, r3, #25
 800ba5c:	f53f af2c 	bmi.w	800b8b8 <_svfiprintf_r+0x28>
 800ba60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba62:	b01d      	add	sp, #116	; 0x74
 800ba64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba68:	ab03      	add	r3, sp, #12
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	462a      	mov	r2, r5
 800ba6e:	4b06      	ldr	r3, [pc, #24]	; (800ba88 <_svfiprintf_r+0x1f8>)
 800ba70:	a904      	add	r1, sp, #16
 800ba72:	4638      	mov	r0, r7
 800ba74:	f7fc fae2 	bl	800803c <_printf_i>
 800ba78:	e7eb      	b.n	800ba52 <_svfiprintf_r+0x1c2>
 800ba7a:	bf00      	nop
 800ba7c:	0800f214 	.word	0x0800f214
 800ba80:	0800f21e 	.word	0x0800f21e
 800ba84:	08007af5 	.word	0x08007af5
 800ba88:	0800b7d9 	.word	0x0800b7d9
 800ba8c:	0800f21a 	.word	0x0800f21a

0800ba90 <_sungetc_r>:
 800ba90:	b538      	push	{r3, r4, r5, lr}
 800ba92:	1c4b      	adds	r3, r1, #1
 800ba94:	4614      	mov	r4, r2
 800ba96:	d103      	bne.n	800baa0 <_sungetc_r+0x10>
 800ba98:	f04f 35ff 	mov.w	r5, #4294967295
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	bd38      	pop	{r3, r4, r5, pc}
 800baa0:	8993      	ldrh	r3, [r2, #12]
 800baa2:	f023 0320 	bic.w	r3, r3, #32
 800baa6:	8193      	strh	r3, [r2, #12]
 800baa8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800baaa:	6852      	ldr	r2, [r2, #4]
 800baac:	b2cd      	uxtb	r5, r1
 800baae:	b18b      	cbz	r3, 800bad4 <_sungetc_r+0x44>
 800bab0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bab2:	4293      	cmp	r3, r2
 800bab4:	dd08      	ble.n	800bac8 <_sungetc_r+0x38>
 800bab6:	6823      	ldr	r3, [r4, #0]
 800bab8:	1e5a      	subs	r2, r3, #1
 800baba:	6022      	str	r2, [r4, #0]
 800babc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bac0:	6863      	ldr	r3, [r4, #4]
 800bac2:	3301      	adds	r3, #1
 800bac4:	6063      	str	r3, [r4, #4]
 800bac6:	e7e9      	b.n	800ba9c <_sungetc_r+0xc>
 800bac8:	4621      	mov	r1, r4
 800baca:	f000 fd49 	bl	800c560 <__submore>
 800bace:	2800      	cmp	r0, #0
 800bad0:	d0f1      	beq.n	800bab6 <_sungetc_r+0x26>
 800bad2:	e7e1      	b.n	800ba98 <_sungetc_r+0x8>
 800bad4:	6921      	ldr	r1, [r4, #16]
 800bad6:	6823      	ldr	r3, [r4, #0]
 800bad8:	b151      	cbz	r1, 800baf0 <_sungetc_r+0x60>
 800bada:	4299      	cmp	r1, r3
 800badc:	d208      	bcs.n	800baf0 <_sungetc_r+0x60>
 800bade:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bae2:	42a9      	cmp	r1, r5
 800bae4:	d104      	bne.n	800baf0 <_sungetc_r+0x60>
 800bae6:	3b01      	subs	r3, #1
 800bae8:	3201      	adds	r2, #1
 800baea:	6023      	str	r3, [r4, #0]
 800baec:	6062      	str	r2, [r4, #4]
 800baee:	e7d5      	b.n	800ba9c <_sungetc_r+0xc>
 800baf0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800baf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800baf8:	6363      	str	r3, [r4, #52]	; 0x34
 800bafa:	2303      	movs	r3, #3
 800bafc:	63a3      	str	r3, [r4, #56]	; 0x38
 800bafe:	4623      	mov	r3, r4
 800bb00:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bb04:	6023      	str	r3, [r4, #0]
 800bb06:	2301      	movs	r3, #1
 800bb08:	e7dc      	b.n	800bac4 <_sungetc_r+0x34>

0800bb0a <__ssrefill_r>:
 800bb0a:	b510      	push	{r4, lr}
 800bb0c:	460c      	mov	r4, r1
 800bb0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bb10:	b169      	cbz	r1, 800bb2e <__ssrefill_r+0x24>
 800bb12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb16:	4299      	cmp	r1, r3
 800bb18:	d001      	beq.n	800bb1e <__ssrefill_r+0x14>
 800bb1a:	f7ff fd7d 	bl	800b618 <_free_r>
 800bb1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb20:	6063      	str	r3, [r4, #4]
 800bb22:	2000      	movs	r0, #0
 800bb24:	6360      	str	r0, [r4, #52]	; 0x34
 800bb26:	b113      	cbz	r3, 800bb2e <__ssrefill_r+0x24>
 800bb28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bb2a:	6023      	str	r3, [r4, #0]
 800bb2c:	bd10      	pop	{r4, pc}
 800bb2e:	6923      	ldr	r3, [r4, #16]
 800bb30:	6023      	str	r3, [r4, #0]
 800bb32:	2300      	movs	r3, #0
 800bb34:	6063      	str	r3, [r4, #4]
 800bb36:	89a3      	ldrh	r3, [r4, #12]
 800bb38:	f043 0320 	orr.w	r3, r3, #32
 800bb3c:	81a3      	strh	r3, [r4, #12]
 800bb3e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb42:	e7f3      	b.n	800bb2c <__ssrefill_r+0x22>

0800bb44 <__ssvfiscanf_r>:
 800bb44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb48:	460c      	mov	r4, r1
 800bb4a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800bb4e:	2100      	movs	r1, #0
 800bb50:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bb54:	49a6      	ldr	r1, [pc, #664]	; (800bdf0 <__ssvfiscanf_r+0x2ac>)
 800bb56:	91a0      	str	r1, [sp, #640]	; 0x280
 800bb58:	f10d 0804 	add.w	r8, sp, #4
 800bb5c:	49a5      	ldr	r1, [pc, #660]	; (800bdf4 <__ssvfiscanf_r+0x2b0>)
 800bb5e:	4fa6      	ldr	r7, [pc, #664]	; (800bdf8 <__ssvfiscanf_r+0x2b4>)
 800bb60:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800bdfc <__ssvfiscanf_r+0x2b8>
 800bb64:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bb68:	4606      	mov	r6, r0
 800bb6a:	91a1      	str	r1, [sp, #644]	; 0x284
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	7813      	ldrb	r3, [r2, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f000 815a 	beq.w	800be2a <__ssvfiscanf_r+0x2e6>
 800bb76:	5dd9      	ldrb	r1, [r3, r7]
 800bb78:	f011 0108 	ands.w	r1, r1, #8
 800bb7c:	f102 0501 	add.w	r5, r2, #1
 800bb80:	d019      	beq.n	800bbb6 <__ssvfiscanf_r+0x72>
 800bb82:	6863      	ldr	r3, [r4, #4]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	dd0f      	ble.n	800bba8 <__ssvfiscanf_r+0x64>
 800bb88:	6823      	ldr	r3, [r4, #0]
 800bb8a:	781a      	ldrb	r2, [r3, #0]
 800bb8c:	5cba      	ldrb	r2, [r7, r2]
 800bb8e:	0712      	lsls	r2, r2, #28
 800bb90:	d401      	bmi.n	800bb96 <__ssvfiscanf_r+0x52>
 800bb92:	462a      	mov	r2, r5
 800bb94:	e7eb      	b.n	800bb6e <__ssvfiscanf_r+0x2a>
 800bb96:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bb98:	3201      	adds	r2, #1
 800bb9a:	9245      	str	r2, [sp, #276]	; 0x114
 800bb9c:	6862      	ldr	r2, [r4, #4]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	3a01      	subs	r2, #1
 800bba2:	6062      	str	r2, [r4, #4]
 800bba4:	6023      	str	r3, [r4, #0]
 800bba6:	e7ec      	b.n	800bb82 <__ssvfiscanf_r+0x3e>
 800bba8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4630      	mov	r0, r6
 800bbae:	4798      	blx	r3
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d0e9      	beq.n	800bb88 <__ssvfiscanf_r+0x44>
 800bbb4:	e7ed      	b.n	800bb92 <__ssvfiscanf_r+0x4e>
 800bbb6:	2b25      	cmp	r3, #37	; 0x25
 800bbb8:	d012      	beq.n	800bbe0 <__ssvfiscanf_r+0x9c>
 800bbba:	469a      	mov	sl, r3
 800bbbc:	6863      	ldr	r3, [r4, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	f340 8091 	ble.w	800bce6 <__ssvfiscanf_r+0x1a2>
 800bbc4:	6822      	ldr	r2, [r4, #0]
 800bbc6:	7813      	ldrb	r3, [r2, #0]
 800bbc8:	4553      	cmp	r3, sl
 800bbca:	f040 812e 	bne.w	800be2a <__ssvfiscanf_r+0x2e6>
 800bbce:	6863      	ldr	r3, [r4, #4]
 800bbd0:	3b01      	subs	r3, #1
 800bbd2:	6063      	str	r3, [r4, #4]
 800bbd4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bbd6:	3201      	adds	r2, #1
 800bbd8:	3301      	adds	r3, #1
 800bbda:	6022      	str	r2, [r4, #0]
 800bbdc:	9345      	str	r3, [sp, #276]	; 0x114
 800bbde:	e7d8      	b.n	800bb92 <__ssvfiscanf_r+0x4e>
 800bbe0:	9141      	str	r1, [sp, #260]	; 0x104
 800bbe2:	9143      	str	r1, [sp, #268]	; 0x10c
 800bbe4:	7853      	ldrb	r3, [r2, #1]
 800bbe6:	2b2a      	cmp	r3, #42	; 0x2a
 800bbe8:	bf02      	ittt	eq
 800bbea:	2310      	moveq	r3, #16
 800bbec:	1c95      	addeq	r5, r2, #2
 800bbee:	9341      	streq	r3, [sp, #260]	; 0x104
 800bbf0:	220a      	movs	r2, #10
 800bbf2:	46aa      	mov	sl, r5
 800bbf4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bbf8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bbfc:	2b09      	cmp	r3, #9
 800bbfe:	d91d      	bls.n	800bc3c <__ssvfiscanf_r+0xf8>
 800bc00:	487e      	ldr	r0, [pc, #504]	; (800bdfc <__ssvfiscanf_r+0x2b8>)
 800bc02:	2203      	movs	r2, #3
 800bc04:	f7f4 faec 	bl	80001e0 <memchr>
 800bc08:	b140      	cbz	r0, 800bc1c <__ssvfiscanf_r+0xd8>
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	eba0 0009 	sub.w	r0, r0, r9
 800bc10:	fa03 f000 	lsl.w	r0, r3, r0
 800bc14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bc16:	4318      	orrs	r0, r3
 800bc18:	9041      	str	r0, [sp, #260]	; 0x104
 800bc1a:	4655      	mov	r5, sl
 800bc1c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bc20:	2b78      	cmp	r3, #120	; 0x78
 800bc22:	d806      	bhi.n	800bc32 <__ssvfiscanf_r+0xee>
 800bc24:	2b57      	cmp	r3, #87	; 0x57
 800bc26:	d810      	bhi.n	800bc4a <__ssvfiscanf_r+0x106>
 800bc28:	2b25      	cmp	r3, #37	; 0x25
 800bc2a:	d0c6      	beq.n	800bbba <__ssvfiscanf_r+0x76>
 800bc2c:	d856      	bhi.n	800bcdc <__ssvfiscanf_r+0x198>
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d064      	beq.n	800bcfc <__ssvfiscanf_r+0x1b8>
 800bc32:	2303      	movs	r3, #3
 800bc34:	9347      	str	r3, [sp, #284]	; 0x11c
 800bc36:	230a      	movs	r3, #10
 800bc38:	9342      	str	r3, [sp, #264]	; 0x108
 800bc3a:	e071      	b.n	800bd20 <__ssvfiscanf_r+0x1dc>
 800bc3c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bc3e:	fb02 1103 	mla	r1, r2, r3, r1
 800bc42:	3930      	subs	r1, #48	; 0x30
 800bc44:	9143      	str	r1, [sp, #268]	; 0x10c
 800bc46:	4655      	mov	r5, sl
 800bc48:	e7d3      	b.n	800bbf2 <__ssvfiscanf_r+0xae>
 800bc4a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bc4e:	2a20      	cmp	r2, #32
 800bc50:	d8ef      	bhi.n	800bc32 <__ssvfiscanf_r+0xee>
 800bc52:	a101      	add	r1, pc, #4	; (adr r1, 800bc58 <__ssvfiscanf_r+0x114>)
 800bc54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bc58:	0800bd0b 	.word	0x0800bd0b
 800bc5c:	0800bc33 	.word	0x0800bc33
 800bc60:	0800bc33 	.word	0x0800bc33
 800bc64:	0800bd69 	.word	0x0800bd69
 800bc68:	0800bc33 	.word	0x0800bc33
 800bc6c:	0800bc33 	.word	0x0800bc33
 800bc70:	0800bc33 	.word	0x0800bc33
 800bc74:	0800bc33 	.word	0x0800bc33
 800bc78:	0800bc33 	.word	0x0800bc33
 800bc7c:	0800bc33 	.word	0x0800bc33
 800bc80:	0800bc33 	.word	0x0800bc33
 800bc84:	0800bd7f 	.word	0x0800bd7f
 800bc88:	0800bd55 	.word	0x0800bd55
 800bc8c:	0800bce3 	.word	0x0800bce3
 800bc90:	0800bce3 	.word	0x0800bce3
 800bc94:	0800bce3 	.word	0x0800bce3
 800bc98:	0800bc33 	.word	0x0800bc33
 800bc9c:	0800bd59 	.word	0x0800bd59
 800bca0:	0800bc33 	.word	0x0800bc33
 800bca4:	0800bc33 	.word	0x0800bc33
 800bca8:	0800bc33 	.word	0x0800bc33
 800bcac:	0800bc33 	.word	0x0800bc33
 800bcb0:	0800bd8f 	.word	0x0800bd8f
 800bcb4:	0800bd61 	.word	0x0800bd61
 800bcb8:	0800bd03 	.word	0x0800bd03
 800bcbc:	0800bc33 	.word	0x0800bc33
 800bcc0:	0800bc33 	.word	0x0800bc33
 800bcc4:	0800bd8b 	.word	0x0800bd8b
 800bcc8:	0800bc33 	.word	0x0800bc33
 800bccc:	0800bd55 	.word	0x0800bd55
 800bcd0:	0800bc33 	.word	0x0800bc33
 800bcd4:	0800bc33 	.word	0x0800bc33
 800bcd8:	0800bd0b 	.word	0x0800bd0b
 800bcdc:	3b45      	subs	r3, #69	; 0x45
 800bcde:	2b02      	cmp	r3, #2
 800bce0:	d8a7      	bhi.n	800bc32 <__ssvfiscanf_r+0xee>
 800bce2:	2305      	movs	r3, #5
 800bce4:	e01b      	b.n	800bd1e <__ssvfiscanf_r+0x1da>
 800bce6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bce8:	4621      	mov	r1, r4
 800bcea:	4630      	mov	r0, r6
 800bcec:	4798      	blx	r3
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	f43f af68 	beq.w	800bbc4 <__ssvfiscanf_r+0x80>
 800bcf4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	f040 808d 	bne.w	800be16 <__ssvfiscanf_r+0x2d2>
 800bcfc:	f04f 30ff 	mov.w	r0, #4294967295
 800bd00:	e08f      	b.n	800be22 <__ssvfiscanf_r+0x2de>
 800bd02:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bd04:	f042 0220 	orr.w	r2, r2, #32
 800bd08:	9241      	str	r2, [sp, #260]	; 0x104
 800bd0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bd0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd10:	9241      	str	r2, [sp, #260]	; 0x104
 800bd12:	2210      	movs	r2, #16
 800bd14:	2b6f      	cmp	r3, #111	; 0x6f
 800bd16:	9242      	str	r2, [sp, #264]	; 0x108
 800bd18:	bf34      	ite	cc
 800bd1a:	2303      	movcc	r3, #3
 800bd1c:	2304      	movcs	r3, #4
 800bd1e:	9347      	str	r3, [sp, #284]	; 0x11c
 800bd20:	6863      	ldr	r3, [r4, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	dd42      	ble.n	800bdac <__ssvfiscanf_r+0x268>
 800bd26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd28:	0659      	lsls	r1, r3, #25
 800bd2a:	d404      	bmi.n	800bd36 <__ssvfiscanf_r+0x1f2>
 800bd2c:	6823      	ldr	r3, [r4, #0]
 800bd2e:	781a      	ldrb	r2, [r3, #0]
 800bd30:	5cba      	ldrb	r2, [r7, r2]
 800bd32:	0712      	lsls	r2, r2, #28
 800bd34:	d441      	bmi.n	800bdba <__ssvfiscanf_r+0x276>
 800bd36:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bd38:	2b02      	cmp	r3, #2
 800bd3a:	dc50      	bgt.n	800bdde <__ssvfiscanf_r+0x29a>
 800bd3c:	466b      	mov	r3, sp
 800bd3e:	4622      	mov	r2, r4
 800bd40:	a941      	add	r1, sp, #260	; 0x104
 800bd42:	4630      	mov	r0, r6
 800bd44:	f000 f9d0 	bl	800c0e8 <_scanf_chars>
 800bd48:	2801      	cmp	r0, #1
 800bd4a:	d06e      	beq.n	800be2a <__ssvfiscanf_r+0x2e6>
 800bd4c:	2802      	cmp	r0, #2
 800bd4e:	f47f af20 	bne.w	800bb92 <__ssvfiscanf_r+0x4e>
 800bd52:	e7cf      	b.n	800bcf4 <__ssvfiscanf_r+0x1b0>
 800bd54:	220a      	movs	r2, #10
 800bd56:	e7dd      	b.n	800bd14 <__ssvfiscanf_r+0x1d0>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	9342      	str	r3, [sp, #264]	; 0x108
 800bd5c:	2303      	movs	r3, #3
 800bd5e:	e7de      	b.n	800bd1e <__ssvfiscanf_r+0x1da>
 800bd60:	2308      	movs	r3, #8
 800bd62:	9342      	str	r3, [sp, #264]	; 0x108
 800bd64:	2304      	movs	r3, #4
 800bd66:	e7da      	b.n	800bd1e <__ssvfiscanf_r+0x1da>
 800bd68:	4629      	mov	r1, r5
 800bd6a:	4640      	mov	r0, r8
 800bd6c:	f000 fb38 	bl	800c3e0 <__sccl>
 800bd70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd76:	9341      	str	r3, [sp, #260]	; 0x104
 800bd78:	4605      	mov	r5, r0
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e7cf      	b.n	800bd1e <__ssvfiscanf_r+0x1da>
 800bd7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd84:	9341      	str	r3, [sp, #260]	; 0x104
 800bd86:	2300      	movs	r3, #0
 800bd88:	e7c9      	b.n	800bd1e <__ssvfiscanf_r+0x1da>
 800bd8a:	2302      	movs	r3, #2
 800bd8c:	e7c7      	b.n	800bd1e <__ssvfiscanf_r+0x1da>
 800bd8e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bd90:	06c3      	lsls	r3, r0, #27
 800bd92:	f53f aefe 	bmi.w	800bb92 <__ssvfiscanf_r+0x4e>
 800bd96:	9b00      	ldr	r3, [sp, #0]
 800bd98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bd9a:	1d19      	adds	r1, r3, #4
 800bd9c:	9100      	str	r1, [sp, #0]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f010 0f01 	tst.w	r0, #1
 800bda4:	bf14      	ite	ne
 800bda6:	801a      	strhne	r2, [r3, #0]
 800bda8:	601a      	streq	r2, [r3, #0]
 800bdaa:	e6f2      	b.n	800bb92 <__ssvfiscanf_r+0x4e>
 800bdac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bdae:	4621      	mov	r1, r4
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	4798      	blx	r3
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	d0b6      	beq.n	800bd26 <__ssvfiscanf_r+0x1e2>
 800bdb8:	e79c      	b.n	800bcf4 <__ssvfiscanf_r+0x1b0>
 800bdba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bdbc:	3201      	adds	r2, #1
 800bdbe:	9245      	str	r2, [sp, #276]	; 0x114
 800bdc0:	6862      	ldr	r2, [r4, #4]
 800bdc2:	3a01      	subs	r2, #1
 800bdc4:	2a00      	cmp	r2, #0
 800bdc6:	6062      	str	r2, [r4, #4]
 800bdc8:	dd02      	ble.n	800bdd0 <__ssvfiscanf_r+0x28c>
 800bdca:	3301      	adds	r3, #1
 800bdcc:	6023      	str	r3, [r4, #0]
 800bdce:	e7ad      	b.n	800bd2c <__ssvfiscanf_r+0x1e8>
 800bdd0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bdd2:	4621      	mov	r1, r4
 800bdd4:	4630      	mov	r0, r6
 800bdd6:	4798      	blx	r3
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d0a7      	beq.n	800bd2c <__ssvfiscanf_r+0x1e8>
 800bddc:	e78a      	b.n	800bcf4 <__ssvfiscanf_r+0x1b0>
 800bdde:	2b04      	cmp	r3, #4
 800bde0:	dc0e      	bgt.n	800be00 <__ssvfiscanf_r+0x2bc>
 800bde2:	466b      	mov	r3, sp
 800bde4:	4622      	mov	r2, r4
 800bde6:	a941      	add	r1, sp, #260	; 0x104
 800bde8:	4630      	mov	r0, r6
 800bdea:	f000 f9d7 	bl	800c19c <_scanf_i>
 800bdee:	e7ab      	b.n	800bd48 <__ssvfiscanf_r+0x204>
 800bdf0:	0800ba91 	.word	0x0800ba91
 800bdf4:	0800bb0b 	.word	0x0800bb0b
 800bdf8:	0800ee4e 	.word	0x0800ee4e
 800bdfc:	0800f21a 	.word	0x0800f21a
 800be00:	4b0b      	ldr	r3, [pc, #44]	; (800be30 <__ssvfiscanf_r+0x2ec>)
 800be02:	2b00      	cmp	r3, #0
 800be04:	f43f aec5 	beq.w	800bb92 <__ssvfiscanf_r+0x4e>
 800be08:	466b      	mov	r3, sp
 800be0a:	4622      	mov	r2, r4
 800be0c:	a941      	add	r1, sp, #260	; 0x104
 800be0e:	4630      	mov	r0, r6
 800be10:	f7fc fa3a 	bl	8008288 <_scanf_float>
 800be14:	e798      	b.n	800bd48 <__ssvfiscanf_r+0x204>
 800be16:	89a3      	ldrh	r3, [r4, #12]
 800be18:	f013 0f40 	tst.w	r3, #64	; 0x40
 800be1c:	bf18      	it	ne
 800be1e:	f04f 30ff 	movne.w	r0, #4294967295
 800be22:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800be26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be2a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800be2c:	e7f9      	b.n	800be22 <__ssvfiscanf_r+0x2de>
 800be2e:	bf00      	nop
 800be30:	08008289 	.word	0x08008289

0800be34 <__sfputc_r>:
 800be34:	6893      	ldr	r3, [r2, #8]
 800be36:	3b01      	subs	r3, #1
 800be38:	2b00      	cmp	r3, #0
 800be3a:	b410      	push	{r4}
 800be3c:	6093      	str	r3, [r2, #8]
 800be3e:	da08      	bge.n	800be52 <__sfputc_r+0x1e>
 800be40:	6994      	ldr	r4, [r2, #24]
 800be42:	42a3      	cmp	r3, r4
 800be44:	db01      	blt.n	800be4a <__sfputc_r+0x16>
 800be46:	290a      	cmp	r1, #10
 800be48:	d103      	bne.n	800be52 <__sfputc_r+0x1e>
 800be4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be4e:	f000 bbc1 	b.w	800c5d4 <__swbuf_r>
 800be52:	6813      	ldr	r3, [r2, #0]
 800be54:	1c58      	adds	r0, r3, #1
 800be56:	6010      	str	r0, [r2, #0]
 800be58:	7019      	strb	r1, [r3, #0]
 800be5a:	4608      	mov	r0, r1
 800be5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <__sfputs_r>:
 800be62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be64:	4606      	mov	r6, r0
 800be66:	460f      	mov	r7, r1
 800be68:	4614      	mov	r4, r2
 800be6a:	18d5      	adds	r5, r2, r3
 800be6c:	42ac      	cmp	r4, r5
 800be6e:	d101      	bne.n	800be74 <__sfputs_r+0x12>
 800be70:	2000      	movs	r0, #0
 800be72:	e007      	b.n	800be84 <__sfputs_r+0x22>
 800be74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be78:	463a      	mov	r2, r7
 800be7a:	4630      	mov	r0, r6
 800be7c:	f7ff ffda 	bl	800be34 <__sfputc_r>
 800be80:	1c43      	adds	r3, r0, #1
 800be82:	d1f3      	bne.n	800be6c <__sfputs_r+0xa>
 800be84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be88 <_vfiprintf_r>:
 800be88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be8c:	460d      	mov	r5, r1
 800be8e:	b09d      	sub	sp, #116	; 0x74
 800be90:	4614      	mov	r4, r2
 800be92:	4698      	mov	r8, r3
 800be94:	4606      	mov	r6, r0
 800be96:	b118      	cbz	r0, 800bea0 <_vfiprintf_r+0x18>
 800be98:	6983      	ldr	r3, [r0, #24]
 800be9a:	b90b      	cbnz	r3, 800bea0 <_vfiprintf_r+0x18>
 800be9c:	f7fe fa96 	bl	800a3cc <__sinit>
 800bea0:	4b89      	ldr	r3, [pc, #548]	; (800c0c8 <_vfiprintf_r+0x240>)
 800bea2:	429d      	cmp	r5, r3
 800bea4:	d11b      	bne.n	800bede <_vfiprintf_r+0x56>
 800bea6:	6875      	ldr	r5, [r6, #4]
 800bea8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800beaa:	07d9      	lsls	r1, r3, #31
 800beac:	d405      	bmi.n	800beba <_vfiprintf_r+0x32>
 800beae:	89ab      	ldrh	r3, [r5, #12]
 800beb0:	059a      	lsls	r2, r3, #22
 800beb2:	d402      	bmi.n	800beba <_vfiprintf_r+0x32>
 800beb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beb6:	f7fe fe9a 	bl	800abee <__retarget_lock_acquire_recursive>
 800beba:	89ab      	ldrh	r3, [r5, #12]
 800bebc:	071b      	lsls	r3, r3, #28
 800bebe:	d501      	bpl.n	800bec4 <_vfiprintf_r+0x3c>
 800bec0:	692b      	ldr	r3, [r5, #16]
 800bec2:	b9eb      	cbnz	r3, 800bf00 <_vfiprintf_r+0x78>
 800bec4:	4629      	mov	r1, r5
 800bec6:	4630      	mov	r0, r6
 800bec8:	f000 fbe4 	bl	800c694 <__swsetup_r>
 800becc:	b1c0      	cbz	r0, 800bf00 <_vfiprintf_r+0x78>
 800bece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bed0:	07dc      	lsls	r4, r3, #31
 800bed2:	d50e      	bpl.n	800bef2 <_vfiprintf_r+0x6a>
 800bed4:	f04f 30ff 	mov.w	r0, #4294967295
 800bed8:	b01d      	add	sp, #116	; 0x74
 800beda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bede:	4b7b      	ldr	r3, [pc, #492]	; (800c0cc <_vfiprintf_r+0x244>)
 800bee0:	429d      	cmp	r5, r3
 800bee2:	d101      	bne.n	800bee8 <_vfiprintf_r+0x60>
 800bee4:	68b5      	ldr	r5, [r6, #8]
 800bee6:	e7df      	b.n	800bea8 <_vfiprintf_r+0x20>
 800bee8:	4b79      	ldr	r3, [pc, #484]	; (800c0d0 <_vfiprintf_r+0x248>)
 800beea:	429d      	cmp	r5, r3
 800beec:	bf08      	it	eq
 800beee:	68f5      	ldreq	r5, [r6, #12]
 800bef0:	e7da      	b.n	800bea8 <_vfiprintf_r+0x20>
 800bef2:	89ab      	ldrh	r3, [r5, #12]
 800bef4:	0598      	lsls	r0, r3, #22
 800bef6:	d4ed      	bmi.n	800bed4 <_vfiprintf_r+0x4c>
 800bef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800befa:	f7fe fe79 	bl	800abf0 <__retarget_lock_release_recursive>
 800befe:	e7e9      	b.n	800bed4 <_vfiprintf_r+0x4c>
 800bf00:	2300      	movs	r3, #0
 800bf02:	9309      	str	r3, [sp, #36]	; 0x24
 800bf04:	2320      	movs	r3, #32
 800bf06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf0e:	2330      	movs	r3, #48	; 0x30
 800bf10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c0d4 <_vfiprintf_r+0x24c>
 800bf14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf18:	f04f 0901 	mov.w	r9, #1
 800bf1c:	4623      	mov	r3, r4
 800bf1e:	469a      	mov	sl, r3
 800bf20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf24:	b10a      	cbz	r2, 800bf2a <_vfiprintf_r+0xa2>
 800bf26:	2a25      	cmp	r2, #37	; 0x25
 800bf28:	d1f9      	bne.n	800bf1e <_vfiprintf_r+0x96>
 800bf2a:	ebba 0b04 	subs.w	fp, sl, r4
 800bf2e:	d00b      	beq.n	800bf48 <_vfiprintf_r+0xc0>
 800bf30:	465b      	mov	r3, fp
 800bf32:	4622      	mov	r2, r4
 800bf34:	4629      	mov	r1, r5
 800bf36:	4630      	mov	r0, r6
 800bf38:	f7ff ff93 	bl	800be62 <__sfputs_r>
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	f000 80aa 	beq.w	800c096 <_vfiprintf_r+0x20e>
 800bf42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf44:	445a      	add	r2, fp
 800bf46:	9209      	str	r2, [sp, #36]	; 0x24
 800bf48:	f89a 3000 	ldrb.w	r3, [sl]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	f000 80a2 	beq.w	800c096 <_vfiprintf_r+0x20e>
 800bf52:	2300      	movs	r3, #0
 800bf54:	f04f 32ff 	mov.w	r2, #4294967295
 800bf58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf5c:	f10a 0a01 	add.w	sl, sl, #1
 800bf60:	9304      	str	r3, [sp, #16]
 800bf62:	9307      	str	r3, [sp, #28]
 800bf64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf68:	931a      	str	r3, [sp, #104]	; 0x68
 800bf6a:	4654      	mov	r4, sl
 800bf6c:	2205      	movs	r2, #5
 800bf6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf72:	4858      	ldr	r0, [pc, #352]	; (800c0d4 <_vfiprintf_r+0x24c>)
 800bf74:	f7f4 f934 	bl	80001e0 <memchr>
 800bf78:	9a04      	ldr	r2, [sp, #16]
 800bf7a:	b9d8      	cbnz	r0, 800bfb4 <_vfiprintf_r+0x12c>
 800bf7c:	06d1      	lsls	r1, r2, #27
 800bf7e:	bf44      	itt	mi
 800bf80:	2320      	movmi	r3, #32
 800bf82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf86:	0713      	lsls	r3, r2, #28
 800bf88:	bf44      	itt	mi
 800bf8a:	232b      	movmi	r3, #43	; 0x2b
 800bf8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf90:	f89a 3000 	ldrb.w	r3, [sl]
 800bf94:	2b2a      	cmp	r3, #42	; 0x2a
 800bf96:	d015      	beq.n	800bfc4 <_vfiprintf_r+0x13c>
 800bf98:	9a07      	ldr	r2, [sp, #28]
 800bf9a:	4654      	mov	r4, sl
 800bf9c:	2000      	movs	r0, #0
 800bf9e:	f04f 0c0a 	mov.w	ip, #10
 800bfa2:	4621      	mov	r1, r4
 800bfa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfa8:	3b30      	subs	r3, #48	; 0x30
 800bfaa:	2b09      	cmp	r3, #9
 800bfac:	d94e      	bls.n	800c04c <_vfiprintf_r+0x1c4>
 800bfae:	b1b0      	cbz	r0, 800bfde <_vfiprintf_r+0x156>
 800bfb0:	9207      	str	r2, [sp, #28]
 800bfb2:	e014      	b.n	800bfde <_vfiprintf_r+0x156>
 800bfb4:	eba0 0308 	sub.w	r3, r0, r8
 800bfb8:	fa09 f303 	lsl.w	r3, r9, r3
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	9304      	str	r3, [sp, #16]
 800bfc0:	46a2      	mov	sl, r4
 800bfc2:	e7d2      	b.n	800bf6a <_vfiprintf_r+0xe2>
 800bfc4:	9b03      	ldr	r3, [sp, #12]
 800bfc6:	1d19      	adds	r1, r3, #4
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	9103      	str	r1, [sp, #12]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	bfbb      	ittet	lt
 800bfd0:	425b      	neglt	r3, r3
 800bfd2:	f042 0202 	orrlt.w	r2, r2, #2
 800bfd6:	9307      	strge	r3, [sp, #28]
 800bfd8:	9307      	strlt	r3, [sp, #28]
 800bfda:	bfb8      	it	lt
 800bfdc:	9204      	strlt	r2, [sp, #16]
 800bfde:	7823      	ldrb	r3, [r4, #0]
 800bfe0:	2b2e      	cmp	r3, #46	; 0x2e
 800bfe2:	d10c      	bne.n	800bffe <_vfiprintf_r+0x176>
 800bfe4:	7863      	ldrb	r3, [r4, #1]
 800bfe6:	2b2a      	cmp	r3, #42	; 0x2a
 800bfe8:	d135      	bne.n	800c056 <_vfiprintf_r+0x1ce>
 800bfea:	9b03      	ldr	r3, [sp, #12]
 800bfec:	1d1a      	adds	r2, r3, #4
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	9203      	str	r2, [sp, #12]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	bfb8      	it	lt
 800bff6:	f04f 33ff 	movlt.w	r3, #4294967295
 800bffa:	3402      	adds	r4, #2
 800bffc:	9305      	str	r3, [sp, #20]
 800bffe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c0e4 <_vfiprintf_r+0x25c>
 800c002:	7821      	ldrb	r1, [r4, #0]
 800c004:	2203      	movs	r2, #3
 800c006:	4650      	mov	r0, sl
 800c008:	f7f4 f8ea 	bl	80001e0 <memchr>
 800c00c:	b140      	cbz	r0, 800c020 <_vfiprintf_r+0x198>
 800c00e:	2340      	movs	r3, #64	; 0x40
 800c010:	eba0 000a 	sub.w	r0, r0, sl
 800c014:	fa03 f000 	lsl.w	r0, r3, r0
 800c018:	9b04      	ldr	r3, [sp, #16]
 800c01a:	4303      	orrs	r3, r0
 800c01c:	3401      	adds	r4, #1
 800c01e:	9304      	str	r3, [sp, #16]
 800c020:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c024:	482c      	ldr	r0, [pc, #176]	; (800c0d8 <_vfiprintf_r+0x250>)
 800c026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c02a:	2206      	movs	r2, #6
 800c02c:	f7f4 f8d8 	bl	80001e0 <memchr>
 800c030:	2800      	cmp	r0, #0
 800c032:	d03f      	beq.n	800c0b4 <_vfiprintf_r+0x22c>
 800c034:	4b29      	ldr	r3, [pc, #164]	; (800c0dc <_vfiprintf_r+0x254>)
 800c036:	bb1b      	cbnz	r3, 800c080 <_vfiprintf_r+0x1f8>
 800c038:	9b03      	ldr	r3, [sp, #12]
 800c03a:	3307      	adds	r3, #7
 800c03c:	f023 0307 	bic.w	r3, r3, #7
 800c040:	3308      	adds	r3, #8
 800c042:	9303      	str	r3, [sp, #12]
 800c044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c046:	443b      	add	r3, r7
 800c048:	9309      	str	r3, [sp, #36]	; 0x24
 800c04a:	e767      	b.n	800bf1c <_vfiprintf_r+0x94>
 800c04c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c050:	460c      	mov	r4, r1
 800c052:	2001      	movs	r0, #1
 800c054:	e7a5      	b.n	800bfa2 <_vfiprintf_r+0x11a>
 800c056:	2300      	movs	r3, #0
 800c058:	3401      	adds	r4, #1
 800c05a:	9305      	str	r3, [sp, #20]
 800c05c:	4619      	mov	r1, r3
 800c05e:	f04f 0c0a 	mov.w	ip, #10
 800c062:	4620      	mov	r0, r4
 800c064:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c068:	3a30      	subs	r2, #48	; 0x30
 800c06a:	2a09      	cmp	r2, #9
 800c06c:	d903      	bls.n	800c076 <_vfiprintf_r+0x1ee>
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d0c5      	beq.n	800bffe <_vfiprintf_r+0x176>
 800c072:	9105      	str	r1, [sp, #20]
 800c074:	e7c3      	b.n	800bffe <_vfiprintf_r+0x176>
 800c076:	fb0c 2101 	mla	r1, ip, r1, r2
 800c07a:	4604      	mov	r4, r0
 800c07c:	2301      	movs	r3, #1
 800c07e:	e7f0      	b.n	800c062 <_vfiprintf_r+0x1da>
 800c080:	ab03      	add	r3, sp, #12
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	462a      	mov	r2, r5
 800c086:	4b16      	ldr	r3, [pc, #88]	; (800c0e0 <_vfiprintf_r+0x258>)
 800c088:	a904      	add	r1, sp, #16
 800c08a:	4630      	mov	r0, r6
 800c08c:	f7fb fd32 	bl	8007af4 <_printf_float>
 800c090:	4607      	mov	r7, r0
 800c092:	1c78      	adds	r0, r7, #1
 800c094:	d1d6      	bne.n	800c044 <_vfiprintf_r+0x1bc>
 800c096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c098:	07d9      	lsls	r1, r3, #31
 800c09a:	d405      	bmi.n	800c0a8 <_vfiprintf_r+0x220>
 800c09c:	89ab      	ldrh	r3, [r5, #12]
 800c09e:	059a      	lsls	r2, r3, #22
 800c0a0:	d402      	bmi.n	800c0a8 <_vfiprintf_r+0x220>
 800c0a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0a4:	f7fe fda4 	bl	800abf0 <__retarget_lock_release_recursive>
 800c0a8:	89ab      	ldrh	r3, [r5, #12]
 800c0aa:	065b      	lsls	r3, r3, #25
 800c0ac:	f53f af12 	bmi.w	800bed4 <_vfiprintf_r+0x4c>
 800c0b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0b2:	e711      	b.n	800bed8 <_vfiprintf_r+0x50>
 800c0b4:	ab03      	add	r3, sp, #12
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	462a      	mov	r2, r5
 800c0ba:	4b09      	ldr	r3, [pc, #36]	; (800c0e0 <_vfiprintf_r+0x258>)
 800c0bc:	a904      	add	r1, sp, #16
 800c0be:	4630      	mov	r0, r6
 800c0c0:	f7fb ffbc 	bl	800803c <_printf_i>
 800c0c4:	e7e4      	b.n	800c090 <_vfiprintf_r+0x208>
 800c0c6:	bf00      	nop
 800c0c8:	0800f000 	.word	0x0800f000
 800c0cc:	0800f020 	.word	0x0800f020
 800c0d0:	0800efe0 	.word	0x0800efe0
 800c0d4:	0800f214 	.word	0x0800f214
 800c0d8:	0800f21e 	.word	0x0800f21e
 800c0dc:	08007af5 	.word	0x08007af5
 800c0e0:	0800be63 	.word	0x0800be63
 800c0e4:	0800f21a 	.word	0x0800f21a

0800c0e8 <_scanf_chars>:
 800c0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0ec:	4615      	mov	r5, r2
 800c0ee:	688a      	ldr	r2, [r1, #8]
 800c0f0:	4680      	mov	r8, r0
 800c0f2:	460c      	mov	r4, r1
 800c0f4:	b932      	cbnz	r2, 800c104 <_scanf_chars+0x1c>
 800c0f6:	698a      	ldr	r2, [r1, #24]
 800c0f8:	2a00      	cmp	r2, #0
 800c0fa:	bf0c      	ite	eq
 800c0fc:	2201      	moveq	r2, #1
 800c0fe:	f04f 32ff 	movne.w	r2, #4294967295
 800c102:	608a      	str	r2, [r1, #8]
 800c104:	6822      	ldr	r2, [r4, #0]
 800c106:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c198 <_scanf_chars+0xb0>
 800c10a:	06d1      	lsls	r1, r2, #27
 800c10c:	bf5f      	itttt	pl
 800c10e:	681a      	ldrpl	r2, [r3, #0]
 800c110:	1d11      	addpl	r1, r2, #4
 800c112:	6019      	strpl	r1, [r3, #0]
 800c114:	6816      	ldrpl	r6, [r2, #0]
 800c116:	2700      	movs	r7, #0
 800c118:	69a0      	ldr	r0, [r4, #24]
 800c11a:	b188      	cbz	r0, 800c140 <_scanf_chars+0x58>
 800c11c:	2801      	cmp	r0, #1
 800c11e:	d107      	bne.n	800c130 <_scanf_chars+0x48>
 800c120:	682a      	ldr	r2, [r5, #0]
 800c122:	7811      	ldrb	r1, [r2, #0]
 800c124:	6962      	ldr	r2, [r4, #20]
 800c126:	5c52      	ldrb	r2, [r2, r1]
 800c128:	b952      	cbnz	r2, 800c140 <_scanf_chars+0x58>
 800c12a:	2f00      	cmp	r7, #0
 800c12c:	d031      	beq.n	800c192 <_scanf_chars+0xaa>
 800c12e:	e022      	b.n	800c176 <_scanf_chars+0x8e>
 800c130:	2802      	cmp	r0, #2
 800c132:	d120      	bne.n	800c176 <_scanf_chars+0x8e>
 800c134:	682b      	ldr	r3, [r5, #0]
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c13c:	071b      	lsls	r3, r3, #28
 800c13e:	d41a      	bmi.n	800c176 <_scanf_chars+0x8e>
 800c140:	6823      	ldr	r3, [r4, #0]
 800c142:	06da      	lsls	r2, r3, #27
 800c144:	bf5e      	ittt	pl
 800c146:	682b      	ldrpl	r3, [r5, #0]
 800c148:	781b      	ldrbpl	r3, [r3, #0]
 800c14a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c14e:	682a      	ldr	r2, [r5, #0]
 800c150:	686b      	ldr	r3, [r5, #4]
 800c152:	3201      	adds	r2, #1
 800c154:	602a      	str	r2, [r5, #0]
 800c156:	68a2      	ldr	r2, [r4, #8]
 800c158:	3b01      	subs	r3, #1
 800c15a:	3a01      	subs	r2, #1
 800c15c:	606b      	str	r3, [r5, #4]
 800c15e:	3701      	adds	r7, #1
 800c160:	60a2      	str	r2, [r4, #8]
 800c162:	b142      	cbz	r2, 800c176 <_scanf_chars+0x8e>
 800c164:	2b00      	cmp	r3, #0
 800c166:	dcd7      	bgt.n	800c118 <_scanf_chars+0x30>
 800c168:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c16c:	4629      	mov	r1, r5
 800c16e:	4640      	mov	r0, r8
 800c170:	4798      	blx	r3
 800c172:	2800      	cmp	r0, #0
 800c174:	d0d0      	beq.n	800c118 <_scanf_chars+0x30>
 800c176:	6823      	ldr	r3, [r4, #0]
 800c178:	f013 0310 	ands.w	r3, r3, #16
 800c17c:	d105      	bne.n	800c18a <_scanf_chars+0xa2>
 800c17e:	68e2      	ldr	r2, [r4, #12]
 800c180:	3201      	adds	r2, #1
 800c182:	60e2      	str	r2, [r4, #12]
 800c184:	69a2      	ldr	r2, [r4, #24]
 800c186:	b102      	cbz	r2, 800c18a <_scanf_chars+0xa2>
 800c188:	7033      	strb	r3, [r6, #0]
 800c18a:	6923      	ldr	r3, [r4, #16]
 800c18c:	443b      	add	r3, r7
 800c18e:	6123      	str	r3, [r4, #16]
 800c190:	2000      	movs	r0, #0
 800c192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c196:	bf00      	nop
 800c198:	0800ee4e 	.word	0x0800ee4e

0800c19c <_scanf_i>:
 800c19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a0:	4698      	mov	r8, r3
 800c1a2:	4b76      	ldr	r3, [pc, #472]	; (800c37c <_scanf_i+0x1e0>)
 800c1a4:	460c      	mov	r4, r1
 800c1a6:	4682      	mov	sl, r0
 800c1a8:	4616      	mov	r6, r2
 800c1aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c1ae:	b087      	sub	sp, #28
 800c1b0:	ab03      	add	r3, sp, #12
 800c1b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c1b6:	4b72      	ldr	r3, [pc, #456]	; (800c380 <_scanf_i+0x1e4>)
 800c1b8:	69a1      	ldr	r1, [r4, #24]
 800c1ba:	4a72      	ldr	r2, [pc, #456]	; (800c384 <_scanf_i+0x1e8>)
 800c1bc:	2903      	cmp	r1, #3
 800c1be:	bf18      	it	ne
 800c1c0:	461a      	movne	r2, r3
 800c1c2:	68a3      	ldr	r3, [r4, #8]
 800c1c4:	9201      	str	r2, [sp, #4]
 800c1c6:	1e5a      	subs	r2, r3, #1
 800c1c8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c1cc:	bf88      	it	hi
 800c1ce:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c1d2:	4627      	mov	r7, r4
 800c1d4:	bf82      	ittt	hi
 800c1d6:	eb03 0905 	addhi.w	r9, r3, r5
 800c1da:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c1de:	60a3      	strhi	r3, [r4, #8]
 800c1e0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c1e4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c1e8:	bf98      	it	ls
 800c1ea:	f04f 0900 	movls.w	r9, #0
 800c1ee:	6023      	str	r3, [r4, #0]
 800c1f0:	463d      	mov	r5, r7
 800c1f2:	f04f 0b00 	mov.w	fp, #0
 800c1f6:	6831      	ldr	r1, [r6, #0]
 800c1f8:	ab03      	add	r3, sp, #12
 800c1fa:	7809      	ldrb	r1, [r1, #0]
 800c1fc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c200:	2202      	movs	r2, #2
 800c202:	f7f3 ffed 	bl	80001e0 <memchr>
 800c206:	b328      	cbz	r0, 800c254 <_scanf_i+0xb8>
 800c208:	f1bb 0f01 	cmp.w	fp, #1
 800c20c:	d159      	bne.n	800c2c2 <_scanf_i+0x126>
 800c20e:	6862      	ldr	r2, [r4, #4]
 800c210:	b92a      	cbnz	r2, 800c21e <_scanf_i+0x82>
 800c212:	6822      	ldr	r2, [r4, #0]
 800c214:	2308      	movs	r3, #8
 800c216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c21a:	6063      	str	r3, [r4, #4]
 800c21c:	6022      	str	r2, [r4, #0]
 800c21e:	6822      	ldr	r2, [r4, #0]
 800c220:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c224:	6022      	str	r2, [r4, #0]
 800c226:	68a2      	ldr	r2, [r4, #8]
 800c228:	1e51      	subs	r1, r2, #1
 800c22a:	60a1      	str	r1, [r4, #8]
 800c22c:	b192      	cbz	r2, 800c254 <_scanf_i+0xb8>
 800c22e:	6832      	ldr	r2, [r6, #0]
 800c230:	1c51      	adds	r1, r2, #1
 800c232:	6031      	str	r1, [r6, #0]
 800c234:	7812      	ldrb	r2, [r2, #0]
 800c236:	f805 2b01 	strb.w	r2, [r5], #1
 800c23a:	6872      	ldr	r2, [r6, #4]
 800c23c:	3a01      	subs	r2, #1
 800c23e:	2a00      	cmp	r2, #0
 800c240:	6072      	str	r2, [r6, #4]
 800c242:	dc07      	bgt.n	800c254 <_scanf_i+0xb8>
 800c244:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c248:	4631      	mov	r1, r6
 800c24a:	4650      	mov	r0, sl
 800c24c:	4790      	blx	r2
 800c24e:	2800      	cmp	r0, #0
 800c250:	f040 8085 	bne.w	800c35e <_scanf_i+0x1c2>
 800c254:	f10b 0b01 	add.w	fp, fp, #1
 800c258:	f1bb 0f03 	cmp.w	fp, #3
 800c25c:	d1cb      	bne.n	800c1f6 <_scanf_i+0x5a>
 800c25e:	6863      	ldr	r3, [r4, #4]
 800c260:	b90b      	cbnz	r3, 800c266 <_scanf_i+0xca>
 800c262:	230a      	movs	r3, #10
 800c264:	6063      	str	r3, [r4, #4]
 800c266:	6863      	ldr	r3, [r4, #4]
 800c268:	4947      	ldr	r1, [pc, #284]	; (800c388 <_scanf_i+0x1ec>)
 800c26a:	6960      	ldr	r0, [r4, #20]
 800c26c:	1ac9      	subs	r1, r1, r3
 800c26e:	f000 f8b7 	bl	800c3e0 <__sccl>
 800c272:	f04f 0b00 	mov.w	fp, #0
 800c276:	68a3      	ldr	r3, [r4, #8]
 800c278:	6822      	ldr	r2, [r4, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d03d      	beq.n	800c2fa <_scanf_i+0x15e>
 800c27e:	6831      	ldr	r1, [r6, #0]
 800c280:	6960      	ldr	r0, [r4, #20]
 800c282:	f891 c000 	ldrb.w	ip, [r1]
 800c286:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c28a:	2800      	cmp	r0, #0
 800c28c:	d035      	beq.n	800c2fa <_scanf_i+0x15e>
 800c28e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c292:	d124      	bne.n	800c2de <_scanf_i+0x142>
 800c294:	0510      	lsls	r0, r2, #20
 800c296:	d522      	bpl.n	800c2de <_scanf_i+0x142>
 800c298:	f10b 0b01 	add.w	fp, fp, #1
 800c29c:	f1b9 0f00 	cmp.w	r9, #0
 800c2a0:	d003      	beq.n	800c2aa <_scanf_i+0x10e>
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	f109 39ff 	add.w	r9, r9, #4294967295
 800c2a8:	60a3      	str	r3, [r4, #8]
 800c2aa:	6873      	ldr	r3, [r6, #4]
 800c2ac:	3b01      	subs	r3, #1
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	6073      	str	r3, [r6, #4]
 800c2b2:	dd1b      	ble.n	800c2ec <_scanf_i+0x150>
 800c2b4:	6833      	ldr	r3, [r6, #0]
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	6033      	str	r3, [r6, #0]
 800c2ba:	68a3      	ldr	r3, [r4, #8]
 800c2bc:	3b01      	subs	r3, #1
 800c2be:	60a3      	str	r3, [r4, #8]
 800c2c0:	e7d9      	b.n	800c276 <_scanf_i+0xda>
 800c2c2:	f1bb 0f02 	cmp.w	fp, #2
 800c2c6:	d1ae      	bne.n	800c226 <_scanf_i+0x8a>
 800c2c8:	6822      	ldr	r2, [r4, #0]
 800c2ca:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c2ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c2d2:	d1bf      	bne.n	800c254 <_scanf_i+0xb8>
 800c2d4:	2310      	movs	r3, #16
 800c2d6:	6063      	str	r3, [r4, #4]
 800c2d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2dc:	e7a2      	b.n	800c224 <_scanf_i+0x88>
 800c2de:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c2e2:	6022      	str	r2, [r4, #0]
 800c2e4:	780b      	ldrb	r3, [r1, #0]
 800c2e6:	f805 3b01 	strb.w	r3, [r5], #1
 800c2ea:	e7de      	b.n	800c2aa <_scanf_i+0x10e>
 800c2ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c2f0:	4631      	mov	r1, r6
 800c2f2:	4650      	mov	r0, sl
 800c2f4:	4798      	blx	r3
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	d0df      	beq.n	800c2ba <_scanf_i+0x11e>
 800c2fa:	6823      	ldr	r3, [r4, #0]
 800c2fc:	05db      	lsls	r3, r3, #23
 800c2fe:	d50d      	bpl.n	800c31c <_scanf_i+0x180>
 800c300:	42bd      	cmp	r5, r7
 800c302:	d909      	bls.n	800c318 <_scanf_i+0x17c>
 800c304:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c308:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c30c:	4632      	mov	r2, r6
 800c30e:	4650      	mov	r0, sl
 800c310:	4798      	blx	r3
 800c312:	f105 39ff 	add.w	r9, r5, #4294967295
 800c316:	464d      	mov	r5, r9
 800c318:	42bd      	cmp	r5, r7
 800c31a:	d02d      	beq.n	800c378 <_scanf_i+0x1dc>
 800c31c:	6822      	ldr	r2, [r4, #0]
 800c31e:	f012 0210 	ands.w	r2, r2, #16
 800c322:	d113      	bne.n	800c34c <_scanf_i+0x1b0>
 800c324:	702a      	strb	r2, [r5, #0]
 800c326:	6863      	ldr	r3, [r4, #4]
 800c328:	9e01      	ldr	r6, [sp, #4]
 800c32a:	4639      	mov	r1, r7
 800c32c:	4650      	mov	r0, sl
 800c32e:	47b0      	blx	r6
 800c330:	6821      	ldr	r1, [r4, #0]
 800c332:	f8d8 3000 	ldr.w	r3, [r8]
 800c336:	f011 0f20 	tst.w	r1, #32
 800c33a:	d013      	beq.n	800c364 <_scanf_i+0x1c8>
 800c33c:	1d1a      	adds	r2, r3, #4
 800c33e:	f8c8 2000 	str.w	r2, [r8]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	6018      	str	r0, [r3, #0]
 800c346:	68e3      	ldr	r3, [r4, #12]
 800c348:	3301      	adds	r3, #1
 800c34a:	60e3      	str	r3, [r4, #12]
 800c34c:	1bed      	subs	r5, r5, r7
 800c34e:	44ab      	add	fp, r5
 800c350:	6925      	ldr	r5, [r4, #16]
 800c352:	445d      	add	r5, fp
 800c354:	6125      	str	r5, [r4, #16]
 800c356:	2000      	movs	r0, #0
 800c358:	b007      	add	sp, #28
 800c35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c35e:	f04f 0b00 	mov.w	fp, #0
 800c362:	e7ca      	b.n	800c2fa <_scanf_i+0x15e>
 800c364:	1d1a      	adds	r2, r3, #4
 800c366:	f8c8 2000 	str.w	r2, [r8]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f011 0f01 	tst.w	r1, #1
 800c370:	bf14      	ite	ne
 800c372:	8018      	strhne	r0, [r3, #0]
 800c374:	6018      	streq	r0, [r3, #0]
 800c376:	e7e6      	b.n	800c346 <_scanf_i+0x1aa>
 800c378:	2001      	movs	r0, #1
 800c37a:	e7ed      	b.n	800c358 <_scanf_i+0x1bc>
 800c37c:	0800cca0 	.word	0x0800cca0
 800c380:	0800c55d 	.word	0x0800c55d
 800c384:	0800955d 	.word	0x0800955d
 800c388:	0800f23e 	.word	0x0800f23e

0800c38c <_read_r>:
 800c38c:	b538      	push	{r3, r4, r5, lr}
 800c38e:	4d07      	ldr	r5, [pc, #28]	; (800c3ac <_read_r+0x20>)
 800c390:	4604      	mov	r4, r0
 800c392:	4608      	mov	r0, r1
 800c394:	4611      	mov	r1, r2
 800c396:	2200      	movs	r2, #0
 800c398:	602a      	str	r2, [r5, #0]
 800c39a:	461a      	mov	r2, r3
 800c39c:	f7f5 fec6 	bl	800212c <_read>
 800c3a0:	1c43      	adds	r3, r0, #1
 800c3a2:	d102      	bne.n	800c3aa <_read_r+0x1e>
 800c3a4:	682b      	ldr	r3, [r5, #0]
 800c3a6:	b103      	cbz	r3, 800c3aa <_read_r+0x1e>
 800c3a8:	6023      	str	r3, [r4, #0]
 800c3aa:	bd38      	pop	{r3, r4, r5, pc}
 800c3ac:	20000924 	.word	0x20000924

0800c3b0 <nan>:
 800c3b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c3b8 <nan+0x8>
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop
 800c3b8:	00000000 	.word	0x00000000
 800c3bc:	7ff80000 	.word	0x7ff80000

0800c3c0 <_sbrk_r>:
 800c3c0:	b538      	push	{r3, r4, r5, lr}
 800c3c2:	4d06      	ldr	r5, [pc, #24]	; (800c3dc <_sbrk_r+0x1c>)
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	4608      	mov	r0, r1
 800c3ca:	602b      	str	r3, [r5, #0]
 800c3cc:	f7f5 ff1c 	bl	8002208 <_sbrk>
 800c3d0:	1c43      	adds	r3, r0, #1
 800c3d2:	d102      	bne.n	800c3da <_sbrk_r+0x1a>
 800c3d4:	682b      	ldr	r3, [r5, #0]
 800c3d6:	b103      	cbz	r3, 800c3da <_sbrk_r+0x1a>
 800c3d8:	6023      	str	r3, [r4, #0]
 800c3da:	bd38      	pop	{r3, r4, r5, pc}
 800c3dc:	20000924 	.word	0x20000924

0800c3e0 <__sccl>:
 800c3e0:	b570      	push	{r4, r5, r6, lr}
 800c3e2:	780b      	ldrb	r3, [r1, #0]
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	2b5e      	cmp	r3, #94	; 0x5e
 800c3e8:	bf0b      	itete	eq
 800c3ea:	784b      	ldrbeq	r3, [r1, #1]
 800c3ec:	1c48      	addne	r0, r1, #1
 800c3ee:	1c88      	addeq	r0, r1, #2
 800c3f0:	2200      	movne	r2, #0
 800c3f2:	bf08      	it	eq
 800c3f4:	2201      	moveq	r2, #1
 800c3f6:	1e61      	subs	r1, r4, #1
 800c3f8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c3fc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c400:	42a9      	cmp	r1, r5
 800c402:	d1fb      	bne.n	800c3fc <__sccl+0x1c>
 800c404:	b90b      	cbnz	r3, 800c40a <__sccl+0x2a>
 800c406:	3801      	subs	r0, #1
 800c408:	bd70      	pop	{r4, r5, r6, pc}
 800c40a:	f082 0201 	eor.w	r2, r2, #1
 800c40e:	54e2      	strb	r2, [r4, r3]
 800c410:	4605      	mov	r5, r0
 800c412:	4628      	mov	r0, r5
 800c414:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c418:	292d      	cmp	r1, #45	; 0x2d
 800c41a:	d006      	beq.n	800c42a <__sccl+0x4a>
 800c41c:	295d      	cmp	r1, #93	; 0x5d
 800c41e:	d0f3      	beq.n	800c408 <__sccl+0x28>
 800c420:	b909      	cbnz	r1, 800c426 <__sccl+0x46>
 800c422:	4628      	mov	r0, r5
 800c424:	e7f0      	b.n	800c408 <__sccl+0x28>
 800c426:	460b      	mov	r3, r1
 800c428:	e7f1      	b.n	800c40e <__sccl+0x2e>
 800c42a:	786e      	ldrb	r6, [r5, #1]
 800c42c:	2e5d      	cmp	r6, #93	; 0x5d
 800c42e:	d0fa      	beq.n	800c426 <__sccl+0x46>
 800c430:	42b3      	cmp	r3, r6
 800c432:	dcf8      	bgt.n	800c426 <__sccl+0x46>
 800c434:	3502      	adds	r5, #2
 800c436:	4619      	mov	r1, r3
 800c438:	3101      	adds	r1, #1
 800c43a:	428e      	cmp	r6, r1
 800c43c:	5462      	strb	r2, [r4, r1]
 800c43e:	dcfb      	bgt.n	800c438 <__sccl+0x58>
 800c440:	1af1      	subs	r1, r6, r3
 800c442:	3901      	subs	r1, #1
 800c444:	1c58      	adds	r0, r3, #1
 800c446:	42b3      	cmp	r3, r6
 800c448:	bfa8      	it	ge
 800c44a:	2100      	movge	r1, #0
 800c44c:	1843      	adds	r3, r0, r1
 800c44e:	e7e0      	b.n	800c412 <__sccl+0x32>

0800c450 <strncmp>:
 800c450:	b510      	push	{r4, lr}
 800c452:	b17a      	cbz	r2, 800c474 <strncmp+0x24>
 800c454:	4603      	mov	r3, r0
 800c456:	3901      	subs	r1, #1
 800c458:	1884      	adds	r4, r0, r2
 800c45a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c45e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c462:	4290      	cmp	r0, r2
 800c464:	d101      	bne.n	800c46a <strncmp+0x1a>
 800c466:	42a3      	cmp	r3, r4
 800c468:	d101      	bne.n	800c46e <strncmp+0x1e>
 800c46a:	1a80      	subs	r0, r0, r2
 800c46c:	bd10      	pop	{r4, pc}
 800c46e:	2800      	cmp	r0, #0
 800c470:	d1f3      	bne.n	800c45a <strncmp+0xa>
 800c472:	e7fa      	b.n	800c46a <strncmp+0x1a>
 800c474:	4610      	mov	r0, r2
 800c476:	e7f9      	b.n	800c46c <strncmp+0x1c>

0800c478 <_strtoul_l.constprop.0>:
 800c478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c47c:	4f36      	ldr	r7, [pc, #216]	; (800c558 <_strtoul_l.constprop.0+0xe0>)
 800c47e:	4686      	mov	lr, r0
 800c480:	460d      	mov	r5, r1
 800c482:	4628      	mov	r0, r5
 800c484:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c488:	5de6      	ldrb	r6, [r4, r7]
 800c48a:	f016 0608 	ands.w	r6, r6, #8
 800c48e:	d1f8      	bne.n	800c482 <_strtoul_l.constprop.0+0xa>
 800c490:	2c2d      	cmp	r4, #45	; 0x2d
 800c492:	d12f      	bne.n	800c4f4 <_strtoul_l.constprop.0+0x7c>
 800c494:	782c      	ldrb	r4, [r5, #0]
 800c496:	2601      	movs	r6, #1
 800c498:	1c85      	adds	r5, r0, #2
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d057      	beq.n	800c54e <_strtoul_l.constprop.0+0xd6>
 800c49e:	2b10      	cmp	r3, #16
 800c4a0:	d109      	bne.n	800c4b6 <_strtoul_l.constprop.0+0x3e>
 800c4a2:	2c30      	cmp	r4, #48	; 0x30
 800c4a4:	d107      	bne.n	800c4b6 <_strtoul_l.constprop.0+0x3e>
 800c4a6:	7828      	ldrb	r0, [r5, #0]
 800c4a8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c4ac:	2858      	cmp	r0, #88	; 0x58
 800c4ae:	d149      	bne.n	800c544 <_strtoul_l.constprop.0+0xcc>
 800c4b0:	786c      	ldrb	r4, [r5, #1]
 800c4b2:	2310      	movs	r3, #16
 800c4b4:	3502      	adds	r5, #2
 800c4b6:	f04f 38ff 	mov.w	r8, #4294967295
 800c4ba:	2700      	movs	r7, #0
 800c4bc:	fbb8 f8f3 	udiv	r8, r8, r3
 800c4c0:	fb03 f908 	mul.w	r9, r3, r8
 800c4c4:	ea6f 0909 	mvn.w	r9, r9
 800c4c8:	4638      	mov	r0, r7
 800c4ca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c4ce:	f1bc 0f09 	cmp.w	ip, #9
 800c4d2:	d814      	bhi.n	800c4fe <_strtoul_l.constprop.0+0x86>
 800c4d4:	4664      	mov	r4, ip
 800c4d6:	42a3      	cmp	r3, r4
 800c4d8:	dd22      	ble.n	800c520 <_strtoul_l.constprop.0+0xa8>
 800c4da:	2f00      	cmp	r7, #0
 800c4dc:	db1d      	blt.n	800c51a <_strtoul_l.constprop.0+0xa2>
 800c4de:	4580      	cmp	r8, r0
 800c4e0:	d31b      	bcc.n	800c51a <_strtoul_l.constprop.0+0xa2>
 800c4e2:	d101      	bne.n	800c4e8 <_strtoul_l.constprop.0+0x70>
 800c4e4:	45a1      	cmp	r9, r4
 800c4e6:	db18      	blt.n	800c51a <_strtoul_l.constprop.0+0xa2>
 800c4e8:	fb00 4003 	mla	r0, r0, r3, r4
 800c4ec:	2701      	movs	r7, #1
 800c4ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4f2:	e7ea      	b.n	800c4ca <_strtoul_l.constprop.0+0x52>
 800c4f4:	2c2b      	cmp	r4, #43	; 0x2b
 800c4f6:	bf04      	itt	eq
 800c4f8:	782c      	ldrbeq	r4, [r5, #0]
 800c4fa:	1c85      	addeq	r5, r0, #2
 800c4fc:	e7cd      	b.n	800c49a <_strtoul_l.constprop.0+0x22>
 800c4fe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c502:	f1bc 0f19 	cmp.w	ip, #25
 800c506:	d801      	bhi.n	800c50c <_strtoul_l.constprop.0+0x94>
 800c508:	3c37      	subs	r4, #55	; 0x37
 800c50a:	e7e4      	b.n	800c4d6 <_strtoul_l.constprop.0+0x5e>
 800c50c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c510:	f1bc 0f19 	cmp.w	ip, #25
 800c514:	d804      	bhi.n	800c520 <_strtoul_l.constprop.0+0xa8>
 800c516:	3c57      	subs	r4, #87	; 0x57
 800c518:	e7dd      	b.n	800c4d6 <_strtoul_l.constprop.0+0x5e>
 800c51a:	f04f 37ff 	mov.w	r7, #4294967295
 800c51e:	e7e6      	b.n	800c4ee <_strtoul_l.constprop.0+0x76>
 800c520:	2f00      	cmp	r7, #0
 800c522:	da07      	bge.n	800c534 <_strtoul_l.constprop.0+0xbc>
 800c524:	2322      	movs	r3, #34	; 0x22
 800c526:	f8ce 3000 	str.w	r3, [lr]
 800c52a:	f04f 30ff 	mov.w	r0, #4294967295
 800c52e:	b932      	cbnz	r2, 800c53e <_strtoul_l.constprop.0+0xc6>
 800c530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c534:	b106      	cbz	r6, 800c538 <_strtoul_l.constprop.0+0xc0>
 800c536:	4240      	negs	r0, r0
 800c538:	2a00      	cmp	r2, #0
 800c53a:	d0f9      	beq.n	800c530 <_strtoul_l.constprop.0+0xb8>
 800c53c:	b107      	cbz	r7, 800c540 <_strtoul_l.constprop.0+0xc8>
 800c53e:	1e69      	subs	r1, r5, #1
 800c540:	6011      	str	r1, [r2, #0]
 800c542:	e7f5      	b.n	800c530 <_strtoul_l.constprop.0+0xb8>
 800c544:	2430      	movs	r4, #48	; 0x30
 800c546:	2b00      	cmp	r3, #0
 800c548:	d1b5      	bne.n	800c4b6 <_strtoul_l.constprop.0+0x3e>
 800c54a:	2308      	movs	r3, #8
 800c54c:	e7b3      	b.n	800c4b6 <_strtoul_l.constprop.0+0x3e>
 800c54e:	2c30      	cmp	r4, #48	; 0x30
 800c550:	d0a9      	beq.n	800c4a6 <_strtoul_l.constprop.0+0x2e>
 800c552:	230a      	movs	r3, #10
 800c554:	e7af      	b.n	800c4b6 <_strtoul_l.constprop.0+0x3e>
 800c556:	bf00      	nop
 800c558:	0800ee4e 	.word	0x0800ee4e

0800c55c <_strtoul_r>:
 800c55c:	f7ff bf8c 	b.w	800c478 <_strtoul_l.constprop.0>

0800c560 <__submore>:
 800c560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c564:	460c      	mov	r4, r1
 800c566:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c56c:	4299      	cmp	r1, r3
 800c56e:	d11d      	bne.n	800c5ac <__submore+0x4c>
 800c570:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c574:	f7ff f8bc 	bl	800b6f0 <_malloc_r>
 800c578:	b918      	cbnz	r0, 800c582 <__submore+0x22>
 800c57a:	f04f 30ff 	mov.w	r0, #4294967295
 800c57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c586:	63a3      	str	r3, [r4, #56]	; 0x38
 800c588:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c58c:	6360      	str	r0, [r4, #52]	; 0x34
 800c58e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c592:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c596:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c59a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c59e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c5a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c5a6:	6020      	str	r0, [r4, #0]
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	e7e8      	b.n	800c57e <__submore+0x1e>
 800c5ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c5ae:	0077      	lsls	r7, r6, #1
 800c5b0:	463a      	mov	r2, r7
 800c5b2:	f000 fa5b 	bl	800ca6c <_realloc_r>
 800c5b6:	4605      	mov	r5, r0
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d0de      	beq.n	800c57a <__submore+0x1a>
 800c5bc:	eb00 0806 	add.w	r8, r0, r6
 800c5c0:	4601      	mov	r1, r0
 800c5c2:	4632      	mov	r2, r6
 800c5c4:	4640      	mov	r0, r8
 800c5c6:	f7fe fb41 	bl	800ac4c <memcpy>
 800c5ca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c5ce:	f8c4 8000 	str.w	r8, [r4]
 800c5d2:	e7e9      	b.n	800c5a8 <__submore+0x48>

0800c5d4 <__swbuf_r>:
 800c5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5d6:	460e      	mov	r6, r1
 800c5d8:	4614      	mov	r4, r2
 800c5da:	4605      	mov	r5, r0
 800c5dc:	b118      	cbz	r0, 800c5e6 <__swbuf_r+0x12>
 800c5de:	6983      	ldr	r3, [r0, #24]
 800c5e0:	b90b      	cbnz	r3, 800c5e6 <__swbuf_r+0x12>
 800c5e2:	f7fd fef3 	bl	800a3cc <__sinit>
 800c5e6:	4b21      	ldr	r3, [pc, #132]	; (800c66c <__swbuf_r+0x98>)
 800c5e8:	429c      	cmp	r4, r3
 800c5ea:	d12b      	bne.n	800c644 <__swbuf_r+0x70>
 800c5ec:	686c      	ldr	r4, [r5, #4]
 800c5ee:	69a3      	ldr	r3, [r4, #24]
 800c5f0:	60a3      	str	r3, [r4, #8]
 800c5f2:	89a3      	ldrh	r3, [r4, #12]
 800c5f4:	071a      	lsls	r2, r3, #28
 800c5f6:	d52f      	bpl.n	800c658 <__swbuf_r+0x84>
 800c5f8:	6923      	ldr	r3, [r4, #16]
 800c5fa:	b36b      	cbz	r3, 800c658 <__swbuf_r+0x84>
 800c5fc:	6923      	ldr	r3, [r4, #16]
 800c5fe:	6820      	ldr	r0, [r4, #0]
 800c600:	1ac0      	subs	r0, r0, r3
 800c602:	6963      	ldr	r3, [r4, #20]
 800c604:	b2f6      	uxtb	r6, r6
 800c606:	4283      	cmp	r3, r0
 800c608:	4637      	mov	r7, r6
 800c60a:	dc04      	bgt.n	800c616 <__swbuf_r+0x42>
 800c60c:	4621      	mov	r1, r4
 800c60e:	4628      	mov	r0, r5
 800c610:	f000 f952 	bl	800c8b8 <_fflush_r>
 800c614:	bb30      	cbnz	r0, 800c664 <__swbuf_r+0x90>
 800c616:	68a3      	ldr	r3, [r4, #8]
 800c618:	3b01      	subs	r3, #1
 800c61a:	60a3      	str	r3, [r4, #8]
 800c61c:	6823      	ldr	r3, [r4, #0]
 800c61e:	1c5a      	adds	r2, r3, #1
 800c620:	6022      	str	r2, [r4, #0]
 800c622:	701e      	strb	r6, [r3, #0]
 800c624:	6963      	ldr	r3, [r4, #20]
 800c626:	3001      	adds	r0, #1
 800c628:	4283      	cmp	r3, r0
 800c62a:	d004      	beq.n	800c636 <__swbuf_r+0x62>
 800c62c:	89a3      	ldrh	r3, [r4, #12]
 800c62e:	07db      	lsls	r3, r3, #31
 800c630:	d506      	bpl.n	800c640 <__swbuf_r+0x6c>
 800c632:	2e0a      	cmp	r6, #10
 800c634:	d104      	bne.n	800c640 <__swbuf_r+0x6c>
 800c636:	4621      	mov	r1, r4
 800c638:	4628      	mov	r0, r5
 800c63a:	f000 f93d 	bl	800c8b8 <_fflush_r>
 800c63e:	b988      	cbnz	r0, 800c664 <__swbuf_r+0x90>
 800c640:	4638      	mov	r0, r7
 800c642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c644:	4b0a      	ldr	r3, [pc, #40]	; (800c670 <__swbuf_r+0x9c>)
 800c646:	429c      	cmp	r4, r3
 800c648:	d101      	bne.n	800c64e <__swbuf_r+0x7a>
 800c64a:	68ac      	ldr	r4, [r5, #8]
 800c64c:	e7cf      	b.n	800c5ee <__swbuf_r+0x1a>
 800c64e:	4b09      	ldr	r3, [pc, #36]	; (800c674 <__swbuf_r+0xa0>)
 800c650:	429c      	cmp	r4, r3
 800c652:	bf08      	it	eq
 800c654:	68ec      	ldreq	r4, [r5, #12]
 800c656:	e7ca      	b.n	800c5ee <__swbuf_r+0x1a>
 800c658:	4621      	mov	r1, r4
 800c65a:	4628      	mov	r0, r5
 800c65c:	f000 f81a 	bl	800c694 <__swsetup_r>
 800c660:	2800      	cmp	r0, #0
 800c662:	d0cb      	beq.n	800c5fc <__swbuf_r+0x28>
 800c664:	f04f 37ff 	mov.w	r7, #4294967295
 800c668:	e7ea      	b.n	800c640 <__swbuf_r+0x6c>
 800c66a:	bf00      	nop
 800c66c:	0800f000 	.word	0x0800f000
 800c670:	0800f020 	.word	0x0800f020
 800c674:	0800efe0 	.word	0x0800efe0

0800c678 <__ascii_wctomb>:
 800c678:	b149      	cbz	r1, 800c68e <__ascii_wctomb+0x16>
 800c67a:	2aff      	cmp	r2, #255	; 0xff
 800c67c:	bf85      	ittet	hi
 800c67e:	238a      	movhi	r3, #138	; 0x8a
 800c680:	6003      	strhi	r3, [r0, #0]
 800c682:	700a      	strbls	r2, [r1, #0]
 800c684:	f04f 30ff 	movhi.w	r0, #4294967295
 800c688:	bf98      	it	ls
 800c68a:	2001      	movls	r0, #1
 800c68c:	4770      	bx	lr
 800c68e:	4608      	mov	r0, r1
 800c690:	4770      	bx	lr
	...

0800c694 <__swsetup_r>:
 800c694:	4b32      	ldr	r3, [pc, #200]	; (800c760 <__swsetup_r+0xcc>)
 800c696:	b570      	push	{r4, r5, r6, lr}
 800c698:	681d      	ldr	r5, [r3, #0]
 800c69a:	4606      	mov	r6, r0
 800c69c:	460c      	mov	r4, r1
 800c69e:	b125      	cbz	r5, 800c6aa <__swsetup_r+0x16>
 800c6a0:	69ab      	ldr	r3, [r5, #24]
 800c6a2:	b913      	cbnz	r3, 800c6aa <__swsetup_r+0x16>
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	f7fd fe91 	bl	800a3cc <__sinit>
 800c6aa:	4b2e      	ldr	r3, [pc, #184]	; (800c764 <__swsetup_r+0xd0>)
 800c6ac:	429c      	cmp	r4, r3
 800c6ae:	d10f      	bne.n	800c6d0 <__swsetup_r+0x3c>
 800c6b0:	686c      	ldr	r4, [r5, #4]
 800c6b2:	89a3      	ldrh	r3, [r4, #12]
 800c6b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6b8:	0719      	lsls	r1, r3, #28
 800c6ba:	d42c      	bmi.n	800c716 <__swsetup_r+0x82>
 800c6bc:	06dd      	lsls	r5, r3, #27
 800c6be:	d411      	bmi.n	800c6e4 <__swsetup_r+0x50>
 800c6c0:	2309      	movs	r3, #9
 800c6c2:	6033      	str	r3, [r6, #0]
 800c6c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c6c8:	81a3      	strh	r3, [r4, #12]
 800c6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ce:	e03e      	b.n	800c74e <__swsetup_r+0xba>
 800c6d0:	4b25      	ldr	r3, [pc, #148]	; (800c768 <__swsetup_r+0xd4>)
 800c6d2:	429c      	cmp	r4, r3
 800c6d4:	d101      	bne.n	800c6da <__swsetup_r+0x46>
 800c6d6:	68ac      	ldr	r4, [r5, #8]
 800c6d8:	e7eb      	b.n	800c6b2 <__swsetup_r+0x1e>
 800c6da:	4b24      	ldr	r3, [pc, #144]	; (800c76c <__swsetup_r+0xd8>)
 800c6dc:	429c      	cmp	r4, r3
 800c6de:	bf08      	it	eq
 800c6e0:	68ec      	ldreq	r4, [r5, #12]
 800c6e2:	e7e6      	b.n	800c6b2 <__swsetup_r+0x1e>
 800c6e4:	0758      	lsls	r0, r3, #29
 800c6e6:	d512      	bpl.n	800c70e <__swsetup_r+0x7a>
 800c6e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6ea:	b141      	cbz	r1, 800c6fe <__swsetup_r+0x6a>
 800c6ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6f0:	4299      	cmp	r1, r3
 800c6f2:	d002      	beq.n	800c6fa <__swsetup_r+0x66>
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	f7fe ff8f 	bl	800b618 <_free_r>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	6363      	str	r3, [r4, #52]	; 0x34
 800c6fe:	89a3      	ldrh	r3, [r4, #12]
 800c700:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c704:	81a3      	strh	r3, [r4, #12]
 800c706:	2300      	movs	r3, #0
 800c708:	6063      	str	r3, [r4, #4]
 800c70a:	6923      	ldr	r3, [r4, #16]
 800c70c:	6023      	str	r3, [r4, #0]
 800c70e:	89a3      	ldrh	r3, [r4, #12]
 800c710:	f043 0308 	orr.w	r3, r3, #8
 800c714:	81a3      	strh	r3, [r4, #12]
 800c716:	6923      	ldr	r3, [r4, #16]
 800c718:	b94b      	cbnz	r3, 800c72e <__swsetup_r+0x9a>
 800c71a:	89a3      	ldrh	r3, [r4, #12]
 800c71c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c724:	d003      	beq.n	800c72e <__swsetup_r+0x9a>
 800c726:	4621      	mov	r1, r4
 800c728:	4630      	mov	r0, r6
 800c72a:	f000 f939 	bl	800c9a0 <__smakebuf_r>
 800c72e:	89a0      	ldrh	r0, [r4, #12]
 800c730:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c734:	f010 0301 	ands.w	r3, r0, #1
 800c738:	d00a      	beq.n	800c750 <__swsetup_r+0xbc>
 800c73a:	2300      	movs	r3, #0
 800c73c:	60a3      	str	r3, [r4, #8]
 800c73e:	6963      	ldr	r3, [r4, #20]
 800c740:	425b      	negs	r3, r3
 800c742:	61a3      	str	r3, [r4, #24]
 800c744:	6923      	ldr	r3, [r4, #16]
 800c746:	b943      	cbnz	r3, 800c75a <__swsetup_r+0xc6>
 800c748:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c74c:	d1ba      	bne.n	800c6c4 <__swsetup_r+0x30>
 800c74e:	bd70      	pop	{r4, r5, r6, pc}
 800c750:	0781      	lsls	r1, r0, #30
 800c752:	bf58      	it	pl
 800c754:	6963      	ldrpl	r3, [r4, #20]
 800c756:	60a3      	str	r3, [r4, #8]
 800c758:	e7f4      	b.n	800c744 <__swsetup_r+0xb0>
 800c75a:	2000      	movs	r0, #0
 800c75c:	e7f7      	b.n	800c74e <__swsetup_r+0xba>
 800c75e:	bf00      	nop
 800c760:	20000028 	.word	0x20000028
 800c764:	0800f000 	.word	0x0800f000
 800c768:	0800f020 	.word	0x0800f020
 800c76c:	0800efe0 	.word	0x0800efe0

0800c770 <__assert_func>:
 800c770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c772:	4614      	mov	r4, r2
 800c774:	461a      	mov	r2, r3
 800c776:	4b09      	ldr	r3, [pc, #36]	; (800c79c <__assert_func+0x2c>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4605      	mov	r5, r0
 800c77c:	68d8      	ldr	r0, [r3, #12]
 800c77e:	b14c      	cbz	r4, 800c794 <__assert_func+0x24>
 800c780:	4b07      	ldr	r3, [pc, #28]	; (800c7a0 <__assert_func+0x30>)
 800c782:	9100      	str	r1, [sp, #0]
 800c784:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c788:	4906      	ldr	r1, [pc, #24]	; (800c7a4 <__assert_func+0x34>)
 800c78a:	462b      	mov	r3, r5
 800c78c:	f000 f8d0 	bl	800c930 <fiprintf>
 800c790:	f000 f99b 	bl	800caca <abort>
 800c794:	4b04      	ldr	r3, [pc, #16]	; (800c7a8 <__assert_func+0x38>)
 800c796:	461c      	mov	r4, r3
 800c798:	e7f3      	b.n	800c782 <__assert_func+0x12>
 800c79a:	bf00      	nop
 800c79c:	20000028 	.word	0x20000028
 800c7a0:	0800f240 	.word	0x0800f240
 800c7a4:	0800f24d 	.word	0x0800f24d
 800c7a8:	0800f27b 	.word	0x0800f27b

0800c7ac <__sflush_r>:
 800c7ac:	898a      	ldrh	r2, [r1, #12]
 800c7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b2:	4605      	mov	r5, r0
 800c7b4:	0710      	lsls	r0, r2, #28
 800c7b6:	460c      	mov	r4, r1
 800c7b8:	d458      	bmi.n	800c86c <__sflush_r+0xc0>
 800c7ba:	684b      	ldr	r3, [r1, #4]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	dc05      	bgt.n	800c7cc <__sflush_r+0x20>
 800c7c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	dc02      	bgt.n	800c7cc <__sflush_r+0x20>
 800c7c6:	2000      	movs	r0, #0
 800c7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7ce:	2e00      	cmp	r6, #0
 800c7d0:	d0f9      	beq.n	800c7c6 <__sflush_r+0x1a>
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7d8:	682f      	ldr	r7, [r5, #0]
 800c7da:	602b      	str	r3, [r5, #0]
 800c7dc:	d032      	beq.n	800c844 <__sflush_r+0x98>
 800c7de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7e0:	89a3      	ldrh	r3, [r4, #12]
 800c7e2:	075a      	lsls	r2, r3, #29
 800c7e4:	d505      	bpl.n	800c7f2 <__sflush_r+0x46>
 800c7e6:	6863      	ldr	r3, [r4, #4]
 800c7e8:	1ac0      	subs	r0, r0, r3
 800c7ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7ec:	b10b      	cbz	r3, 800c7f2 <__sflush_r+0x46>
 800c7ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7f0:	1ac0      	subs	r0, r0, r3
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7f8:	6a21      	ldr	r1, [r4, #32]
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	47b0      	blx	r6
 800c7fe:	1c43      	adds	r3, r0, #1
 800c800:	89a3      	ldrh	r3, [r4, #12]
 800c802:	d106      	bne.n	800c812 <__sflush_r+0x66>
 800c804:	6829      	ldr	r1, [r5, #0]
 800c806:	291d      	cmp	r1, #29
 800c808:	d82c      	bhi.n	800c864 <__sflush_r+0xb8>
 800c80a:	4a2a      	ldr	r2, [pc, #168]	; (800c8b4 <__sflush_r+0x108>)
 800c80c:	40ca      	lsrs	r2, r1
 800c80e:	07d6      	lsls	r6, r2, #31
 800c810:	d528      	bpl.n	800c864 <__sflush_r+0xb8>
 800c812:	2200      	movs	r2, #0
 800c814:	6062      	str	r2, [r4, #4]
 800c816:	04d9      	lsls	r1, r3, #19
 800c818:	6922      	ldr	r2, [r4, #16]
 800c81a:	6022      	str	r2, [r4, #0]
 800c81c:	d504      	bpl.n	800c828 <__sflush_r+0x7c>
 800c81e:	1c42      	adds	r2, r0, #1
 800c820:	d101      	bne.n	800c826 <__sflush_r+0x7a>
 800c822:	682b      	ldr	r3, [r5, #0]
 800c824:	b903      	cbnz	r3, 800c828 <__sflush_r+0x7c>
 800c826:	6560      	str	r0, [r4, #84]	; 0x54
 800c828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c82a:	602f      	str	r7, [r5, #0]
 800c82c:	2900      	cmp	r1, #0
 800c82e:	d0ca      	beq.n	800c7c6 <__sflush_r+0x1a>
 800c830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c834:	4299      	cmp	r1, r3
 800c836:	d002      	beq.n	800c83e <__sflush_r+0x92>
 800c838:	4628      	mov	r0, r5
 800c83a:	f7fe feed 	bl	800b618 <_free_r>
 800c83e:	2000      	movs	r0, #0
 800c840:	6360      	str	r0, [r4, #52]	; 0x34
 800c842:	e7c1      	b.n	800c7c8 <__sflush_r+0x1c>
 800c844:	6a21      	ldr	r1, [r4, #32]
 800c846:	2301      	movs	r3, #1
 800c848:	4628      	mov	r0, r5
 800c84a:	47b0      	blx	r6
 800c84c:	1c41      	adds	r1, r0, #1
 800c84e:	d1c7      	bne.n	800c7e0 <__sflush_r+0x34>
 800c850:	682b      	ldr	r3, [r5, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d0c4      	beq.n	800c7e0 <__sflush_r+0x34>
 800c856:	2b1d      	cmp	r3, #29
 800c858:	d001      	beq.n	800c85e <__sflush_r+0xb2>
 800c85a:	2b16      	cmp	r3, #22
 800c85c:	d101      	bne.n	800c862 <__sflush_r+0xb6>
 800c85e:	602f      	str	r7, [r5, #0]
 800c860:	e7b1      	b.n	800c7c6 <__sflush_r+0x1a>
 800c862:	89a3      	ldrh	r3, [r4, #12]
 800c864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c868:	81a3      	strh	r3, [r4, #12]
 800c86a:	e7ad      	b.n	800c7c8 <__sflush_r+0x1c>
 800c86c:	690f      	ldr	r7, [r1, #16]
 800c86e:	2f00      	cmp	r7, #0
 800c870:	d0a9      	beq.n	800c7c6 <__sflush_r+0x1a>
 800c872:	0793      	lsls	r3, r2, #30
 800c874:	680e      	ldr	r6, [r1, #0]
 800c876:	bf08      	it	eq
 800c878:	694b      	ldreq	r3, [r1, #20]
 800c87a:	600f      	str	r7, [r1, #0]
 800c87c:	bf18      	it	ne
 800c87e:	2300      	movne	r3, #0
 800c880:	eba6 0807 	sub.w	r8, r6, r7
 800c884:	608b      	str	r3, [r1, #8]
 800c886:	f1b8 0f00 	cmp.w	r8, #0
 800c88a:	dd9c      	ble.n	800c7c6 <__sflush_r+0x1a>
 800c88c:	6a21      	ldr	r1, [r4, #32]
 800c88e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c890:	4643      	mov	r3, r8
 800c892:	463a      	mov	r2, r7
 800c894:	4628      	mov	r0, r5
 800c896:	47b0      	blx	r6
 800c898:	2800      	cmp	r0, #0
 800c89a:	dc06      	bgt.n	800c8aa <__sflush_r+0xfe>
 800c89c:	89a3      	ldrh	r3, [r4, #12]
 800c89e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8a2:	81a3      	strh	r3, [r4, #12]
 800c8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a8:	e78e      	b.n	800c7c8 <__sflush_r+0x1c>
 800c8aa:	4407      	add	r7, r0
 800c8ac:	eba8 0800 	sub.w	r8, r8, r0
 800c8b0:	e7e9      	b.n	800c886 <__sflush_r+0xda>
 800c8b2:	bf00      	nop
 800c8b4:	20400001 	.word	0x20400001

0800c8b8 <_fflush_r>:
 800c8b8:	b538      	push	{r3, r4, r5, lr}
 800c8ba:	690b      	ldr	r3, [r1, #16]
 800c8bc:	4605      	mov	r5, r0
 800c8be:	460c      	mov	r4, r1
 800c8c0:	b913      	cbnz	r3, 800c8c8 <_fflush_r+0x10>
 800c8c2:	2500      	movs	r5, #0
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	bd38      	pop	{r3, r4, r5, pc}
 800c8c8:	b118      	cbz	r0, 800c8d2 <_fflush_r+0x1a>
 800c8ca:	6983      	ldr	r3, [r0, #24]
 800c8cc:	b90b      	cbnz	r3, 800c8d2 <_fflush_r+0x1a>
 800c8ce:	f7fd fd7d 	bl	800a3cc <__sinit>
 800c8d2:	4b14      	ldr	r3, [pc, #80]	; (800c924 <_fflush_r+0x6c>)
 800c8d4:	429c      	cmp	r4, r3
 800c8d6:	d11b      	bne.n	800c910 <_fflush_r+0x58>
 800c8d8:	686c      	ldr	r4, [r5, #4]
 800c8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d0ef      	beq.n	800c8c2 <_fflush_r+0xa>
 800c8e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8e4:	07d0      	lsls	r0, r2, #31
 800c8e6:	d404      	bmi.n	800c8f2 <_fflush_r+0x3a>
 800c8e8:	0599      	lsls	r1, r3, #22
 800c8ea:	d402      	bmi.n	800c8f2 <_fflush_r+0x3a>
 800c8ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8ee:	f7fe f97e 	bl	800abee <__retarget_lock_acquire_recursive>
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	4621      	mov	r1, r4
 800c8f6:	f7ff ff59 	bl	800c7ac <__sflush_r>
 800c8fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8fc:	07da      	lsls	r2, r3, #31
 800c8fe:	4605      	mov	r5, r0
 800c900:	d4e0      	bmi.n	800c8c4 <_fflush_r+0xc>
 800c902:	89a3      	ldrh	r3, [r4, #12]
 800c904:	059b      	lsls	r3, r3, #22
 800c906:	d4dd      	bmi.n	800c8c4 <_fflush_r+0xc>
 800c908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c90a:	f7fe f971 	bl	800abf0 <__retarget_lock_release_recursive>
 800c90e:	e7d9      	b.n	800c8c4 <_fflush_r+0xc>
 800c910:	4b05      	ldr	r3, [pc, #20]	; (800c928 <_fflush_r+0x70>)
 800c912:	429c      	cmp	r4, r3
 800c914:	d101      	bne.n	800c91a <_fflush_r+0x62>
 800c916:	68ac      	ldr	r4, [r5, #8]
 800c918:	e7df      	b.n	800c8da <_fflush_r+0x22>
 800c91a:	4b04      	ldr	r3, [pc, #16]	; (800c92c <_fflush_r+0x74>)
 800c91c:	429c      	cmp	r4, r3
 800c91e:	bf08      	it	eq
 800c920:	68ec      	ldreq	r4, [r5, #12]
 800c922:	e7da      	b.n	800c8da <_fflush_r+0x22>
 800c924:	0800f000 	.word	0x0800f000
 800c928:	0800f020 	.word	0x0800f020
 800c92c:	0800efe0 	.word	0x0800efe0

0800c930 <fiprintf>:
 800c930:	b40e      	push	{r1, r2, r3}
 800c932:	b503      	push	{r0, r1, lr}
 800c934:	4601      	mov	r1, r0
 800c936:	ab03      	add	r3, sp, #12
 800c938:	4805      	ldr	r0, [pc, #20]	; (800c950 <fiprintf+0x20>)
 800c93a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c93e:	6800      	ldr	r0, [r0, #0]
 800c940:	9301      	str	r3, [sp, #4]
 800c942:	f7ff faa1 	bl	800be88 <_vfiprintf_r>
 800c946:	b002      	add	sp, #8
 800c948:	f85d eb04 	ldr.w	lr, [sp], #4
 800c94c:	b003      	add	sp, #12
 800c94e:	4770      	bx	lr
 800c950:	20000028 	.word	0x20000028

0800c954 <__swhatbuf_r>:
 800c954:	b570      	push	{r4, r5, r6, lr}
 800c956:	460e      	mov	r6, r1
 800c958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c95c:	2900      	cmp	r1, #0
 800c95e:	b096      	sub	sp, #88	; 0x58
 800c960:	4614      	mov	r4, r2
 800c962:	461d      	mov	r5, r3
 800c964:	da08      	bge.n	800c978 <__swhatbuf_r+0x24>
 800c966:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c96a:	2200      	movs	r2, #0
 800c96c:	602a      	str	r2, [r5, #0]
 800c96e:	061a      	lsls	r2, r3, #24
 800c970:	d410      	bmi.n	800c994 <__swhatbuf_r+0x40>
 800c972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c976:	e00e      	b.n	800c996 <__swhatbuf_r+0x42>
 800c978:	466a      	mov	r2, sp
 800c97a:	f000 f8ad 	bl	800cad8 <_fstat_r>
 800c97e:	2800      	cmp	r0, #0
 800c980:	dbf1      	blt.n	800c966 <__swhatbuf_r+0x12>
 800c982:	9a01      	ldr	r2, [sp, #4]
 800c984:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c988:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c98c:	425a      	negs	r2, r3
 800c98e:	415a      	adcs	r2, r3
 800c990:	602a      	str	r2, [r5, #0]
 800c992:	e7ee      	b.n	800c972 <__swhatbuf_r+0x1e>
 800c994:	2340      	movs	r3, #64	; 0x40
 800c996:	2000      	movs	r0, #0
 800c998:	6023      	str	r3, [r4, #0]
 800c99a:	b016      	add	sp, #88	; 0x58
 800c99c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c9a0 <__smakebuf_r>:
 800c9a0:	898b      	ldrh	r3, [r1, #12]
 800c9a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9a4:	079d      	lsls	r5, r3, #30
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	460c      	mov	r4, r1
 800c9aa:	d507      	bpl.n	800c9bc <__smakebuf_r+0x1c>
 800c9ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9b0:	6023      	str	r3, [r4, #0]
 800c9b2:	6123      	str	r3, [r4, #16]
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	6163      	str	r3, [r4, #20]
 800c9b8:	b002      	add	sp, #8
 800c9ba:	bd70      	pop	{r4, r5, r6, pc}
 800c9bc:	ab01      	add	r3, sp, #4
 800c9be:	466a      	mov	r2, sp
 800c9c0:	f7ff ffc8 	bl	800c954 <__swhatbuf_r>
 800c9c4:	9900      	ldr	r1, [sp, #0]
 800c9c6:	4605      	mov	r5, r0
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	f7fe fe91 	bl	800b6f0 <_malloc_r>
 800c9ce:	b948      	cbnz	r0, 800c9e4 <__smakebuf_r+0x44>
 800c9d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9d4:	059a      	lsls	r2, r3, #22
 800c9d6:	d4ef      	bmi.n	800c9b8 <__smakebuf_r+0x18>
 800c9d8:	f023 0303 	bic.w	r3, r3, #3
 800c9dc:	f043 0302 	orr.w	r3, r3, #2
 800c9e0:	81a3      	strh	r3, [r4, #12]
 800c9e2:	e7e3      	b.n	800c9ac <__smakebuf_r+0xc>
 800c9e4:	4b0d      	ldr	r3, [pc, #52]	; (800ca1c <__smakebuf_r+0x7c>)
 800c9e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	6020      	str	r0, [r4, #0]
 800c9ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9f0:	81a3      	strh	r3, [r4, #12]
 800c9f2:	9b00      	ldr	r3, [sp, #0]
 800c9f4:	6163      	str	r3, [r4, #20]
 800c9f6:	9b01      	ldr	r3, [sp, #4]
 800c9f8:	6120      	str	r0, [r4, #16]
 800c9fa:	b15b      	cbz	r3, 800ca14 <__smakebuf_r+0x74>
 800c9fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca00:	4630      	mov	r0, r6
 800ca02:	f000 f87b 	bl	800cafc <_isatty_r>
 800ca06:	b128      	cbz	r0, 800ca14 <__smakebuf_r+0x74>
 800ca08:	89a3      	ldrh	r3, [r4, #12]
 800ca0a:	f023 0303 	bic.w	r3, r3, #3
 800ca0e:	f043 0301 	orr.w	r3, r3, #1
 800ca12:	81a3      	strh	r3, [r4, #12]
 800ca14:	89a0      	ldrh	r0, [r4, #12]
 800ca16:	4305      	orrs	r5, r0
 800ca18:	81a5      	strh	r5, [r4, #12]
 800ca1a:	e7cd      	b.n	800c9b8 <__smakebuf_r+0x18>
 800ca1c:	0800a365 	.word	0x0800a365

0800ca20 <memmove>:
 800ca20:	4288      	cmp	r0, r1
 800ca22:	b510      	push	{r4, lr}
 800ca24:	eb01 0402 	add.w	r4, r1, r2
 800ca28:	d902      	bls.n	800ca30 <memmove+0x10>
 800ca2a:	4284      	cmp	r4, r0
 800ca2c:	4623      	mov	r3, r4
 800ca2e:	d807      	bhi.n	800ca40 <memmove+0x20>
 800ca30:	1e43      	subs	r3, r0, #1
 800ca32:	42a1      	cmp	r1, r4
 800ca34:	d008      	beq.n	800ca48 <memmove+0x28>
 800ca36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca3e:	e7f8      	b.n	800ca32 <memmove+0x12>
 800ca40:	4402      	add	r2, r0
 800ca42:	4601      	mov	r1, r0
 800ca44:	428a      	cmp	r2, r1
 800ca46:	d100      	bne.n	800ca4a <memmove+0x2a>
 800ca48:	bd10      	pop	{r4, pc}
 800ca4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca52:	e7f7      	b.n	800ca44 <memmove+0x24>

0800ca54 <__malloc_lock>:
 800ca54:	4801      	ldr	r0, [pc, #4]	; (800ca5c <__malloc_lock+0x8>)
 800ca56:	f7fe b8ca 	b.w	800abee <__retarget_lock_acquire_recursive>
 800ca5a:	bf00      	nop
 800ca5c:	20000918 	.word	0x20000918

0800ca60 <__malloc_unlock>:
 800ca60:	4801      	ldr	r0, [pc, #4]	; (800ca68 <__malloc_unlock+0x8>)
 800ca62:	f7fe b8c5 	b.w	800abf0 <__retarget_lock_release_recursive>
 800ca66:	bf00      	nop
 800ca68:	20000918 	.word	0x20000918

0800ca6c <_realloc_r>:
 800ca6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca70:	4680      	mov	r8, r0
 800ca72:	4614      	mov	r4, r2
 800ca74:	460e      	mov	r6, r1
 800ca76:	b921      	cbnz	r1, 800ca82 <_realloc_r+0x16>
 800ca78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca7c:	4611      	mov	r1, r2
 800ca7e:	f7fe be37 	b.w	800b6f0 <_malloc_r>
 800ca82:	b92a      	cbnz	r2, 800ca90 <_realloc_r+0x24>
 800ca84:	f7fe fdc8 	bl	800b618 <_free_r>
 800ca88:	4625      	mov	r5, r4
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca90:	f000 f844 	bl	800cb1c <_malloc_usable_size_r>
 800ca94:	4284      	cmp	r4, r0
 800ca96:	4607      	mov	r7, r0
 800ca98:	d802      	bhi.n	800caa0 <_realloc_r+0x34>
 800ca9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca9e:	d812      	bhi.n	800cac6 <_realloc_r+0x5a>
 800caa0:	4621      	mov	r1, r4
 800caa2:	4640      	mov	r0, r8
 800caa4:	f7fe fe24 	bl	800b6f0 <_malloc_r>
 800caa8:	4605      	mov	r5, r0
 800caaa:	2800      	cmp	r0, #0
 800caac:	d0ed      	beq.n	800ca8a <_realloc_r+0x1e>
 800caae:	42bc      	cmp	r4, r7
 800cab0:	4622      	mov	r2, r4
 800cab2:	4631      	mov	r1, r6
 800cab4:	bf28      	it	cs
 800cab6:	463a      	movcs	r2, r7
 800cab8:	f7fe f8c8 	bl	800ac4c <memcpy>
 800cabc:	4631      	mov	r1, r6
 800cabe:	4640      	mov	r0, r8
 800cac0:	f7fe fdaa 	bl	800b618 <_free_r>
 800cac4:	e7e1      	b.n	800ca8a <_realloc_r+0x1e>
 800cac6:	4635      	mov	r5, r6
 800cac8:	e7df      	b.n	800ca8a <_realloc_r+0x1e>

0800caca <abort>:
 800caca:	b508      	push	{r3, lr}
 800cacc:	2006      	movs	r0, #6
 800cace:	f000 f855 	bl	800cb7c <raise>
 800cad2:	2001      	movs	r0, #1
 800cad4:	f7f5 fb20 	bl	8002118 <_exit>

0800cad8 <_fstat_r>:
 800cad8:	b538      	push	{r3, r4, r5, lr}
 800cada:	4d07      	ldr	r5, [pc, #28]	; (800caf8 <_fstat_r+0x20>)
 800cadc:	2300      	movs	r3, #0
 800cade:	4604      	mov	r4, r0
 800cae0:	4608      	mov	r0, r1
 800cae2:	4611      	mov	r1, r2
 800cae4:	602b      	str	r3, [r5, #0]
 800cae6:	f7f5 fb66 	bl	80021b6 <_fstat>
 800caea:	1c43      	adds	r3, r0, #1
 800caec:	d102      	bne.n	800caf4 <_fstat_r+0x1c>
 800caee:	682b      	ldr	r3, [r5, #0]
 800caf0:	b103      	cbz	r3, 800caf4 <_fstat_r+0x1c>
 800caf2:	6023      	str	r3, [r4, #0]
 800caf4:	bd38      	pop	{r3, r4, r5, pc}
 800caf6:	bf00      	nop
 800caf8:	20000924 	.word	0x20000924

0800cafc <_isatty_r>:
 800cafc:	b538      	push	{r3, r4, r5, lr}
 800cafe:	4d06      	ldr	r5, [pc, #24]	; (800cb18 <_isatty_r+0x1c>)
 800cb00:	2300      	movs	r3, #0
 800cb02:	4604      	mov	r4, r0
 800cb04:	4608      	mov	r0, r1
 800cb06:	602b      	str	r3, [r5, #0]
 800cb08:	f7f5 fb65 	bl	80021d6 <_isatty>
 800cb0c:	1c43      	adds	r3, r0, #1
 800cb0e:	d102      	bne.n	800cb16 <_isatty_r+0x1a>
 800cb10:	682b      	ldr	r3, [r5, #0]
 800cb12:	b103      	cbz	r3, 800cb16 <_isatty_r+0x1a>
 800cb14:	6023      	str	r3, [r4, #0]
 800cb16:	bd38      	pop	{r3, r4, r5, pc}
 800cb18:	20000924 	.word	0x20000924

0800cb1c <_malloc_usable_size_r>:
 800cb1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb20:	1f18      	subs	r0, r3, #4
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	bfbc      	itt	lt
 800cb26:	580b      	ldrlt	r3, [r1, r0]
 800cb28:	18c0      	addlt	r0, r0, r3
 800cb2a:	4770      	bx	lr

0800cb2c <_raise_r>:
 800cb2c:	291f      	cmp	r1, #31
 800cb2e:	b538      	push	{r3, r4, r5, lr}
 800cb30:	4604      	mov	r4, r0
 800cb32:	460d      	mov	r5, r1
 800cb34:	d904      	bls.n	800cb40 <_raise_r+0x14>
 800cb36:	2316      	movs	r3, #22
 800cb38:	6003      	str	r3, [r0, #0]
 800cb3a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb3e:	bd38      	pop	{r3, r4, r5, pc}
 800cb40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb42:	b112      	cbz	r2, 800cb4a <_raise_r+0x1e>
 800cb44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb48:	b94b      	cbnz	r3, 800cb5e <_raise_r+0x32>
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f000 f830 	bl	800cbb0 <_getpid_r>
 800cb50:	462a      	mov	r2, r5
 800cb52:	4601      	mov	r1, r0
 800cb54:	4620      	mov	r0, r4
 800cb56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb5a:	f000 b817 	b.w	800cb8c <_kill_r>
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d00a      	beq.n	800cb78 <_raise_r+0x4c>
 800cb62:	1c59      	adds	r1, r3, #1
 800cb64:	d103      	bne.n	800cb6e <_raise_r+0x42>
 800cb66:	2316      	movs	r3, #22
 800cb68:	6003      	str	r3, [r0, #0]
 800cb6a:	2001      	movs	r0, #1
 800cb6c:	e7e7      	b.n	800cb3e <_raise_r+0x12>
 800cb6e:	2400      	movs	r4, #0
 800cb70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb74:	4628      	mov	r0, r5
 800cb76:	4798      	blx	r3
 800cb78:	2000      	movs	r0, #0
 800cb7a:	e7e0      	b.n	800cb3e <_raise_r+0x12>

0800cb7c <raise>:
 800cb7c:	4b02      	ldr	r3, [pc, #8]	; (800cb88 <raise+0xc>)
 800cb7e:	4601      	mov	r1, r0
 800cb80:	6818      	ldr	r0, [r3, #0]
 800cb82:	f7ff bfd3 	b.w	800cb2c <_raise_r>
 800cb86:	bf00      	nop
 800cb88:	20000028 	.word	0x20000028

0800cb8c <_kill_r>:
 800cb8c:	b538      	push	{r3, r4, r5, lr}
 800cb8e:	4d07      	ldr	r5, [pc, #28]	; (800cbac <_kill_r+0x20>)
 800cb90:	2300      	movs	r3, #0
 800cb92:	4604      	mov	r4, r0
 800cb94:	4608      	mov	r0, r1
 800cb96:	4611      	mov	r1, r2
 800cb98:	602b      	str	r3, [r5, #0]
 800cb9a:	f7f5 faad 	bl	80020f8 <_kill>
 800cb9e:	1c43      	adds	r3, r0, #1
 800cba0:	d102      	bne.n	800cba8 <_kill_r+0x1c>
 800cba2:	682b      	ldr	r3, [r5, #0]
 800cba4:	b103      	cbz	r3, 800cba8 <_kill_r+0x1c>
 800cba6:	6023      	str	r3, [r4, #0]
 800cba8:	bd38      	pop	{r3, r4, r5, pc}
 800cbaa:	bf00      	nop
 800cbac:	20000924 	.word	0x20000924

0800cbb0 <_getpid_r>:
 800cbb0:	f7f5 ba9a 	b.w	80020e8 <_getpid>

0800cbb4 <_init>:
 800cbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbb6:	bf00      	nop
 800cbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbba:	bc08      	pop	{r3}
 800cbbc:	469e      	mov	lr, r3
 800cbbe:	4770      	bx	lr

0800cbc0 <_fini>:
 800cbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbc2:	bf00      	nop
 800cbc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbc6:	bc08      	pop	{r3}
 800cbc8:	469e      	mov	lr, r3
 800cbca:	4770      	bx	lr
